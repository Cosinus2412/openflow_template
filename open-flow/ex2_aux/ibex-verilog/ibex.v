/* Generated by Yosys 0.36+58 (git sha1 ea7818d31, g++ 12.2.0-14 -fPIC -Os) */

module \$paramod$0e8af16ac611542545c79f92c6ed357e82273047\ibex_counter (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire [63:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  input clk_i;
  wire clk_i;
  wire [63:0] counter;
  wire [63:0] counter_d;
  input counter_inc_i;
  wire counter_inc_i;
  wire [63:0] counter_load;
  reg [63:0] counter_q;
  wire [63:0] counter_upd;
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  input counter_we_i;
  wire counter_we_i;
  input counterh_we_i;
  wire counterh_we_i;
  input rst_ni;
  wire rst_ni;
  wire we;
  assign counter_val_upd_o = counter_q + 64'h0000000000000001;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q[63:32] <= 32'd0;
    else if (_04_) counter_q[63:32] <= counter_d[63:32];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q[31:0] <= 32'd0;
    else if (_05_) counter_q[31:0] <= counter_d[31:0];
  assign _01_ = | { we, counter_inc_i };
  assign _02_ = { we, counterh_we_i } != 2'h2;
  assign _03_ = { we, counterh_we_i } != 2'h3;
  assign _04_ = & { _01_, _02_ };
  assign _05_ = & { _03_, _01_ };
  assign we = counter_we_i | counterh_we_i;
  assign _00_ = counter_inc_i ? counter_val_upd_o : 64'hxxxxxxxxxxxxxxxx;
  assign counter_d = we ? counter_load : _00_;
  assign counter_load[63:32] = counterh_we_i ? counter_val_i : 32'hxxxxxxxx;
  assign counter_load[31:0] = counterh_we_i ? 32'hxxxxxxxx : counter_val_i;
  assign counter = counter_q;
  assign counter_upd = counter_val_upd_o;
  assign counter_val_o = counter_q;
endmodule

module \$paramod$1856f3122dfb4c7484e38d1258cb6e342e4f338e\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [5:0] rd_data_o;
  wire [5:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [5:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [5:0] wr_data_i;
  wire [5:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 6'h10;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$1eaadcfb69924342b10bf40ee9572283f5a3eb24\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [31:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 32'd1;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$1f2cba5866897a44b387e1c2993af0b4468bf03a\prim_buf (in_i, out_o);
  input [3:0] in_i;
  wire [3:0] in_i;
  output [3:0] out_o;
  wire [3:0] out_o;
  \$paramod\prim_generic_buf\Width=s32'00000000000000000000000000000100  \gen_generic.u_impl_generic  (
    .in_i(in_i),
    .out_o(out_o)
  );
endmodule

module \$paramod$2b059ceb396aa1a4580cfca7b7f87b2e9d5e9ff7\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [17:0] rd_data_o;
  wire [17:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [17:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [17:0] wr_data_i;
  wire [17:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 18'h00000;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$3a67466f09f54788ef62f556ea1b090a6f71265e\ibex_if_stage (clk_i, rst_ni, boot_addr_i, req_i, instr_req_o, instr_addr_o, instr_gnt_i, instr_rvalid_i, instr_rdata_i, instr_bus_err_i, instr_intg_err_o, ic_tag_req_o, ic_tag_write_o, ic_tag_addr_o, ic_tag_wdata_o, ic_tag_rdata_i, ic_data_req_o, ic_data_write_o, ic_data_addr_o, ic_data_wdata_o, ic_data_rdata_i
, ic_scr_key_valid_i, ic_scr_key_req_o, instr_valid_id_o, instr_new_id_o, instr_rdata_id_o, instr_rdata_alu_id_o, instr_rdata_c_id_o, instr_is_compressed_id_o, instr_bp_taken_o, instr_fetch_err_o, instr_fetch_err_plus2_o, illegal_c_insn_id_o, dummy_instr_id_o, pc_if_o, pc_id_o, pmp_err_if_i, pmp_err_if_plus2_i, instr_valid_clear_i, pc_set_i, pc_mux_i, nt_branch_mispredict_i
, nt_branch_addr_i, exc_pc_mux_i, dummy_instr_en_i, dummy_instr_mask_i, dummy_instr_seed_en_i, dummy_instr_seed_i, icache_enable_i, icache_inval_i, icache_ecc_error_o, branch_target_ex_i, csr_mepc_i, csr_depc_i, csr_mtvec_i, csr_mtvec_init_o, id_in_ready_i, pc_mismatch_alert_o, if_busy_o, exc_cause);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  wire branch_req;
  input [31:0] branch_target_ex_i;
  wire [31:0] branch_target_ex_i;
  input clk_i;
  wire clk_i;
  input [31:0] csr_depc_i;
  wire [31:0] csr_depc_i;
  input [31:0] csr_mepc_i;
  wire [31:0] csr_mepc_i;
  input [31:0] csr_mtvec_i;
  wire [31:0] csr_mtvec_i;
  output csr_mtvec_init_o;
  wire csr_mtvec_init_o;
  input dummy_instr_en_i;
  wire dummy_instr_en_i;
  output dummy_instr_id_o;
  wire dummy_instr_id_o;
  input [2:0] dummy_instr_mask_i;
  wire [2:0] dummy_instr_mask_i;
  input dummy_instr_seed_en_i;
  wire dummy_instr_seed_en_i;
  input [31:0] dummy_instr_seed_i;
  wire [31:0] dummy_instr_seed_i;
  input [6:0] exc_cause;
  wire [6:0] exc_cause;
  wire [31:0] exc_pc;
  input [1:0] exc_pc_mux_i;
  wire [1:0] exc_pc_mux_i;
  wire [31:0] fetch_addr;
  wire [31:0] fetch_addr_n;
  wire fetch_err;
  wire fetch_err_plus2;
  wire [31:0] fetch_rdata;
  wire fetch_ready;
  wire fetch_valid;
  wire fetch_valid_raw;
  wire \gen_no_dummy_instr.unused_dummy_en ;
  wire [2:0] \gen_no_dummy_instr.unused_dummy_mask ;
  wire [31:0] \gen_no_dummy_instr.unused_dummy_seed ;
  wire \gen_no_dummy_instr.unused_dummy_seed_en ;
  wire [127:0] \gen_prefetch_buffer.unused_data_ram_input ;
  wire \gen_prefetch_buffer.unused_icen ;
  wire \gen_prefetch_buffer.unused_icinv ;
  wire \gen_prefetch_buffer.unused_scr_key_valid ;
  wire [43:0] \gen_prefetch_buffer.unused_tag_ram_input ;
  output [7:0] ic_data_addr_o;
  wire [7:0] ic_data_addr_o;
  input [127:0] ic_data_rdata_i;
  wire [127:0] ic_data_rdata_i;
  output [1:0] ic_data_req_o;
  wire [1:0] ic_data_req_o;
  output [63:0] ic_data_wdata_o;
  wire [63:0] ic_data_wdata_o;
  output ic_data_write_o;
  wire ic_data_write_o;
  output ic_scr_key_req_o;
  wire ic_scr_key_req_o;
  input ic_scr_key_valid_i;
  wire ic_scr_key_valid_i;
  output [7:0] ic_tag_addr_o;
  wire [7:0] ic_tag_addr_o;
  input [43:0] ic_tag_rdata_i;
  wire [43:0] ic_tag_rdata_i;
  output [1:0] ic_tag_req_o;
  wire [1:0] ic_tag_req_o;
  output [21:0] ic_tag_wdata_o;
  wire [21:0] ic_tag_wdata_o;
  output ic_tag_write_o;
  wire ic_tag_write_o;
  output icache_ecc_error_o;
  wire icache_ecc_error_o;
  input icache_enable_i;
  wire icache_enable_i;
  input icache_inval_i;
  wire icache_inval_i;
  input id_in_ready_i;
  wire id_in_ready_i;
  output if_busy_o;
  wire if_busy_o;
  wire if_id_pipe_reg_we;
  wire [31:0] if_instr_addr;
  wire if_instr_bus_err;
  wire if_instr_err;
  wire if_instr_err_plus2;
  wire if_instr_pmp_err;
  wire [31:0] if_instr_rdata;
  wire if_instr_valid;
  wire illegal_c_insn;
  output illegal_c_insn_id_o;
  reg illegal_c_insn_id_o;
  wire illegal_c_instr_out;
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  output instr_bp_taken_o;
  wire instr_bp_taken_o;
  input instr_bus_err_i;
  wire instr_bus_err_i;
  wire [31:0] instr_decompressed;
  wire instr_err;
  wire instr_err_out;
  output instr_fetch_err_o;
  reg instr_fetch_err_o;
  output instr_fetch_err_plus2_o;
  reg instr_fetch_err_plus2_o;
  input instr_gnt_i;
  wire instr_gnt_i;
  wire instr_intg_err;
  output instr_intg_err_o;
  wire instr_intg_err_o;
  wire instr_is_compressed;
  output instr_is_compressed_id_o;
  reg instr_is_compressed_id_o;
  wire instr_is_compressed_out;
  wire instr_new_id_d;
  output instr_new_id_o;
  wire instr_new_id_o;
  reg instr_new_id_q;
  wire [31:0] instr_out;
  output [31:0] instr_rdata_alu_id_o;
  wire [31:0] instr_rdata_alu_id_o;
  output [15:0] instr_rdata_c_id_o;
  reg [15:0] instr_rdata_c_id_o;
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  output [31:0] instr_rdata_id_o;
  reg [31:0] instr_rdata_id_o;
  output instr_req_o;
  wire instr_req_o;
  input instr_rvalid_i;
  wire instr_rvalid_i;
  input instr_valid_clear_i;
  wire instr_valid_clear_i;
  wire instr_valid_id_d;
  output instr_valid_id_o;
  wire instr_valid_id_o;
  reg instr_valid_id_q;
  wire [4:0] irq_vec;
  input [31:0] nt_branch_addr_i;
  wire [31:0] nt_branch_addr_i;
  input nt_branch_mispredict_i;
  wire nt_branch_mispredict_i;
  output [31:0] pc_id_o;
  reg [31:0] pc_id_o;
  output [31:0] pc_if_o;
  wire [31:0] pc_if_o;
  output pc_mismatch_alert_o;
  wire pc_mismatch_alert_o;
  input [2:0] pc_mux_i;
  wire [2:0] pc_mux_i;
  wire [2:0] pc_mux_internal;
  input pc_set_i;
  wire pc_set_i;
  input pmp_err_if_i;
  wire pmp_err_if_i;
  input pmp_err_if_plus2_i;
  wire pmp_err_if_plus2_i;
  wire [31:0] predict_branch_pc;
  wire predict_branch_taken;
  wire [31:0] prefetch_addr;
  wire prefetch_branch;
  wire prefetch_busy;
  input req_i;
  wire req_i;
  input rst_ni;
  wire rst_ni;
  wire stall_dummy_instr;
  wire [7:0] unused_boot_addr;
  wire [7:0] unused_csr_mtvec;
  wire unused_fetch_addr_n0;
  assign csr_mtvec_init_o = _05_ & pc_set_i;
  assign fetch_valid = fetch_valid_raw & _06_;
  assign _00_ = fetch_addr[1] & _07_;
  assign _01_ = _00_ & pmp_err_if_plus2_i;
  assign if_instr_err_plus2 = _12_ & _08_;
  assign _02_ = fetch_valid & _09_;
  assign _03_ = if_id_pipe_reg_we & _10_;
  assign _04_ = instr_valid_id_q & _11_;
  assign if_id_pipe_reg_we = fetch_valid & id_in_ready_i;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) pc_id_o <= fetch_addr;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) illegal_c_insn_id_o <= illegal_c_insn;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) instr_fetch_err_plus2_o <= if_instr_err_plus2;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) instr_fetch_err_o <= if_instr_err;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) instr_rdata_id_o <= instr_decompressed;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) instr_is_compressed_id_o <= instr_is_compressed;
  always @(posedge clk_i)
    if (if_id_pipe_reg_we) instr_rdata_c_id_o <= fetch_rdata[15:0];
  assign _05_ = ! pc_mux_i;
  assign _06_ = ~ nt_branch_mispredict_i;
  assign _07_ = ~ instr_is_compressed;
  assign _08_ = ~ pmp_err_if_i;
  assign _09_ = ~ fetch_err;
  assign _10_ = ~ pc_set_i;
  assign _11_ = ~ instr_valid_clear_i;
  assign prefetch_branch = pc_set_i | nt_branch_mispredict_i;
  assign if_instr_pmp_err = pmp_err_if_i | _01_;
  assign if_instr_err = fetch_err | if_instr_pmp_err;
  assign _12_ = _01_ | fetch_err_plus2;
  assign instr_valid_id_d = _03_ | _04_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_valid_id_q <= 1'h0;
    else instr_valid_id_q <= instr_valid_id_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) instr_new_id_q <= 1'h0;
    else instr_new_id_q <= if_id_pipe_reg_we;
  function [31:0] _51_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _51_ = b[31:0];
      4'b??1?:
        _51_ = b[63:32];
      4'b?1??:
        _51_ = b[95:64];
      4'b1???:
        _51_ = b[127:96];
      default:
        _51_ = a;
    endcase
  endfunction
  assign fetch_addr_n = _51_({ boot_addr_i[31:8], 8'h80 }, { branch_target_ex_i, exc_pc, csr_mepc_i, csr_depc_i }, { _16_, _15_, _14_, _13_ });
  assign _13_ = pc_mux_i == 3'h4;
  assign _14_ = pc_mux_i == 3'h3;
  assign _15_ = pc_mux_i == 3'h2;
  assign _16_ = pc_mux_i == 3'h1;
  function [31:0] _56_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _56_ = b[31:0];
      4'b??1?:
        _56_ = b[63:32];
      4'b?1??:
        _56_ = b[95:64];
      4'b1???:
        _56_ = b[127:96];
      default:
        _56_ = a;
    endcase
  endfunction
  assign exc_pc = _56_(32'hxxxxxxxx, { csr_mtvec_i[31:8], 8'h00, csr_mtvec_i[31:8], 1'h0, irq_vec, 66'h01a1108001a110808 }, { _20_, _19_, _18_, _17_ });
  assign _17_ = exc_pc_mux_i == 2'h3;
  assign _18_ = exc_pc_mux_i == 2'h2;
  assign _19_ = exc_pc_mux_i == 2'h1;
  assign _20_ = ! exc_pc_mux_i;
  assign irq_vec = exc_cause[6] ? 5'h1f : exc_cause[4:0];
  assign prefetch_addr = pc_set_i ? { fetch_addr_n[31:1], 1'h0 } : nt_branch_addr_i;
  \$paramod$91101494017b6f0320aba9e4eea08443360907ca\ibex_compressed_decoder  compressed_decoder_i (
    .clk_i(clk_i),
    .illegal_instr_o(illegal_c_insn),
    .instr_i(fetch_rdata),
    .instr_o(instr_decompressed),
    .is_compressed_o(instr_is_compressed),
    .rst_ni(rst_ni),
    .valid_i(_02_)
  );
  \$paramod\ibex_prefetch_buffer\ResetAll=1'0  \gen_prefetch_buffer.prefetch_buffer_i  (
    .addr_i(prefetch_addr),
    .addr_o(fetch_addr),
    .branch_i(prefetch_branch),
    .busy_o(prefetch_busy),
    .clk_i(clk_i),
    .err_o(fetch_err),
    .err_plus2_o(fetch_err_plus2),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_bus_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .rdata_o(fetch_rdata),
    .ready_i(id_in_ready_i),
    .req_i(req_i),
    .rst_ni(rst_ni),
    .valid_o(fetch_valid_raw)
  );
  assign branch_req = pc_set_i;
  assign dummy_instr_id_o = 1'h0;
  assign fetch_ready = id_in_ready_i;
  assign \gen_no_dummy_instr.unused_dummy_en  = dummy_instr_en_i;
  assign \gen_no_dummy_instr.unused_dummy_mask  = dummy_instr_mask_i;
  assign \gen_no_dummy_instr.unused_dummy_seed  = dummy_instr_seed_i;
  assign \gen_no_dummy_instr.unused_dummy_seed_en  = dummy_instr_seed_en_i;
  assign \gen_prefetch_buffer.unused_data_ram_input  = ic_data_rdata_i;
  assign \gen_prefetch_buffer.unused_icen  = icache_enable_i;
  assign \gen_prefetch_buffer.unused_icinv  = icache_inval_i;
  assign \gen_prefetch_buffer.unused_scr_key_valid  = ic_scr_key_valid_i;
  assign \gen_prefetch_buffer.unused_tag_ram_input  = ic_tag_rdata_i;
  assign ic_data_addr_o = 8'h00;
  assign ic_data_req_o = 2'h0;
  assign ic_data_wdata_o = 64'h0000000000000000;
  assign ic_data_write_o = 1'h0;
  assign ic_scr_key_req_o = 1'h0;
  assign ic_tag_addr_o = 8'h00;
  assign ic_tag_req_o = 2'h0;
  assign ic_tag_wdata_o = 22'h000000;
  assign ic_tag_write_o = 1'h0;
  assign icache_ecc_error_o = 1'h0;
  assign if_busy_o = prefetch_busy;
  assign if_instr_addr = fetch_addr;
  assign if_instr_bus_err = fetch_err;
  assign if_instr_rdata = fetch_rdata;
  assign if_instr_valid = fetch_valid;
  assign illegal_c_instr_out = illegal_c_insn;
  assign instr_bp_taken_o = 1'h0;
  assign instr_err = instr_bus_err_i;
  assign instr_err_out = if_instr_err;
  assign instr_intg_err = 1'h0;
  assign instr_intg_err_o = 1'h0;
  assign instr_is_compressed_out = instr_is_compressed;
  assign instr_new_id_d = if_id_pipe_reg_we;
  assign instr_new_id_o = instr_new_id_q;
  assign instr_out = instr_decompressed;
  assign instr_rdata_alu_id_o = instr_rdata_id_o;
  assign instr_valid_id_o = instr_valid_id_q;
  assign pc_if_o = fetch_addr;
  assign pc_mismatch_alert_o = 1'h0;
  assign pc_mux_internal = pc_mux_i;
  assign predict_branch_pc = 32'd0;
  assign predict_branch_taken = 1'h0;
  assign stall_dummy_instr = 1'h0;
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_mtvec = csr_mtvec_i[7:0];
  assign unused_fetch_addr_n0 = fetch_addr_n[0];
endmodule

module \$paramod$47357959d0dc6728270ee6ad58a004916976ca40\ibex_decoder (clk_i, rst_ni, illegal_insn_o, ebrk_insn_o, mret_insn_o, dret_insn_o, ecall_insn_o, wfi_insn_o, jump_set_o, branch_taken_i, icache_inval_o, instr_first_cycle_i, instr_rdata_i, instr_rdata_alu_i, illegal_c_insn_i, imm_a_mux_sel_o, imm_b_mux_sel_o, bt_a_mux_sel_o, bt_b_mux_sel_o, imm_i_type_o, imm_s_type_o
, imm_b_type_o, imm_u_type_o, imm_j_type_o, zimm_rs1_type_o, rf_wdata_sel_o, rf_we_o, rf_raddr_a_o, rf_raddr_b_o, rf_waddr_o, rf_ren_a_o, rf_ren_b_o, alu_operator_o, alu_op_a_mux_sel_o, alu_op_b_mux_sel_o, alu_multicycle_o, mult_en_o, div_en_o, mult_sel_o, div_sel_o, multdiv_operator_o, multdiv_signed_mode_o
, csr_access_o, csr_op_o, data_req_o, data_we_o, data_type_o, data_sign_extension_o, jump_in_dec_o, branch_in_dec_o);
  wire [6:0] _000_;
  wire [6:0] _001_;
  wire _002_;
  wire [6:0] _003_;
  wire _004_;
  wire [6:0] _005_;
  wire _006_;
  wire [6:0] _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire [1:0] _022_;
  wire [1:0] _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire [2:0] _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire [1:0] _036_;
  wire [1:0] _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire [1:0] _041_;
  wire _042_;
  wire [1:0] _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire [2:0] _049_;
  wire _050_;
  wire _051_;
  wire [1:0] _052_;
  wire [1:0] _053_;
  wire _054_;
  wire _055_;
  wire [6:0] _056_;
  wire _057_;
  wire [2:0] _058_;
  wire [6:0] _059_;
  wire _060_;
  wire [2:0] _061_;
  wire [1:0] _062_;
  wire _063_;
  wire _064_;
  wire [2:0] _065_;
  wire [6:0] _066_;
  wire [2:0] _067_;
  wire [1:0] _068_;
  wire _069_;
  wire [1:0] _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire [9:0] _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire [1:0] _134_;
  wire _135_;
  wire _136_;
  wire [5:0] _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  output alu_multicycle_o;
  wire alu_multicycle_o;
  output [1:0] alu_op_a_mux_sel_o;
  wire [1:0] alu_op_a_mux_sel_o;
  output alu_op_b_mux_sel_o;
  wire alu_op_b_mux_sel_o;
  output [6:0] alu_operator_o;
  wire [6:0] alu_operator_o;
  output branch_in_dec_o;
  wire branch_in_dec_o;
  input branch_taken_i;
  wire branch_taken_i;
  output [1:0] bt_a_mux_sel_o;
  wire [1:0] bt_a_mux_sel_o;
  output [2:0] bt_b_mux_sel_o;
  wire [2:0] bt_b_mux_sel_o;
  input clk_i;
  wire clk_i;
  output csr_access_o;
  wire csr_access_o;
  wire [1:0] csr_op;
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  output data_req_o;
  wire data_req_o;
  output data_sign_extension_o;
  wire data_sign_extension_o;
  output [1:0] data_type_o;
  wire [1:0] data_type_o;
  output data_we_o;
  wire data_we_o;
  output div_en_o;
  wire div_en_o;
  output div_sel_o;
  wire div_sel_o;
  output dret_insn_o;
  wire dret_insn_o;
  output ebrk_insn_o;
  wire ebrk_insn_o;
  output ecall_insn_o;
  wire ecall_insn_o;
  wire \gen_no_rs3_flop.unused_clk ;
  wire \gen_no_rs3_flop.unused_rst_n ;
  output icache_inval_o;
  wire icache_inval_o;
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  wire illegal_insn;
  output illegal_insn_o;
  wire illegal_insn_o;
  wire illegal_reg_rv32e;
  output imm_a_mux_sel_o;
  wire imm_a_mux_sel_o;
  output [2:0] imm_b_mux_sel_o;
  wire [2:0] imm_b_mux_sel_o;
  output [31:0] imm_b_type_o;
  wire [31:0] imm_b_type_o;
  output [31:0] imm_i_type_o;
  wire [31:0] imm_i_type_o;
  output [31:0] imm_j_type_o;
  wire [31:0] imm_j_type_o;
  output [31:0] imm_s_type_o;
  wire [31:0] imm_s_type_o;
  output [31:0] imm_u_type_o;
  wire [31:0] imm_u_type_o;
  wire [31:0] instr;
  wire [31:0] instr_alu;
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  wire [4:0] instr_rd;
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  wire [4:0] instr_rs1;
  wire [4:0] instr_rs2;
  wire [4:0] instr_rs3;
  output jump_in_dec_o;
  wire jump_in_dec_o;
  output jump_set_o;
  wire jump_set_o;
  output mret_insn_o;
  wire mret_insn_o;
  output mult_en_o;
  wire mult_en_o;
  output mult_sel_o;
  wire mult_sel_o;
  output [1:0] multdiv_operator_o;
  wire [1:0] multdiv_operator_o;
  output [1:0] multdiv_signed_mode_o;
  wire [1:0] multdiv_signed_mode_o;
  wire [6:0] opcode;
  wire [6:0] opcode_alu;
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  output rf_ren_a_o;
  wire rf_ren_a_o;
  output rf_ren_b_o;
  wire rf_ren_b_o;
  output [4:0] rf_waddr_o;
  wire [4:0] rf_waddr_o;
  output rf_wdata_sel_o;
  wire rf_wdata_sel_o;
  wire rf_we;
  output rf_we_o;
  wire rf_we_o;
  input rst_ni;
  wire rst_ni;
  wire [9:0] unused_instr_alu;
  wire use_rs3_d;
  wire use_rs3_q;
  output wfi_insn_o;
  wire wfi_insn_o;
  output [31:0] zimm_rs1_type_o;
  wire [31:0] zimm_rs1_type_o;
  reg [0:0] \$auto$proc_rom.cc:150:do_switch$6006  [31:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$6006 [0] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [1] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [2] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [3] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [4] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [5] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [6] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [7] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [8] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [9] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [10] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [11] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [12] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [13] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [14] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [15] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [16] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [17] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [18] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [19] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [20] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [21] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [22] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [23] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [24] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [25] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [26] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [27] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [28] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [29] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [30] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6006 [31] = 1'h1;
  end
  assign _097_ = \$auto$proc_rom.cc:150:do_switch$6006 [instr_rdata_i[24:20]];
  assign _072_ = | { _170_, _172_, _178_, _183_ };
  assign _073_ = | { _181_, _182_ };
  assign _074_ = | { _120_, _104_ };
  assign _075_ = | { _131_, _133_, _140_, _143_, _145_, _146_ };
  assign _077_ = | { _115_, _116_, _117_, _118_, _119_ };
  assign _078_ = | { _141_, _142_ };
  assign _080_ = | { _131_, _133_, _148_, _149_ };
  assign _081_ = | { _139_, _141_, _185_ };
  assign _082_ = | { _157_, _158_, _159_, _160_ };
  assign _083_ = | { _153_, _154_, _155_, _156_ };
  assign _084_ = | { _122_, _123_ };
  assign _085_ = | { _124_, _125_ };
  assign _086_ = | { _127_, _128_, _126_ };
  assign _087_ = | { _153_, _154_, _155_, _156_, _157_, _158_, _159_, _160_, _169_ };
  assign _088_ = | { _151_, _098_ };
  assign _089_ = | { _128_, _123_, _125_ };
  assign _090_ = | { _139_, _141_, _142_ };
  assign _091_ = | { _182_, _184_ };
  assign _092_ = | { _178_, _180_, _181_, _182_, _183_, _184_ };
  assign _093_ = | { _147_, _148_, _149_ };
  assign _094_ = | { _127_, _128_, _129_, _130_, _122_, _123_, _124_, _125_, _126_ };
  assign _095_ = | { _131_, _143_, _145_ };
  assign _076_ = | { _146_, _147_ };
  assign _079_ = | { _140_, _143_ };
  assign _096_ = | { _179_, _180_ };
  assign _099_ = csr_op == 2'h2;
  assign _100_ = csr_op == 2'h3;
  assign _101_ = ! instr_rdata_i[19:15];
  assign _103_ = { instr_rdata_i[26], instr_rdata_i[13:12] } == 3'h5;
  assign _105_ = ! instr_rdata_alu_i[31:27];
  assign _106_ = instr_rdata_alu_i[31:27] == 5'h08;
  assign _107_ = _108_ && _101_;
  assign _108_ = _099_ || _100_;
  assign _109_ = _111_ || _112_;
  assign _110_ = | instr_rdata_i[14:12];
  assign _111_ = | instr_rdata_i[19:15];
  assign _112_ = | instr_rdata_i[11:7];
  assign _113_ = ~ instr_rdata_i[14];
  assign _020_ = _109_ ? 1'h1 : _019_;
  assign _047_ = _115_ ? 1'h1 : 1'h0;
  assign _019_ = _077_ ? 1'h0 : 1'h1;
  assign _115_ = ! instr_rdata_i[31:20];
  assign _055_ = _116_ ? 1'h1 : 1'h0;
  assign _116_ = instr_rdata_i[31:20] == 12'h105;
  assign _045_ = _117_ ? 1'h1 : 1'h0;
  assign _117_ = instr_rdata_i[31:20] == 12'h7b2;
  assign _050_ = _118_ ? 1'h1 : 1'h0;
  assign _118_ = instr_rdata_i[31:20] == 12'h302;
  assign _046_ = _119_ ? 1'h1 : 1'h0;
  assign _119_ = instr_rdata_i[31:20] == 12'h001;
  assign _018_ = _104_ ? _020_ : _042_;
  assign _040_ = _104_ ? _055_ : 1'h0;
  assign _027_ = _104_ ? _047_ : 1'h0;
  assign _025_ = _104_ ? _045_ : 1'h0;
  assign _034_ = _104_ ? _050_ : 1'h0;
  assign _026_ = _104_ ? _046_ : 1'h0;
  assign _022_ = _104_ ? 2'h0 : _043_;
  assign _038_ = _104_ ? 1'h0 : _054_;
  assign _021_ = _104_ ? 1'h0 : 1'h1;
  assign _033_ = instr_first_cycle_i ? 1'h1 : 1'h0;
  assign _017_ = _074_ ? 1'h0 : 1'h1;
  assign _032_ = _120_ ? 1'h1 : 1'h0;
  assign _028_ = _120_ ? _033_ : 1'h0;
  assign _016_ = _094_ ? 1'h0 : 1'h1;
  assign _129_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h008;
  assign _130_[0] = ! { instr_rdata_i[31:25], instr_rdata_i[14:12] };
  assign _130_[1] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h100;
  assign _130_[2] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h002;
  assign _130_[3] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h003;
  assign _130_[4] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h004;
  assign _130_[5] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h006;
  assign _130_[6] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h007;
  assign _130_[7] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h001;
  assign _130_[8] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h005;
  assign _130_[9] = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h105;
  function [1:0] _264_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _264_ = b[1:0];
      2'b1?:
        _264_ = b[3:2];
      default:
        _264_ = a;
    endcase
  endfunction
  assign _053_ = _264_(2'h0, 4'h7, { _127_, _089_ });
  function [1:0] _265_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _265_ = b[1:0];
      3'b?1?:
        _265_ = b[3:2];
      3'b1??:
        _265_ = b[5:4];
      default:
        _265_ = a;
    endcase
  endfunction
  assign _052_ = _265_(2'h0, 6'h1b, { _086_, _085_, _084_ });
  assign _122_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h00f;
  assign _123_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h00e;
  assign _124_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h00d;
  assign _125_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h00c;
  assign _126_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h00b;
  assign _127_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h00a;
  assign _128_ = { instr_rdata_i[31:25], instr_rdata_i[14:12] } == 10'h009;
  assign _008_ = _103_ ? 1'h1 : _016_;
  assign _037_ = _103_ ? 2'h0 : _053_;
  assign _036_ = _103_ ? 2'h0 : _052_;
  assign _006_ = _135_ ? _186_ : 1'h1;
  assign _135_ = | _134_;
  assign _134_[1] = instr_rdata_i[31:27] == 5'h08;
  assign _004_ = instr_rdata_i[26] ? 1'h1 : _006_;
  assign _002_ = _102_ ? _097_ : 1'h1;
  assign _102_ = ! instr_rdata_i[26:25];
  function [0:0] _282_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _282_ = b[0:0];
      2'b1?:
        _282_ = b[1:1];
      default:
        _282_ = a;
    endcase
  endfunction
  assign _071_ = _282_(1'h1, { _186_, _002_ }, { _134_[0], _136_ });
  assign _136_ = instr_rdata_i[31:27] == 5'h0c;
  assign _134_[0] = ! instr_rdata_i[31:27];
  function [0:0] _285_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _285_ = b[0:0];
      3'b?1?:
        _285_ = b[1:1];
      3'b1??:
        _285_ = b[2:2];
      default:
        _285_ = a;
    endcase
  endfunction
  assign _069_ = _285_(1'hx, { 1'h0, _071_, _004_ }, { _138_, _120_, _132_ });
  assign _138_ = | { _137_[5:1], _104_ };
  assign _137_[1] = instr_rdata_i[14:12] == 3'h2;
  assign _137_[2] = instr_rdata_i[14:12] == 3'h3;
  function [1:0] _289_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _289_ = b[1:0];
      2'b1?:
        _289_ = b[3:2];
      default:
        _289_ = a;
    endcase
  endfunction
  assign _023_ = _289_(2'h0, 4'h9, { _142_, _141_ });
  function [0:0] _290_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _290_ = b[0:0];
      2'b1?:
        _290_ = b[1:1];
      default:
        _290_ = a;
    endcase
  endfunction
  assign _064_ = _290_(1'h1, { 1'h0, _057_ }, { _078_, _139_ });
  assign _060_ = _090_ ? _057_ : 1'h1;
  assign _139_ = instr_rdata_i[13:12] == 2'h2;
  assign _141_ = instr_rdata_i[13:12] == 2'h1;
  assign _142_ = ! instr_rdata_i[13:12];
  assign _057_ = instr_rdata_i[14] ? 1'h1 : 1'h0;
  assign _048_ = _144_ ? 1'h0 : 1'h1;
  assign _144_ = | { _132_, _137_[5:3], _120_, _104_ };
  assign _104_ = ! instr_rdata_i[14:12];
  assign _120_ = instr_rdata_i[14:12] == 3'h1;
  assign _137_[3] = instr_rdata_i[14:12] == 3'h4;
  assign _132_ = instr_rdata_i[14:12] == 3'h5;
  assign _137_[4] = instr_rdata_i[14:12] == 3'h6;
  assign _137_[5] = instr_rdata_i[14:12] == 3'h7;
  assign _029_ = _110_ ? 1'h1 : 1'h0;
  assign _039_ = instr_first_cycle_i ? 1'h0 : 1'h1;
  function [0:0] _306_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _306_ = b[0:0];
      3'b?1?:
        _306_ = b[1:1];
      3'b1??:
        _306_ = b[2:2];
      default:
        _306_ = a;
    endcase
  endfunction
  assign _015_ = _306_(1'h0, { _039_, 1'h1, _021_ }, { _076_, _080_, _114_ });
  function [0:0] _307_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _307_ = b[0:0];
      2'b1?:
        _307_ = b[1:1];
      default:
        _307_ = a;
    endcase
  endfunction
  assign _014_ = _307_(1'h0, { _033_, _028_ }, { _076_, _121_ });
  function [0:0] _308_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _308_ = b[0:0];
      2'b1?:
        _308_ = b[1:1];
      default:
        _308_ = a;
    endcase
  endfunction
  assign _013_ = _308_(1'h0, { 1'h1, _032_ }, { _076_, _121_ });
  assign csr_op = _114_ ? _022_ : 2'h0;
  function [0:0] _310_;
    input [0:0] a;
    input [8:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _310_ = b[0:0];
      9'b???????1?:
        _310_ = b[1:1];
      9'b??????1??:
        _310_ = b[2:2];
      9'b?????1???:
        _310_ = b[3:3];
      9'b????1????:
        _310_ = b[4:4];
      9'b???1?????:
        _310_ = b[5:5];
      9'b??1??????:
        _310_ = b[6:6];
      9'b?1???????:
        _310_ = b[7:7];
      9'b1????????:
        _310_ = b[8:8];
      default:
        _310_ = a;
    endcase
  endfunction
  assign _012_ = _310_(1'h1, { _029_, _048_, _060_, _064_, 1'h0, _069_, _008_, _017_, _018_ }, { _146_, _145_, _143_, _140_, _093_, _133_, _131_, _121_, _114_ });
  assign _121_ = instr_rdata_i[6:0] == 7'h0f;
  assign _148_ = instr_rdata_i[6:0] == 7'h17;
  assign _149_ = instr_rdata_i[6:0] == 7'h37;
  assign _146_ = instr_rdata_i[6:0] == 7'h67;
  assign _147_ = instr_rdata_i[6:0] == 7'h6f;
  assign _009_ = _145_ ? 1'h1 : 1'h0;
  assign data_sign_extension_o = _140_ ? _113_ : 1'h0;
  assign data_type_o = _079_ ? _023_ : 2'h0;
  assign _011_ = _143_ ? 1'h1 : 1'h0;
  assign _010_ = _079_ ? 1'h1 : 1'h0;
  assign multdiv_signed_mode_o = _131_ ? _037_ : 2'h0;
  assign multdiv_operator_o = _131_ ? _036_ : 2'h0;
  assign rf_wdata_sel_o = _114_ ? _021_ : 1'h0;
  assign wfi_insn_o = _114_ ? _040_ : 1'h0;
  assign ecall_insn_o = _114_ ? _027_ : 1'h0;
  assign dret_insn_o = _114_ ? _025_ : 1'h0;
  assign mret_insn_o = _114_ ? _034_ : 1'h0;
  assign ebrk_insn_o = _114_ ? _026_ : 1'h0;
  assign rf_ren_b_o = _095_ ? 1'h1 : 1'h0;
  assign _145_ = instr_rdata_i[6:0] == 7'h63;
  function [0:0] _331_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _331_ = b[0:0];
      2'b1?:
        _331_ = b[1:1];
      default:
        _331_ = a;
    endcase
  endfunction
  assign rf_ren_a_o = _331_(1'h0, { 1'h1, _038_ }, { _075_, _114_ });
  assign _114_ = instr_rdata_i[6:0] == 7'h73;
  assign _131_ = instr_rdata_i[6:0] == 7'h33;
  assign _133_ = instr_rdata_i[6:0] == 7'h13;
  assign _140_ = instr_rdata_i[6:0] == 7'h03;
  assign _143_ = instr_rdata_i[6:0] == 7'h23;
  assign icache_inval_o = _121_ ? _028_ : 1'h0;
  assign csr_op_o = _107_ ? 2'h0 : csr_op;
  assign _070_ = instr_rdata_alu_i[14] ? 2'h3 : 2'h0;
  assign _068_ = _098_ ? 2'h0 : _070_;
  assign _030_ = _098_ ? 1'h1 : 1'h0;
  function [1:0] _342_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _342_ = b[1:0];
      2'b1?:
        _342_ = b[3:2];
      default:
        _342_ = a;
    endcase
  endfunction
  assign _062_ = _342_(2'h3, 4'h2, { _098_, _151_ });
  assign _007_ = _088_ ? 7'h00 : 7'h2c;
  assign _067_ = _151_ ? 3'h5 : 3'h0;
  function [6:0] _345_;
    input [6:0] a;
    input [62:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _345_ = b[6:0];
      9'b???????1?:
        _345_ = b[13:7];
      9'b??????1??:
        _345_ = b[20:14];
      9'b?????1???:
        _345_ = b[27:21];
      9'b????1????:
        _345_ = b[34:28];
      9'b???1?????:
        _345_ = b[41:35];
      9'b??1??????:
        _345_ = b[48:42];
      9'b?1???????:
        _345_ = b[55:49];
      9'b1????????:
        _345_ = b[62:56];
      default:
        _345_ = a;
    endcase
  endfunction
  assign _005_ = _345_(7'h2c, 63'h0156081841424400, { _168_, _167_, _166_, _165_, _164_, _163_, _162_, _161_, _087_ });
  assign _161_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h105;
  assign _162_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h005;
  assign _163_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h001;
  assign _164_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h007;
  assign _165_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h006;
  assign _166_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h004;
  assign _167_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h002;
  assign _168_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h100;
  assign _169_ = ! { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] };
  assign _044_ = _083_ ? 1'h1 : 1'h0;
  assign _153_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h00f;
  assign _154_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h00e;
  assign _155_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h00d;
  assign _156_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h00c;
  assign _051_ = _082_ ? 1'h1 : 1'h0;
  assign _157_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h00b;
  assign _158_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h00a;
  assign _159_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h009;
  assign _160_ = { instr_rdata_alu_i[31:25], instr_rdata_alu_i[14:12] } == 10'h008;
  assign _024_ = instr_rdata_alu_i[26] ? 1'h0 : _044_;
  assign _035_ = instr_rdata_alu_i[26] ? 1'h0 : _051_;
  assign _003_ = instr_rdata_alu_i[26] ? 7'h2c : _005_;
  assign _001_ = _106_ ? 7'h08 : 7'h2c;
  assign _000_ = _105_ ? 7'h09 : _001_;
  function [6:0] _370_;
    input [6:0] a;
    input [55:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _370_ = b[6:0];
      8'b??????1?:
        _370_ = b[13:7];
      8'b?????1??:
        _370_ = b[20:14];
      8'b????1???:
        _370_ = b[27:21];
      8'b???1????:
        _370_ = b[34:28];
      8'b??1?????:
        _370_ = b[41:35];
      8'b?1??????:
        _370_ = b[48:42];
      8'b1???????:
        _370_ = b[55:49];
      default:
        _370_ = a;
    endcase
  endfunction
  assign _066_ = _370_(7'hxx, { 49'h0015ac040c20a, _000_ }, { _098_, _177_, _176_, _175_, _174_, _173_, _151_, _171_ });
  assign _176_ = instr_rdata_alu_i[14:12] == 3'h3;
  assign _177_ = instr_rdata_alu_i[14:12] == 3'h2;
  assign _063_ = instr_rdata_alu_i[14] ? 1'h0 : 1'h1;
  assign _065_ = instr_rdata_alu_i[14] ? 3'h0 : 3'h1;
  assign _059_ = instr_first_cycle_i ? _056_ : 7'h00;
  assign _058_ = instr_first_cycle_i ? 3'h0 : _061_;
  function [6:0] _377_;
    input [6:0] a;
    input [41:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _377_ = b[6:0];
      6'b????1?:
        _377_ = b[13:7];
      6'b???1??:
        _377_ = b[20:14];
      6'b??1???:
        _377_ = b[27:21];
      6'b?1????:
        _377_ = b[34:28];
      6'b1?????:
        _377_ = b[41:35];
      default:
        _377_ = a;
    endcase
  endfunction
  assign _056_ = _377_(7'h2c, 42'h0e9e326cd1c, { _098_, _151_, _175_, _171_, _174_, _173_ });
  assign _173_ = instr_rdata_alu_i[14:12] == 3'h7;
  assign _174_ = instr_rdata_alu_i[14:12] == 3'h6;
  assign _171_ = instr_rdata_alu_i[14:12] == 3'h5;
  assign _175_ = instr_rdata_alu_i[14:12] == 3'h4;
  assign _151_ = instr_rdata_alu_i[14:12] == 3'h1;
  assign _098_ = ! instr_rdata_alu_i[14:12];
  assign _049_ = instr_first_cycle_i ? 3'h0 : 3'h5;
  assign _041_ = instr_first_cycle_i ? 2'h0 : 2'h2;
  assign _031_ = instr_first_cycle_i ? 3'h4 : 3'h5;
  function [0:0] _387_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _387_ = b[0:0];
      3'b?1?:
        _387_ = b[1:1];
      3'b1??:
        _387_ = b[2:2];
      default:
        _387_ = a;
    endcase
  endfunction
  assign alu_op_b_mux_sel_o = _387_(1'h1, { _039_, _063_, 1'h0 }, { _179_, _178_, _170_ });
  function [1:0] _388_;
    input [1:0] a;
    input [9:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _388_ = b[1:0];
      5'b???1?:
        _388_ = b[3:2];
      5'b??1??:
        _388_ = b[5:4];
      5'b?1???:
        _388_ = b[7:6];
      5'b1????:
        _388_ = b[9:8];
      default:
        _388_ = a;
    endcase
  endfunction
  assign alu_op_a_mux_sel_o = _388_(2'h3, { _041_, 4'h8, _062_, _068_ }, { _096_, _073_, _072_, _152_, _150_ });
  function [6:0] _389_;
    input [6:0] a;
    input [34:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _389_ = b[6:0];
      5'b???1?:
        _389_ = b[13:7];
      5'b??1??:
        _389_ = b[20:14];
      5'b?1???:
        _389_ = b[27:21];
      5'b1????:
        _389_ = b[34:28];
      default:
        _389_ = a;
    endcase
  endfunction
  assign alu_operator_o = _389_(7'h2c, { _059_, 7'h00, _066_, _003_, _007_ }, { _179_, _092_, _172_, _170_, _152_ });
  assign _172_ = instr_rdata_alu_i[6:0] == 7'h13;
  assign _183_ = instr_rdata_alu_i[6:0] == 7'h03;
  function [2:0] _392_;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _392_ = b[2:0];
      6'b????1?:
        _392_ = b[5:3];
      6'b???1??:
        _392_ = b[8:6];
      6'b??1???:
        _392_ = b[11:9];
      6'b?1????:
        _392_ = b[14:12];
      6'b1?????:
        _392_ = b[17:15];
      default:
        _392_ = a;
    endcase
  endfunction
  assign imm_b_mux_sel_o = _392_(3'h0, { _031_, _049_, _058_, _065_, 3'h3, _067_ }, { _181_, _180_, _179_, _178_, _091_, _152_ });
  assign _152_ = instr_rdata_alu_i[6:0] == 7'h0f;
  assign _182_ = instr_rdata_alu_i[6:0] == 7'h17;
  assign _184_ = instr_rdata_alu_i[6:0] == 7'h37;
  assign _178_ = instr_rdata_alu_i[6:0] == 7'h23;
  assign _179_ = instr_rdata_alu_i[6:0] == 7'h63;
  assign _180_ = instr_rdata_alu_i[6:0] == 7'h67;
  assign _181_ = instr_rdata_alu_i[6:0] == 7'h6f;
  assign div_sel_o = _170_ ? _024_ : 1'h0;
  assign mult_sel_o = _170_ ? _035_ : 1'h0;
  assign _170_ = instr_rdata_alu_i[6:0] == 7'h33;
  assign imm_a_mux_sel_o = _150_ ? _030_ : 1'h1;
  assign _150_ = instr_rdata_alu_i[6:0] == 7'h73;
  assign csr_access_o = illegal_insn ? 1'h0 : rf_wdata_sel_o;
  assign branch_in_dec_o = illegal_insn ? 1'h0 : _009_;
  assign jump_set_o = illegal_insn ? 1'h0 : _014_;
  assign jump_in_dec_o = illegal_insn ? 1'h0 : _013_;
  assign data_we_o = illegal_insn ? 1'h0 : _011_;
  assign data_req_o = illegal_insn ? 1'h0 : _010_;
  assign rf_we_o = illegal_insn ? 1'h0 : _015_;
  assign illegal_insn = illegal_c_insn_i ? 1'h1 : _012_;
  function [1:0] _413_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _413_ = b[1:0];
      3'b?1?:
        _413_ = b[3:2];
      3'b1??:
        _413_ = b[5:4];
      default:
        _413_ = a;
    endcase
  endfunction
  assign _043_ = _413_(2'h0, 6'h1b, { _141_, _139_, _185_ });
  assign _042_ = _081_ ? 1'h0 : 1'h1;
  assign _185_ = instr_rdata_i[13:12] == 2'h3;
  assign _054_ = instr_rdata_i[14] ? 1'h0 : 1'h1;
  assign mult_en_o = illegal_insn ? 1'h0 : mult_sel_o;
  assign div_en_o = illegal_insn ? 1'h0 : div_sel_o;
  assign _186_ = _102_ ? 1'h0 : 1'h1;
  assign _061_ = branch_taken_i ? 3'h2 : 3'h5;
  assign _137_[0] = _104_;
  assign alu_multicycle_o = 1'h0;
  assign bt_a_mux_sel_o = 2'h2;
  assign bt_b_mux_sel_o = 3'h0;
  assign \gen_no_rs3_flop.unused_clk  = clk_i;
  assign \gen_no_rs3_flop.unused_rst_n  = rst_ni;
  assign illegal_insn_o = illegal_insn;
  assign illegal_reg_rv32e = 1'h0;
  assign imm_b_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[7], instr_rdata_i[30:25], instr_rdata_i[11:8], 1'h0 };
  assign imm_i_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:20] };
  assign imm_j_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[19:12], instr_rdata_i[20], instr_rdata_i[30:21], 1'h0 };
  assign imm_s_type_o = { instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31], instr_rdata_i[31:25], instr_rdata_i[11:7] };
  assign imm_u_type_o = { instr_rdata_i[31:12], 12'h000 };
  assign instr = instr_rdata_i;
  assign instr_alu = instr_rdata_alu_i;
  assign instr_rd = instr_rdata_i[11:7];
  assign instr_rs1 = instr_rdata_i[19:15];
  assign instr_rs2 = instr_rdata_i[24:20];
  assign instr_rs3 = instr_rdata_i[31:27];
  assign opcode = instr_rdata_i[6:0];
  assign opcode_alu = instr_rdata_alu_i[6:0];
  assign rf_raddr_a_o = instr_rdata_i[19:15];
  assign rf_raddr_b_o = instr_rdata_i[24:20];
  assign rf_waddr_o = instr_rdata_i[11:7];
  assign rf_we = rf_we_o;
  assign unused_instr_alu = { instr_rdata_alu_i[19:15], instr_rdata_alu_i[11:7] };
  assign use_rs3_d = 1'h0;
  assign use_rs3_q = 1'h0;
  assign zimm_rs1_type_o = { 27'h0000000, instr_rdata_i[19:15] };
endmodule

module \$paramod$4a237c9b6d1f84d9ddca8fe2aafcfcb32d0a6882\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [2:0] rd_data_o;
  wire [2:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [2:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [2:0] wr_data_i;
  wire [2:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 3'h4;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$4a6e6da8bfee0acbe2a656982ede1618a80bf18f\ibex_multdiv_fast (clk_i, rst_ni, mult_en_i, div_en_i, mult_sel_i, div_sel_i, operator_i, signed_mode_i, op_a_i, op_b_i, alu_adder_ext_i, alu_adder_i, equal_to_zero_i, data_ind_timing_i, alu_operand_a_o, alu_operand_b_o, imd_val_q_i, imd_val_d_o, imd_val_we_o, multdiv_ready_id_i, multdiv_result_o
, valid_o);
  wire [33:0] _000_;
  wire [1:0] _001_;
  wire [33:0] _002_;
  wire [2:0] _003_;
  wire _004_;
  wire _005_;
  wire [33:0] _006_;
  wire [33:0] _007_;
  wire [33:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [34:0] _028_;
  wire _029_;
  wire _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire _035_;
  wire _036_;
  wire [32:0] _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire [4:0] _050_;
  wire [31:0] _051_;
  wire [31:0] _052_;
  wire [2:0] _053_;
  wire [33:0] _054_;
  wire [33:0] _055_;
  wire _056_;
  wire _057_;
  wire [33:0] accum;
  input [33:0] alu_adder_ext_i;
  wire [33:0] alu_adder_ext_i;
  input [31:0] alu_adder_i;
  wire [31:0] alu_adder_i;
  output [32:0] alu_operand_a_o;
  wire [32:0] alu_operand_a_o;
  output [32:0] alu_operand_b_o;
  wire [32:0] alu_operand_b_o;
  input clk_i;
  wire clk_i;
  input data_ind_timing_i;
  wire data_ind_timing_i;
  reg div_by_zero_q;
  wire div_change_sign;
  wire [4:0] div_counter_d;
  reg [4:0] div_counter_q;
  input div_en_i;
  wire div_en_i;
  wire div_en_internal;
  wire div_hold;
  input div_sel_i;
  wire div_sel_i;
  wire div_sign_a;
  wire div_sign_b;
  wire div_valid;
  input equal_to_zero_i;
  wire equal_to_zero_i;
  wire [15:0] \gen_mult_fast.mult_op_a ;
  wire [15:0] \gen_mult_fast.mult_op_b ;
  wire [1:0] \gen_mult_fast.mult_state_d ;
  reg [1:0] \gen_mult_fast.mult_state_q ;
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  wire is_greater_equal;
  wire [33:0] mac_res;
  wire [33:0] mac_res_d;
  wire [34:0] mac_res_ext;
  wire [34:0] mac_res_signed;
  wire [2:0] md_state_d;
  reg [2:0] md_state_q;
  input mult_en_i;
  wire mult_en_i;
  wire mult_en_internal;
  wire mult_hold;
  input mult_sel_i;
  wire mult_sel_i;
  wire mult_valid;
  wire multdiv_en;
  input multdiv_ready_id_i;
  wire multdiv_ready_id_i;
  output [31:0] multdiv_result_o;
  wire [31:0] multdiv_result_o;
  wire [32:0] next_quotient;
  wire [31:0] next_remainder;
  wire [31:0] one_shift;
  input [31:0] op_a_i;
  wire [31:0] op_a_i;
  input [31:0] op_b_i;
  wire [31:0] op_b_i;
  wire [31:0] op_denominator_d;
  wire [31:0] op_denominator_q;
  reg [31:0] op_numerator_q;
  wire [31:0] op_quotient_d;
  reg [31:0] op_quotient_q;
  wire [33:0] op_remainder_d;
  input [1:0] operator_i;
  wire [1:0] operator_i;
  wire rem_change_sign;
  wire [31:0] res_adder_h;
  input rst_ni;
  wire rst_ni;
  wire sign_a;
  wire sign_b;
  input [1:0] signed_mode_i;
  wire [1:0] signed_mode_i;
  wire signed_mult;
  wire [1:0] unused_alu_adder_ext;
  wire [1:0] unused_imd_val;
  wire unused_mac_res_ext;
  wire unused_mult_sel_i;
  output valid_o;
  wire valid_o;
  assign mac_res_ext = $signed(_028_) + $signed({ accum[33], accum });
  assign div_sign_a = signed_mode_i[0] & op_a_i[31];
  assign div_sign_b = signed_mode_i[1] & op_b_i[31];
  assign _009_ = signed_mult & imd_val_q_i[33];
  assign div_change_sign = _057_ & _030_;
  assign mult_en_internal = mult_en_i & _035_;
  assign div_en_internal = div_en_i & _036_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_mult_fast.mult_state_q  <= 2'h0;
    else if (mult_en_internal) \gen_mult_fast.mult_state_q  <= \gen_mult_fast.mult_state_d ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) md_state_q <= 3'h0;
    else if (div_en_internal) md_state_q <= md_state_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) div_counter_q <= 5'h00;
    else if (div_en_internal) div_counter_q <= div_counter_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) div_by_zero_q <= 1'h0;
    else if (_011_) div_by_zero_q <= equal_to_zero_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) op_quotient_q <= 32'd0;
    else if (_012_) op_quotient_q <= op_quotient_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) op_numerator_q <= 32'd0;
    else if (_013_) op_numerator_q <= _051_;
  assign _010_ = | { _046_, _047_ };
  assign _011_ = & { _044_, _024_, div_en_internal };
  assign _012_ = & { _010_, div_en_internal };
  assign _013_ = & { _046_, div_en_internal };
  assign _017_ = | { _044_, _045_, _046_ };
  assign _018_ = | { _038_, _041_ };
  assign _014_ = | { _038_, _040_ };
  assign _015_ = | { _039_, _041_ };
  assign _016_ = | { _043_, _047_ };
  assign _019_ = | { _038_, _039_ };
  assign _020_ = | { _040_, _041_ };
  assign _021_ = | { _039_, _040_ };
  assign _022_ = ! operator_i;
  assign _023_ = ~ alu_adder_ext_i[32];
  assign _025_ = div_counter_q == 5'h01;
  assign _024_ = operator_i == 2'h2;
  assign _026_ = _027_ && equal_to_zero_i;
  assign _027_ = ! data_ind_timing_i;
  assign _028_ = $signed({ sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, sign_a, \gen_mult_fast.mult_op_a  }) * $signed({ sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, sign_b, \gen_mult_fast.mult_op_b  });
  assign signed_mult = | signed_mode_i;
  assign _029_ = ~ multdiv_ready_id_i;
  assign _030_ = ~ div_by_zero_q;
  assign _032_ = ~ op_a_i;
  assign _031_ = ~ op_b_i;
  assign _033_ = ~ imd_val_q_i[65:34];
  assign _034_ = ~ imd_val_q_i[31:0];
  assign _035_ = ~ mult_hold;
  assign _036_ = ~ div_hold;
  assign multdiv_en = mult_en_internal | div_en_internal;
  assign _037_ = { 1'h0, op_quotient_q } | { 1'h0, one_shift };
  assign valid_o = mult_valid | div_valid;
  function [15:0] _102_;
    input [15:0] a;
    input [47:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _102_ = b[15:0];
      3'b?1?:
        _102_ = b[31:16];
      3'b1??:
        _102_ = b[47:32];
      default:
        _102_ = a;
    endcase
  endfunction
  assign accum[33:18] = _102_(16'hxxxx, { 16'h0000, _000_[33:18], _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_, _009_ }, { _020_, _039_, _038_ });
  function [17:0] _103_;
    input [17:0] a;
    input [71:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _103_ = b[17:0];
      4'b??1?:
        _103_ = b[35:18];
      4'b?1??:
        _103_ = b[53:36];
      4'b1???:
        _103_ = b[71:54];
      default:
        _103_ = a;
    endcase
  endfunction
  assign accum[17:0] = _103_(18'hxxxxx, { 20'h00000, imd_val_q_i[31:16], _000_[17:0], imd_val_q_i[33:16] }, { _041_, _040_, _039_, _038_ });
  assign _001_ = _022_ ? 2'h0 : 2'h3;
  assign _005_ = _022_ ? 1'h1 : 1'h0;
  assign _000_ = _022_ ? { 18'h00000, imd_val_q_i[31:16] } : imd_val_q_i[33:0];
  assign _002_ = _022_ ? { 2'h0, mac_res_ext[15:0], imd_val_q_i[15:0] } : mac_res_ext[33:0];
  function [1:0] _108_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _108_ = b[1:0];
      4'b??1?:
        _108_ = b[3:2];
      4'b?1??:
        _108_ = b[5:4];
      4'b1???:
        _108_ = b[7:6];
      default:
        _108_ = a;
    endcase
  endfunction
  assign \gen_mult_fast.mult_state_d  = _108_(2'hx, { 4'h6, _001_, 2'h0 }, { _041_, _040_, _039_, _038_ });
  function [33:0] _109_;
    input [33:0] a;
    input [67:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _109_ = b[33:0];
      2'b1?:
        _109_ = b[67:34];
      default:
        _109_ = a;
    endcase
  endfunction
  assign mac_res_d = _109_(34'hxxxxxxxxx, { _002_, mac_res_ext[33:0] }, { _021_, _018_ });
  assign _004_ = _022_ ? _029_ : 1'h0;
  function [0:0] _111_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _111_ = b[0:0];
      2'b1?:
        _111_ = b[1:1];
      default:
        _111_ = a;
    endcase
  endfunction
  assign sign_b = _111_(1'hx, { 1'h0, div_sign_b }, { _015_, _014_ });
  function [0:0] _112_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _112_ = b[0:0];
      2'b1?:
        _112_ = b[1:1];
      default:
        _112_ = a;
    endcase
  endfunction
  assign sign_a = _112_(1'hx, { 1'h0, div_sign_a }, { _020_, _019_ });
  function [15:0] _113_;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _113_ = b[15:0];
      2'b1?:
        _113_ = b[31:16];
      default:
        _113_ = a;
    endcase
  endfunction
  assign \gen_mult_fast.mult_op_b  = _113_(16'hxxxx, { op_b_i[15:0], op_b_i[31:16] }, { _015_, _014_ });
  function [15:0] _114_;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _114_ = b[15:0];
      2'b1?:
        _114_ = b[31:16];
      default:
        _114_ = a;
    endcase
  endfunction
  assign \gen_mult_fast.mult_op_a  = _114_(16'hxxxx, { op_a_i[15:0], op_a_i[31:16] }, { _020_, _019_ });
  function [0:0] _115_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _115_ = b[0:0];
      3'b?1?:
        _115_ = b[1:1];
      3'b1??:
        _115_ = b[2:2];
      default:
        _115_ = a;
    endcase
  endfunction
  assign mult_hold = _115_(1'hx, { 1'h0, _004_, _029_ }, { _020_, _039_, _038_ });
  function [0:0] _116_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _116_ = b[0:0];
      3'b?1?:
        _116_ = b[1:1];
      3'b1??:
        _116_ = b[2:2];
      default:
        _116_ = a;
    endcase
  endfunction
  assign mult_valid = _116_(1'hx, { 1'h0, _005_, 1'h1 }, { _020_, _039_, _038_ });
  assign _038_ = \gen_mult_fast.mult_state_q  == 2'h3;
  assign _039_ = \gen_mult_fast.mult_state_q  == 2'h2;
  assign _040_ = \gen_mult_fast.mult_state_q  == 2'h1;
  assign _041_ = ! \gen_mult_fast.mult_state_q ;
  assign _008_ = _024_ ? _054_ : _055_;
  assign _007_ = _024_ ? { 1'h0, next_quotient } : { 2'h0, next_remainder };
  assign _006_ = _024_ ? 34'h3ffffffff : { 2'h0, op_a_i };
  assign div_counter_d = _017_ ? 5'h1f : _050_;
  function [32:0] _125_;
    input [32:0] a;
    input [98:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _125_ = b[32:0];
      3'b?1?:
        _125_ = b[65:33];
      3'b1??:
        _125_ = b[98:66];
      default:
        _125_ = a;
    endcase
  endfunction
  assign alu_operand_b_o = _125_({ _031_, 1'h1 }, { _032_, 1'h1, _033_, 1'h1, _034_, 1'h1 }, { _046_, _016_, _042_ });
  assign alu_operand_a_o = _016_ ? { imd_val_q_i[31:0], 1'h1 } : 33'h000000001;
  function [2:0] _127_;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _127_ = b[2:0];
      6'b????1?:
        _127_ = b[5:3];
      6'b???1??:
        _127_ = b[8:6];
      6'b??1???:
        _127_ = b[11:9];
      6'b?1????:
        _127_ = b[14:12];
      6'b1?????:
        _127_ = b[17:15];
      default:
        _127_ = a;
    endcase
  endfunction
  assign md_state_d = _127_(3'h0, { _003_, 6'h13, _053_, 6'h2e }, { _044_, _046_, _045_, _047_, _043_, _042_ });
  function [33:0] _128_;
    input [33:0] a;
    input [169:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _128_ = b[33:0];
      5'b???1?:
        _128_ = b[67:34];
      5'b??1??:
        _128_ = b[101:68];
      5'b?1???:
        _128_ = b[135:102];
      5'b1????:
        _128_ = b[169:136];
      default:
        _128_ = a;
    endcase
  endfunction
  assign op_remainder_d = _128_(imd_val_q_i[33:0], { _006_, 33'h000000000, op_numerator_q[31], 1'h0, next_remainder, _049_, _007_, _008_ }, { _044_, _045_, _047_, _043_, _042_ });
  assign _042_ = md_state_q == 3'h5;
  assign _043_ = md_state_q == 3'h4;
  assign _044_ = ! md_state_q;
  assign div_hold = _048_ ? _029_ : 1'h0;
  assign div_valid = _048_ ? 1'h1 : 1'h0;
  assign _048_ = md_state_q == 3'h6;
  function [31:0] _135_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _135_ = b[31:0];
      2'b1?:
        _135_ = b[63:32];
      default:
        _135_ = a;
    endcase
  endfunction
  assign op_quotient_d = _135_(32'hxxxxxxxx, { 32'h00000000, next_quotient[31:0] }, { _046_, _047_ });
  assign _047_ = md_state_q == 3'h3;
  assign _046_ = md_state_q == 3'h1;
  assign op_denominator_d = _045_ ? _052_ : imd_val_q_i[65:34];
  assign _045_ = md_state_q == 3'h2;
  assign is_greater_equal = _056_ ? imd_val_q_i[31] : _023_;
  wire [31:0] _156_ = op_numerator_q;
  assign _049_ = _156_[_050_ +: 1];
  assign one_shift = 32'd1 << div_counter_q;
  assign _050_ = div_counter_q - 5'h01;
  assign imd_val_d_o[33:0] = div_sel_i ? op_remainder_d : mac_res_d;
  assign multdiv_result_o = div_sel_i ? imd_val_q_i[31:0] : mac_res_d[31:0];
  assign next_remainder = is_greater_equal ? alu_adder_ext_i[32:1] : imd_val_q_i[31:0];
  assign next_quotient = is_greater_equal ? _037_ : { 1'h0, op_quotient_q };
  assign _003_ = _026_ ? 3'h6 : 3'h1;
  assign _051_ = div_sign_a ? alu_adder_i : op_a_i;
  assign _052_ = div_sign_b ? alu_adder_i : op_b_i;
  assign _053_ = _025_ ? 3'h4 : 3'h3;
  assign _054_ = div_change_sign ? { 2'h0, alu_adder_i } : imd_val_q_i[33:0];
  assign _055_ = div_sign_a ? { 2'h0, alu_adder_i } : imd_val_q_i[33:0];
  assign _056_ = imd_val_q_i[31] ^ imd_val_q_i[65];
  assign _057_ = div_sign_a ^ div_sign_b;
  assign imd_val_d_o[67:34] = { 2'h0, op_denominator_d };
  assign imd_val_we_o = { div_en_internal, multdiv_en };
  assign mac_res = mac_res_ext[33:0];
  assign mac_res_signed = mac_res_ext;
  assign op_denominator_q = imd_val_q_i[65:34];
  assign rem_change_sign = div_sign_a;
  assign res_adder_h = alu_adder_ext_i[32:1];
  assign unused_alu_adder_ext = { alu_adder_ext_i[33], alu_adder_ext_i[0] };
  assign unused_imd_val = imd_val_q_i[67:66];
  assign unused_mac_res_ext = mac_res_ext[34];
  assign unused_mult_sel_i = mult_sel_i;
endmodule

module \$paramod$559b9fcb9d6ddcdae0bcb24d3976e1d2712a8b54\ibex_id_stage (clk_i, rst_ni, ctrl_busy_o, illegal_insn_o, instr_valid_i, instr_rdata_i, instr_rdata_alu_i, instr_rdata_c_i, instr_is_compressed_i, instr_bp_taken_i, instr_req_o, instr_first_cycle_id_o, instr_valid_clear_o, id_in_ready_o, instr_exec_i, icache_inval_o, branch_decision_i, pc_set_o, pc_mux_o, nt_branch_mispredict_o, nt_branch_addr_o
, exc_pc_mux_o, illegal_c_insn_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, ex_valid_i, lsu_resp_valid_i, alu_operator_ex_o, alu_operand_a_ex_o, alu_operand_b_ex_o, imd_val_we_ex_i, imd_val_d_ex_i, imd_val_q_ex_o, bt_a_operand_o, bt_b_operand_o, mult_en_ex_o, div_en_ex_o, mult_sel_ex_o, div_sel_ex_o, multdiv_operator_ex_o, multdiv_signed_mode_ex_o
, multdiv_operand_a_ex_o, multdiv_operand_b_ex_o, multdiv_ready_id_o, csr_access_o, csr_op_o, csr_op_en_o, csr_save_if_o, csr_save_id_o, csr_save_wb_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, csr_mstatus_tw_i, illegal_csr_insn_i, data_ind_timing_i, lsu_req_o, lsu_we_o, lsu_type_o, lsu_sign_ext_o
, lsu_wdata_o, lsu_req_done_i, lsu_addr_incr_req_i, lsu_addr_last_i, csr_mstatus_mie_i, irq_pending_i, irq_nm_i, nmi_mode_o, lsu_load_err_i, lsu_load_resp_intg_err_i, lsu_store_err_i, lsu_store_resp_intg_err_i, debug_mode_o, debug_mode_entering_o, debug_cause_o, debug_csr_save_o, debug_req_i, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i
, result_ex_i, csr_rdata_i, rf_raddr_a_o, rf_rdata_a_i, rf_raddr_b_o, rf_rdata_b_i, rf_ren_a_o, rf_ren_b_o, rf_waddr_id_o, rf_wdata_id_o, rf_we_id_o, rf_rd_a_wb_match_o, rf_rd_b_wb_match_o, rf_waddr_wb_i, rf_wdata_fwd_wb_i, rf_write_wb_i, en_wb_o, instr_type_wb_o, instr_perf_count_id_o, ready_wb_i, outstanding_load_wb_i
, outstanding_store_wb_i, perf_jump_o, perf_branch_o, perf_tbranch_o, perf_dside_wait_o, perf_mul_wait_o, perf_div_wait_o, instr_id_done_o, exc_cause_o, irqs_i);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire [31:0] _119_;
  wire _120_;
  wire alu_multicycle_dec;
  wire [1:0] alu_op_a_mux_sel;
  wire [1:0] alu_op_a_mux_sel_dec;
  wire alu_op_b_mux_sel;
  wire alu_op_b_mux_sel_dec;
  wire [31:0] alu_operand_a;
  output [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_a_ex_o;
  wire [31:0] alu_operand_b;
  output [31:0] alu_operand_b_ex_o;
  wire [31:0] alu_operand_b_ex_o;
  wire [6:0] alu_operator;
  output [6:0] alu_operator_ex_o;
  wire [6:0] alu_operator_ex_o;
  input branch_decision_i;
  wire branch_decision_i;
  wire branch_in_dec;
  wire branch_jump_set_done_d;
  reg branch_jump_set_done_q;
  wire branch_not_set;
  wire branch_set;
  wire branch_set_raw;
  wire branch_set_raw_d;
  wire branch_taken;
  wire [1:0] bt_a_mux_sel;
  output [31:0] bt_a_operand_o;
  wire [31:0] bt_a_operand_o;
  wire [2:0] bt_b_mux_sel;
  output [31:0] bt_b_operand_o;
  wire [31:0] bt_b_operand_o;
  input clk_i;
  wire clk_i;
  wire controller_run;
  output csr_access_o;
  wire csr_access_o;
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  input csr_mstatus_tw_i;
  wire csr_mstatus_tw_i;
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  output csr_op_en_o;
  wire csr_op_en_o;
  output [1:0] csr_op_o;
  wire [1:0] csr_op_o;
  wire csr_pipe_flush;
  input [31:0] csr_rdata_i;
  wire [31:0] csr_rdata_i;
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  output csr_save_cause_o;
  wire csr_save_cause_o;
  output csr_save_id_o;
  wire csr_save_id_o;
  output csr_save_if_o;
  wire csr_save_if_o;
  output csr_save_wb_o;
  wire csr_save_wb_o;
  output ctrl_busy_o;
  wire ctrl_busy_o;
  input data_ind_timing_i;
  wire data_ind_timing_i;
  wire data_req_allowed;
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  output debug_csr_save_o;
  wire debug_csr_save_o;
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  output debug_mode_entering_o;
  wire debug_mode_entering_o;
  output debug_mode_o;
  wire debug_mode_o;
  input debug_req_i;
  wire debug_req_i;
  input debug_single_step_i;
  wire debug_single_step_i;
  wire div_en_dec;
  output div_en_ex_o;
  wire div_en_ex_o;
  wire div_en_id;
  output div_sel_ex_o;
  wire div_sel_ex_o;
  wire dret_insn_dec;
  wire ebrk_insn;
  wire ecall_insn_dec;
  output en_wb_o;
  wire en_wb_o;
  input ex_valid_i;
  wire ex_valid_i;
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  wire flush_id;
  reg \g_branch_set_flop.branch_set_raw_q ;
  wire [1:0] \g_nobtalu.unused_a_mux_sel ;
  wire [2:0] \g_nobtalu.unused_b_mux_sel ;
  wire \gen_no_stall_mem.unused_data_req_done_ex ;
  wire \gen_no_stall_mem.unused_id_exception ;
  wire \gen_no_stall_mem.unused_outstanding_load_wb ;
  wire \gen_no_stall_mem.unused_outstanding_store_wb ;
  wire [4:0] \gen_no_stall_mem.unused_rf_waddr_wb ;
  wire [31:0] \gen_no_stall_mem.unused_rf_wdata_fwd_wb ;
  wire \gen_no_stall_mem.unused_rf_write_wb ;
  wire \gen_no_stall_mem.unused_wb_exception ;
  output icache_inval_o;
  wire icache_inval_o;
  wire id_exception;
  wire id_fsm_d;
  reg id_fsm_q;
  output id_in_ready_o;
  wire id_in_ready_o;
  input illegal_c_insn_i;
  wire illegal_c_insn_i;
  input illegal_csr_insn_i;
  wire illegal_csr_insn_i;
  wire illegal_dret_insn;
  wire illegal_insn_dec;
  output illegal_insn_o;
  wire illegal_insn_o;
  wire illegal_umode_insn;
  input [67:0] imd_val_d_ex_i;
  wire [67:0] imd_val_d_ex_i;
  reg [67:0] imd_val_q;
  output [67:0] imd_val_q_ex_o;
  wire [67:0] imd_val_q_ex_o;
  input [1:0] imd_val_we_ex_i;
  wire [1:0] imd_val_we_ex_i;
  wire [31:0] imm_a;
  wire imm_a_mux_sel;
  wire [31:0] imm_b;
  wire [2:0] imm_b_mux_sel;
  wire [2:0] imm_b_mux_sel_dec;
  wire [31:0] imm_b_type;
  wire [31:0] imm_i_type;
  wire [31:0] imm_j_type;
  wire [31:0] imm_s_type;
  wire [31:0] imm_u_type;
  input instr_bp_taken_i;
  wire instr_bp_taken_i;
  wire instr_done;
  input instr_exec_i;
  wire instr_exec_i;
  wire instr_executing;
  wire instr_executing_spec;
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  wire instr_first_cycle;
  output instr_first_cycle_id_o;
  wire instr_first_cycle_id_o;
  output instr_id_done_o;
  wire instr_id_done_o;
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  output instr_perf_count_id_o;
  wire instr_perf_count_id_o;
  input [31:0] instr_rdata_alu_i;
  wire [31:0] instr_rdata_alu_i;
  input [15:0] instr_rdata_c_i;
  wire [15:0] instr_rdata_c_i;
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  output instr_req_o;
  wire instr_req_o;
  output [1:0] instr_type_wb_o;
  wire [1:0] instr_type_wb_o;
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  input instr_valid_i;
  wire instr_valid_i;
  input irq_nm_i;
  wire irq_nm_i;
  input irq_pending_i;
  wire irq_pending_i;
  input [17:0] irqs_i;
  wire [17:0] irqs_i;
  wire jump_in_dec;
  wire jump_set;
  wire jump_set_dec;
  wire jump_set_raw;
  input lsu_addr_incr_req_i;
  wire lsu_addr_incr_req_i;
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  input lsu_load_err_i;
  wire lsu_load_err_i;
  input lsu_load_resp_intg_err_i;
  wire lsu_load_resp_intg_err_i;
  wire lsu_req;
  wire lsu_req_dec;
  input lsu_req_done_i;
  wire lsu_req_done_i;
  output lsu_req_o;
  wire lsu_req_o;
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  wire lsu_sign_ext;
  output lsu_sign_ext_o;
  wire lsu_sign_ext_o;
  input lsu_store_err_i;
  wire lsu_store_err_i;
  input lsu_store_resp_intg_err_i;
  wire lsu_store_resp_intg_err_i;
  wire [1:0] lsu_type;
  output [1:0] lsu_type_o;
  wire [1:0] lsu_type_o;
  output [31:0] lsu_wdata_o;
  wire [31:0] lsu_wdata_o;
  wire lsu_we;
  output lsu_we_o;
  wire lsu_we_o;
  wire mem_resp_intg_err;
  wire mret_insn_dec;
  wire mult_en_dec;
  output mult_en_ex_o;
  wire mult_en_ex_o;
  wire mult_en_id;
  output mult_sel_ex_o;
  wire mult_sel_ex_o;
  wire multdiv_en_dec;
  output [31:0] multdiv_operand_a_ex_o;
  wire [31:0] multdiv_operand_a_ex_o;
  output [31:0] multdiv_operand_b_ex_o;
  wire [31:0] multdiv_operand_b_ex_o;
  wire [1:0] multdiv_operator;
  output [1:0] multdiv_operator_ex_o;
  wire [1:0] multdiv_operator_ex_o;
  output multdiv_ready_id_o;
  wire multdiv_ready_id_o;
  wire [1:0] multdiv_signed_mode;
  output [1:0] multdiv_signed_mode_ex_o;
  wire [1:0] multdiv_signed_mode_ex_o;
  wire multicycle_done;
  output nmi_mode_o;
  wire nmi_mode_o;
  output [31:0] nt_branch_addr_o;
  wire [31:0] nt_branch_addr_o;
  output nt_branch_mispredict_o;
  wire nt_branch_mispredict_o;
  input outstanding_load_wb_i;
  wire outstanding_load_wb_i;
  input outstanding_store_wb_i;
  wire outstanding_store_wb_i;
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  output pc_set_o;
  wire pc_set_o;
  output perf_branch_o;
  wire perf_branch_o;
  output perf_div_wait_o;
  wire perf_div_wait_o;
  output perf_dside_wait_o;
  wire perf_dside_wait_o;
  output perf_jump_o;
  wire perf_jump_o;
  output perf_mul_wait_o;
  wire perf_mul_wait_o;
  output perf_tbranch_o;
  wire perf_tbranch_o;
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  input ready_wb_i;
  wire ready_wb_i;
  input [31:0] result_ex_i;
  wire [31:0] result_ex_i;
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  output rf_rd_a_wb_match_o;
  wire rf_rd_a_wb_match_o;
  output rf_rd_b_wb_match_o;
  wire rf_rd_b_wb_match_o;
  wire [31:0] rf_rdata_a_fwd;
  input [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_a_i;
  wire [31:0] rf_rdata_b_fwd;
  input [31:0] rf_rdata_b_i;
  wire [31:0] rf_rdata_b_i;
  wire rf_ren_a;
  wire rf_ren_a_dec;
  output rf_ren_a_o;
  wire rf_ren_a_o;
  wire rf_ren_b;
  wire rf_ren_b_dec;
  output rf_ren_b_o;
  wire rf_ren_b_o;
  output [4:0] rf_waddr_id_o;
  wire [4:0] rf_waddr_id_o;
  input [4:0] rf_waddr_wb_i;
  wire [4:0] rf_waddr_wb_i;
  input [31:0] rf_wdata_fwd_wb_i;
  wire [31:0] rf_wdata_fwd_wb_i;
  output [31:0] rf_wdata_id_o;
  wire [31:0] rf_wdata_id_o;
  wire rf_wdata_sel;
  wire rf_we_dec;
  output rf_we_id_o;
  wire rf_we_id_o;
  wire rf_we_raw;
  input rf_write_wb_i;
  wire rf_write_wb_i;
  input rst_ni;
  wire rst_ni;
  wire stall_alu;
  wire stall_branch;
  wire stall_id;
  wire stall_jump;
  wire stall_ld_hz;
  wire stall_mem;
  wire stall_multdiv;
  wire stall_wb;
  input trigger_match_i;
  wire trigger_match_i;
  wire wb_exception;
  wire wfi_insn_dec;
  wire [31:0] zimm_rs1_type;
  assign _026_ = lsu_req_dec & _075_;
  assign stall_mem = instr_valid_i & _026_;
  assign _027_ = instr_valid_i & _064_;
  assign instr_executing = _027_ & controller_run;
  assign _028_ = instr_executing & lsu_req_dec;
  assign perf_dside_wait_o = _028_ & _063_;
  assign _029_ = _065_ & _066_;
  assign _030_ = _029_ & _067_;
  assign _031_ = _030_ & _068_;
  assign instr_perf_count_id_o = _031_ & _064_;
  assign perf_mul_wait_o = stall_multdiv & mult_en_dec;
  assign perf_div_wait_o = stall_multdiv & div_en_dec;
  assign rf_ren_a_o = _032_ & rf_ren_a_dec;
  assign _032_ = _027_ & _069_;
  assign rf_ren_b_o = _032_ & rf_ren_b_dec;
  assign _033_ = rf_we_raw & instr_executing;
  assign rf_we_id_o = _033_ & _068_;
  assign illegal_dret_insn = dret_insn_dec & _070_;
  assign illegal_umode_insn = _062_ & _076_;
  assign _034_ = csr_mstatus_tw_i & wfi_insn_dec;
  assign illegal_insn_o = instr_valid_i & _079_;
  assign _035_ = data_req_allowed & lsu_req_dec;
  assign _036_ = csr_access_o & instr_executing;
  assign csr_op_en_o = _036_ & instr_id_done_o;
  assign branch_jump_set_done_d = _081_ & _071_;
  assign jump_set = jump_set_raw & _072_;
  assign branch_set = \g_branch_set_flop.branch_set_raw_q  & _072_;
  assign _037_ = rf_we_dec & ex_valid_i;
  assign _038_ = multicycle_done & ready_wb_i;
  assign _039_ = _073_ & _074_;
  assign instr_id_done_o = _039_ & instr_executing;
  assign data_req_allowed = instr_valid_i & _050_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q[33:0] <= 34'h000000000;
    else if (imd_val_we_ex_i[0]) imd_val_q[33:0] <= imd_val_d_ex_i[33:0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) imd_val_q[67:34] <= 34'h000000000;
    else if (imd_val_we_ex_i[1]) imd_val_q[67:34] <= imd_val_d_ex_i[67:34];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) id_fsm_q <= 1'h0;
    else if (instr_executing) id_fsm_q <= id_fsm_d;
  assign _040_ = csr_op_o == 2'h1;
  assign _041_ = csr_op_o == 2'h2;
  assign _042_ = instr_rdata_i[31:20] == 12'h300;
  assign _043_ = instr_rdata_i[31:20] == 12'h304;
  assign _044_ = instr_rdata_i[31:20] == 12'h747;
  assign _045_ = instr_rdata_i[31:25] == 7'h1d;
  assign _046_ = instr_rdata_i[31:20] == 12'h7b0;
  assign _047_ = instr_rdata_i[31:20] == 12'h7b1;
  assign _048_ = instr_rdata_i[31:20] == 12'h7b2;
  assign _049_ = instr_rdata_i[31:20] == 12'h7b3;
  assign _051_ = csr_op_en_o && _053_;
  assign _052_ = csr_op_en_o && _061_;
  assign _053_ = _040_ || _041_;
  assign _054_ = _042_ || _043_;
  assign _055_ = _054_ || _044_;
  assign _056_ = _055_ || _045_;
  assign _057_ = _046_ || _047_;
  assign _058_ = _057_ || _048_;
  assign _059_ = _058_ || _049_;
  assign _060_ = data_ind_timing_i || branch_decision_i;
  assign _061_ = | csr_op_o;
  assign _062_ = priv_mode_i != 2'h3;
  assign _064_ = ~ instr_fetch_err_i;
  assign _063_ = ~ lsu_resp_valid_i;
  assign _065_ = ~ ebrk_insn;
  assign _066_ = ~ ecall_insn_dec;
  assign _067_ = ~ illegal_insn_dec;
  assign _068_ = ~ illegal_csr_insn_i;
  assign _069_ = ~ illegal_insn_o;
  assign _070_ = ~ debug_mode_o;
  assign _071_ = ~ instr_valid_clear_o;
  assign _072_ = ~ branch_jump_set_done_q;
  assign _073_ = ~ stall_id;
  assign _074_ = ~ flush_id;
  assign _075_ = _063_ | data_req_allowed;
  assign _076_ = mret_insn_dec | _034_;
  assign _077_ = illegal_insn_dec | illegal_csr_insn_i;
  assign _078_ = _077_ | illegal_dret_insn;
  assign _079_ = _078_ | illegal_umode_insn;
  assign mem_resp_intg_err = lsu_load_resp_intg_err_i | lsu_store_resp_intg_err_i;
  assign multdiv_en_dec = mult_en_dec | div_en_dec;
  assign _080_ = \g_branch_set_flop.branch_set_raw_q  | jump_set_raw;
  assign _081_ = _080_ | branch_jump_set_done_q;
  assign _082_ = branch_decision_i | data_ind_timing_i;
  assign _083_ = stall_mem | stall_multdiv;
  assign _084_ = _083_ | stall_jump;
  assign _085_ = _084_ | stall_branch;
  assign stall_id = _085_ | stall_alu;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_branch_set_flop.branch_set_raw_q  <= 1'h0;
    else \g_branch_set_flop.branch_set_raw_q  <= branch_set_raw_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_jump_set_done_q <= 1'h0;
    else branch_jump_set_done_q <= branch_jump_set_done_d;
  function [31:0] _206_;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _206_ = b[31:0];
      6'b????1?:
        _206_ = b[63:32];
      6'b???1??:
        _206_ = b[95:64];
      6'b??1???:
        _206_ = b[127:96];
      6'b?1????:
        _206_ = b[159:128];
      6'b1?????:
        _206_ = b[191:160];
      default:
        _206_ = a;
    endcase
  endfunction
  assign imm_b = _206_(32'd4, { imm_i_type, imm_s_type, imm_b_type, imm_u_type, imm_j_type, _119_ }, { _091_, _090_, _089_, _088_, _087_, _086_ });
  assign _086_ = imm_b_mux_sel == 3'h5;
  assign _087_ = imm_b_mux_sel == 3'h4;
  assign _088_ = imm_b_mux_sel == 3'h3;
  assign _089_ = imm_b_mux_sel == 3'h2;
  assign _090_ = imm_b_mux_sel == 3'h1;
  assign _091_ = ! imm_b_mux_sel;
  assign _025_ = _038_ ? 1'h0 : 1'h1;
  assign _021_ = _038_ ? 1'h0 : jump_in_dec;
  assign _020_ = _038_ ? 1'h0 : branch_in_dec;
  assign _024_ = _038_ ? 1'h0 : multdiv_en_dec;
  assign _023_ = multdiv_en_dec ? _037_ : rf_we_dec;
  assign _019_ = ex_valid_i ? rf_we_dec : 1'h0;
  assign _022_ = ex_valid_i ? 1'h0 : 1'h1;
  assign _092_ = alu_multicycle_dec ? 1'h1 : 1'h0;
  assign _093_ = jump_in_dec ? 1'h1 : _092_;
  assign _094_ = branch_in_dec ? _120_ : _093_;
  assign _095_ = multdiv_en_dec ? _022_ : _094_;
  assign _011_ = lsu_req_dec ? 1'h1 : _095_;
  assign _096_ = jump_in_dec ? 1'h0 : _092_;
  assign _097_ = branch_in_dec ? 1'h0 : _096_;
  assign _098_ = multdiv_en_dec ? 1'h0 : _097_;
  assign _015_ = lsu_req_dec ? 1'h0 : _098_;
  assign _099_ = alu_multicycle_dec ? 1'h0 : rf_we_dec;
  assign _100_ = jump_in_dec ? rf_we_dec : _099_;
  assign _101_ = branch_in_dec ? rf_we_dec : _100_;
  assign _102_ = multdiv_en_dec ? _019_ : _101_;
  assign _014_ = lsu_req_dec ? rf_we_dec : _102_;
  assign _103_ = jump_in_dec ? 1'h1 : 1'h0;
  assign _104_ = branch_in_dec ? 1'h0 : _103_;
  assign _105_ = multdiv_en_dec ? 1'h0 : _104_;
  assign _016_ = lsu_req_dec ? 1'h0 : _105_;
  assign _107_ = multdiv_en_dec ? 1'h0 : _106_;
  assign _108_ = multdiv_en_dec ? _022_ : 1'h0;
  assign _017_ = lsu_req_dec ? 1'h0 : _108_;
  assign _109_ = jump_in_dec ? jump_set_dec : 1'h0;
  assign _110_ = branch_in_dec ? 1'h0 : _109_;
  assign _111_ = multdiv_en_dec ? 1'h0 : _110_;
  assign _012_ = lsu_req_dec ? 1'h0 : _111_;
  assign _106_ = branch_in_dec ? _082_ : 1'h0;
  assign _009_ = lsu_req_dec ? 1'h0 : _107_;
  assign _112_ = branch_in_dec ? 1'h1 : 1'h0;
  assign _113_ = multdiv_en_dec ? 1'h0 : _112_;
  assign _013_ = lsu_req_dec ? 1'h0 : _113_;
  function [0:0] _250_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _250_ = b[0:0];
      2'b1?:
        _250_ = b[1:1];
      default:
        _250_ = a;
    endcase
  endfunction
  assign id_fsm_d = _250_(1'hx, { _011_, _025_ }, { _050_, id_fsm_q });
  function [0:0] _251_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _251_ = b[0:0];
      2'b1?:
        _251_ = b[1:1];
      default:
        _251_ = a;
    endcase
  endfunction
  assign _005_ = _251_(1'hx, { _015_, 1'h0 }, { _050_, id_fsm_q });
  function [0:0] _252_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _252_ = b[0:0];
      2'b1?:
        _252_ = b[1:1];
      default:
        _252_ = a;
    endcase
  endfunction
  assign _004_ = _252_(1'hx, { _014_, _023_ }, { _050_, id_fsm_q });
  assign _050_ = ~ id_fsm_q;
  function [0:0] _254_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _254_ = b[0:0];
      2'b1?:
        _254_ = b[1:1];
      default:
        _254_ = a;
    endcase
  endfunction
  assign _007_ = _254_(1'hx, { _016_, _021_ }, { _050_, id_fsm_q });
  function [0:0] _255_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _255_ = b[0:0];
      2'b1?:
        _255_ = b[1:1];
      default:
        _255_ = a;
    endcase
  endfunction
  assign _006_ = _255_(1'hx, { _009_, _020_ }, { _050_, id_fsm_q });
  function [0:0] _256_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _256_ = b[0:0];
      2'b1?:
        _256_ = b[1:1];
      default:
        _256_ = a;
    endcase
  endfunction
  assign _008_ = _256_(1'hx, { _017_, _024_ }, { _050_, id_fsm_q });
  function [0:0] _257_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _257_ = b[0:0];
      2'b1?:
        _257_ = b[1:1];
      default:
        _257_ = a;
    endcase
  endfunction
  assign _002_ = _257_(1'hx, { _012_, 1'h0 }, { _050_, id_fsm_q });
  function [0:0] _258_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _258_ = b[0:0];
      2'b1?:
        _258_ = b[1:1];
      default:
        _258_ = a;
    endcase
  endfunction
  assign _000_ = _258_(1'hx, { _009_, 1'h0 }, { _050_, id_fsm_q });
  function [0:0] _259_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _259_ = b[0:0];
      2'b1?:
        _259_ = b[1:1];
      default:
        _259_ = a;
    endcase
  endfunction
  assign _003_ = _259_(1'hx, { _013_, 1'h0 }, { _050_, id_fsm_q });
  assign stall_alu = instr_executing ? _005_ : 1'h0;
  assign rf_we_raw = instr_executing ? _004_ : rf_we_dec;
  assign stall_jump = instr_executing ? _007_ : 1'h0;
  assign stall_branch = instr_executing ? _006_ : 1'h0;
  assign stall_multdiv = instr_executing ? _008_ : 1'h0;
  assign jump_set_raw = instr_executing ? _002_ : 1'h0;
  assign branch_set_raw_d = instr_executing ? _000_ : 1'h0;
  assign perf_branch_o = instr_executing ? _003_ : 1'h0;
  assign _018_ = _059_ ? 1'h1 : 1'h0;
  assign _010_ = _052_ ? _018_ : 1'h0;
  assign _001_ = _056_ ? 1'h1 : 1'h0;
  assign csr_pipe_flush = _051_ ? _001_ : _010_;
  function [31:0] _272_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _272_ = b[31:0];
      2'b1?:
        _272_ = b[63:32];
      default:
        _272_ = a;
    endcase
  endfunction
  assign rf_wdata_id_o = _272_(32'hxxxxxxxx, { result_ex_i, csr_rdata_i }, { _114_, rf_wdata_sel });
  assign _114_ = ~ rf_wdata_sel;
  function [31:0] _274_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _274_ = b[31:0];
      4'b??1?:
        _274_ = b[63:32];
      4'b?1??:
        _274_ = b[95:64];
      4'b1???:
        _274_ = b[127:96];
      default:
        _274_ = a;
    endcase
  endfunction
  assign alu_operand_a_ex_o = _274_(32'hxxxxxxxx, { rf_rdata_a_i, lsu_addr_last_i, pc_id_i, imm_a }, { _118_, _117_, _116_, _115_ });
  assign _115_ = alu_op_a_mux_sel == 2'h3;
  assign _116_ = alu_op_a_mux_sel == 2'h2;
  assign _117_ = alu_op_a_mux_sel == 2'h1;
  assign _118_ = ! alu_op_a_mux_sel;
  assign multicycle_done = lsu_req_dec ? lsu_resp_valid_i : ex_valid_i;
  assign alu_op_a_mux_sel = lsu_addr_incr_req_i ? 2'h1 : alu_op_a_mux_sel_dec;
  assign alu_op_b_mux_sel = lsu_addr_incr_req_i ? 1'h1 : alu_op_b_mux_sel_dec;
  assign imm_b_mux_sel = lsu_addr_incr_req_i ? 3'h6 : imm_b_mux_sel_dec;
  assign imm_a = imm_a_mux_sel ? 32'd0 : zimm_rs1_type;
  assign _119_ = instr_is_compressed_i ? 32'd2 : 32'd4;
  assign alu_operand_b_ex_o = alu_op_b_mux_sel ? imm_b : rf_rdata_b_i;
  assign lsu_req_o = instr_executing ? _035_ : 1'h0;
  assign mult_en_ex_o = instr_executing ? mult_en_dec : 1'h0;
  assign div_en_ex_o = instr_executing ? div_en_dec : 1'h0;
  assign _120_ = _060_ ? 1'h1 : 1'h0;
  \$paramod$f81836c4f2c4509350656370cfb9555047cdf611\ibex_controller  controller_i (
    .branch_not_set_i(1'h0),
    .branch_set_i(branch_set),
    .clk_i(clk_i),
    .controller_run_o(controller_run),
    .csr_mstatus_mie_i(csr_mstatus_mie_i),
    .csr_mtval_o(csr_mtval_o),
    .csr_pipe_flush_i(csr_pipe_flush),
    .csr_restore_dret_id_o(csr_restore_dret_id_o),
    .csr_restore_mret_id_o(csr_restore_mret_id_o),
    .csr_save_cause_o(csr_save_cause_o),
    .csr_save_id_o(csr_save_id_o),
    .csr_save_if_o(csr_save_if_o),
    .csr_save_wb_o(csr_save_wb_o),
    .ctrl_busy_o(ctrl_busy_o),
    .debug_cause_o(debug_cause_o),
    .debug_csr_save_o(debug_csr_save_o),
    .debug_ebreakm_i(debug_ebreakm_i),
    .debug_ebreaku_i(debug_ebreaku_i),
    .debug_mode_entering_o(debug_mode_entering_o),
    .debug_mode_o(debug_mode_o),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step_i),
    .dret_insn_i(dret_insn_dec),
    .ebrk_insn_i(ebrk_insn),
    .ecall_insn_i(ecall_insn_dec),
    .exc_cause_o(exc_cause_o),
    .exc_pc_mux_o(exc_pc_mux_o),
    .flush_id_o(flush_id),
    .id_exception_o(id_exception),
    .id_in_ready_o(id_in_ready_o),
    .illegal_insn_i(illegal_insn_o),
    .instr_bp_taken_i(instr_bp_taken_i),
    .instr_compressed_i(instr_rdata_c_i),
    .instr_exec_i(instr_exec_i),
    .instr_fetch_err_i(instr_fetch_err_i),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2_i),
    .instr_i(instr_rdata_i),
    .instr_is_compressed_i(instr_is_compressed_i),
    .instr_req_o(instr_req_o),
    .instr_valid_clear_o(instr_valid_clear_o),
    .instr_valid_i(instr_valid_i),
    .irq_nm_ext_i(irq_nm_i),
    .irq_pending_i(irq_pending_i),
    .irqs_i(irqs_i),
    .jump_set_i(jump_set),
    .load_err_i(lsu_load_err_i),
    .lsu_addr_last_i(lsu_addr_last_i),
    .mem_resp_intg_err_i(mem_resp_intg_err),
    .mret_insn_i(mret_insn_dec),
    .nmi_mode_o(nmi_mode_o),
    .nt_branch_mispredict_o(nt_branch_mispredict_o),
    .pc_id_i(pc_id_i),
    .pc_mux_o(pc_mux_o),
    .pc_set_o(pc_set_o),
    .perf_jump_o(perf_jump_o),
    .perf_tbranch_o(perf_tbranch_o),
    .priv_mode_i(priv_mode_i),
    .ready_wb_i(ready_wb_i),
    .rst_ni(rst_ni),
    .stall_id_i(stall_id),
    .stall_wb_i(1'h0),
    .store_err_i(lsu_store_err_i),
    .trigger_match_i(trigger_match_i),
    .wb_exception_o(wb_exception),
    .wfi_insn_i(wfi_insn_dec)
  );
  \$paramod$47357959d0dc6728270ee6ad58a004916976ca40\ibex_decoder  decoder_i (
    .alu_multicycle_o(alu_multicycle_dec),
    .alu_op_a_mux_sel_o(alu_op_a_mux_sel_dec),
    .alu_op_b_mux_sel_o(alu_op_b_mux_sel_dec),
    .alu_operator_o(alu_operator),
    .branch_in_dec_o(branch_in_dec),
    .branch_taken_i(1'h1),
    .bt_a_mux_sel_o(bt_a_mux_sel),
    .bt_b_mux_sel_o(bt_b_mux_sel),
    .clk_i(clk_i),
    .csr_access_o(csr_access_o),
    .csr_op_o(csr_op_o),
    .data_req_o(lsu_req_dec),
    .data_sign_extension_o(lsu_sign_ext),
    .data_type_o(lsu_type),
    .data_we_o(lsu_we),
    .div_en_o(div_en_dec),
    .div_sel_o(div_sel_ex_o),
    .dret_insn_o(dret_insn_dec),
    .ebrk_insn_o(ebrk_insn),
    .ecall_insn_o(ecall_insn_dec),
    .icache_inval_o(icache_inval_o),
    .illegal_c_insn_i(illegal_c_insn_i),
    .illegal_insn_o(illegal_insn_dec),
    .imm_a_mux_sel_o(imm_a_mux_sel),
    .imm_b_mux_sel_o(imm_b_mux_sel_dec),
    .imm_b_type_o(imm_b_type),
    .imm_i_type_o(imm_i_type),
    .imm_j_type_o(imm_j_type),
    .imm_s_type_o(imm_s_type),
    .imm_u_type_o(imm_u_type),
    .instr_first_cycle_i(data_req_allowed),
    .instr_rdata_alu_i(instr_rdata_alu_i),
    .instr_rdata_i(instr_rdata_i),
    .jump_in_dec_o(jump_in_dec),
    .jump_set_o(jump_set_dec),
    .mret_insn_o(mret_insn_dec),
    .mult_en_o(mult_en_dec),
    .mult_sel_o(mult_sel_ex_o),
    .multdiv_operator_o(multdiv_operator),
    .multdiv_signed_mode_o(multdiv_signed_mode),
    .rf_raddr_a_o(rf_raddr_a_o),
    .rf_raddr_b_o(rf_raddr_b_o),
    .rf_ren_a_o(rf_ren_a_dec),
    .rf_ren_b_o(rf_ren_b_dec),
    .rf_waddr_o(rf_waddr_id_o),
    .rf_wdata_sel_o(rf_wdata_sel),
    .rf_we_o(rf_we_dec),
    .rst_ni(rst_ni),
    .wfi_insn_o(wfi_insn_dec),
    .zimm_rs1_type_o(zimm_rs1_type)
  );
  assign alu_operand_a = alu_operand_a_ex_o;
  assign alu_operand_b = alu_operand_b_ex_o;
  assign alu_operator_ex_o = alu_operator;
  assign branch_not_set = 1'h0;
  assign branch_set_raw = \g_branch_set_flop.branch_set_raw_q ;
  assign branch_taken = 1'h1;
  assign bt_a_operand_o = 32'd0;
  assign bt_b_operand_o = 32'd0;
  assign div_en_id = div_en_ex_o;
  assign en_wb_o = instr_id_done_o;
  assign \g_nobtalu.unused_a_mux_sel  = bt_a_mux_sel;
  assign \g_nobtalu.unused_b_mux_sel  = bt_b_mux_sel;
  assign \gen_no_stall_mem.unused_data_req_done_ex  = lsu_req_done_i;
  assign \gen_no_stall_mem.unused_id_exception  = id_exception;
  assign \gen_no_stall_mem.unused_outstanding_load_wb  = outstanding_load_wb_i;
  assign \gen_no_stall_mem.unused_outstanding_store_wb  = outstanding_store_wb_i;
  assign \gen_no_stall_mem.unused_rf_waddr_wb  = rf_waddr_wb_i;
  assign \gen_no_stall_mem.unused_rf_wdata_fwd_wb  = rf_wdata_fwd_wb_i;
  assign \gen_no_stall_mem.unused_rf_write_wb  = rf_write_wb_i;
  assign \gen_no_stall_mem.unused_wb_exception  = wb_exception;
  assign imd_val_q_ex_o = imd_val_q;
  assign instr_done = instr_id_done_o;
  assign instr_executing_spec = instr_executing;
  assign instr_first_cycle = data_req_allowed;
  assign instr_first_cycle_id_o = data_req_allowed;
  assign instr_type_wb_o = 2'h2;
  assign lsu_req = lsu_req_o;
  assign lsu_sign_ext_o = lsu_sign_ext;
  assign lsu_type_o = lsu_type;
  assign lsu_wdata_o = rf_rdata_b_i;
  assign lsu_we_o = lsu_we;
  assign mult_en_id = mult_en_ex_o;
  assign multdiv_operand_a_ex_o = rf_rdata_a_i;
  assign multdiv_operand_b_ex_o = rf_rdata_b_i;
  assign multdiv_operator_ex_o = multdiv_operator;
  assign multdiv_ready_id_o = ready_wb_i;
  assign multdiv_signed_mode_ex_o = multdiv_signed_mode;
  assign nt_branch_addr_o = 32'd0;
  assign rf_rd_a_wb_match_o = 1'h0;
  assign rf_rd_b_wb_match_o = 1'h0;
  assign rf_rdata_a_fwd = rf_rdata_a_i;
  assign rf_rdata_b_fwd = rf_rdata_b_i;
  assign rf_ren_a = rf_ren_a_o;
  assign rf_ren_b = rf_ren_b_o;
  assign stall_ld_hz = 1'h0;
  assign stall_wb = 1'h0;
endmodule

module \$paramod$584cd83b7252dd2a0d1c3e78791b884a85cfd813\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [7:0] rd_data_o;
  wire [7:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [7:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [7:0] wr_data_i;
  wire [7:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 8'h00;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$614bb09e9e953f1295bd420dba0675225b551eb5\ibex_cs_registers (clk_i, rst_ni, hart_id_i, priv_mode_id_o, priv_mode_lsu_o, csr_mstatus_tw_o, csr_mtvec_o, csr_mtvec_init_i, boot_addr_i, csr_access_i, csr_addr_i, csr_wdata_i, csr_op_i, csr_op_en_i, csr_rdata_o, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, nmi_mode_i, irq_pending_o
, csr_mstatus_mie_o, csr_mepc_o, csr_mtval_o, csr_pmp_addr_o, debug_mode_i, debug_mode_entering_i, debug_cause_i, debug_csr_save_i, csr_depc_o, debug_single_step_o, debug_ebreakm_o, debug_ebreaku_o, trigger_match_o, pc_if_i, pc_id_i, pc_wb_i, data_ind_timing_o, dummy_instr_en_o, dummy_instr_mask_o, dummy_instr_seed_en_o, dummy_instr_seed_o
, icache_enable_o, csr_shadow_err_o, ic_scr_key_valid_i, csr_save_if_i, csr_save_id_i, csr_save_wb_i, csr_restore_mret_i, csr_restore_dret_i, csr_save_cause_i, csr_mtval_i, illegal_csr_insn_o, double_fault_seen_o, instr_ret_i, instr_ret_compressed_i, instr_ret_spec_i, instr_ret_compressed_spec_i, iside_wait_i, jump_i, branch_i, branch_taken_i, mem_load_i
, mem_store_i, dside_wait_i, mul_wait_i, div_wait_i, irqs_o, csr_pmp_cfg_o, csr_pmp_mseccfg_o, csr_mcause_i);
  wire [7:0] _000_;
  wire _001_;
  wire [31:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire [5:0] _008_;
  wire _009_;
  wire _010_;
  wire [63:0] _011_;
  wire [31:0] _012_;
  wire [7:0] _013_;
  wire _014_;
  wire [31:0] _015_;
  wire _016_;
  wire [31:0] _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire [31:0] _022_;
  wire [6:0] _023_;
  wire _024_;
  wire _025_;
  wire [31:0] _026_;
  wire _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire [5:0] _033_;
  wire _034_;
  wire [31:0] _035_;
  wire _036_;
  wire _037_;
  wire [1:0] _038_;
  wire _039_;
  wire [6:0] _040_;
  wire [31:0] _041_;
  wire _042_;
  wire [1:0] _043_;
  wire [31:0] _044_;
  wire [1:0] _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire [6:0] _050_;
  wire _051_;
  wire [31:0] _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire [1:0] _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire [3:0] _061_;
  wire _062_;
  wire _063_;
  wire [1:0] _064_;
  wire _065_;
  wire [1:0] _066_;
  wire _067_;
  wire _068_;
  wire [3:0] _069_;
  wire _070_;
  wire [2:0] _071_;
  wire _072_;
  wire [2:0] _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire [31:0] _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire [31:0] _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire [31:0] _143_;
  wire _144_;
  wire [31:0] _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire [31:0] _152_;
  wire _153_;
  wire [2:0] _154_;
  wire [2:0] _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire [31:0] _160_;
  wire [31:0] _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire [6:0] _168_;
  wire [6:0] _169_;
  wire _170_;
  wire _171_;
  wire [31:0] _172_;
  wire [31:0] _173_;
  wire _174_;
  wire _175_;
  wire [1:0] _176_;
  wire [1:0] _177_;
  wire _178_;
  wire _179_;
  wire [30:0] _180_;
  wire _181_;
  wire [30:0] _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire [28:0] _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire [1:0] _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire [25:0] _240_;
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  input branch_i;
  wire branch_i;
  input branch_taken_i;
  wire branch_taken_i;
  input clk_i;
  wire clk_i;
  wire cpuctrlsts_ic_scr_key_err;
  wire cpuctrlsts_ic_scr_key_valid_q;
  wire [7:0] cpuctrlsts_part_d;
  wire cpuctrlsts_part_err;
  wire [7:0] cpuctrlsts_part_q;
  wire [7:0] cpuctrlsts_part_wdata;
  wire [7:0] cpuctrlsts_part_wdata_raw;
  wire cpuctrlsts_part_we;
  input csr_access_i;
  wire csr_access_i;
  wire [11:0] csr_addr;
  input [11:0] csr_addr_i;
  wire [11:0] csr_addr_i;
  output [31:0] csr_depc_o;
  wire [31:0] csr_depc_o;
  input [6:0] csr_mcause_i;
  wire [6:0] csr_mcause_i;
  output [31:0] csr_mepc_o;
  wire [31:0] csr_mepc_o;
  output csr_mstatus_mie_o;
  wire csr_mstatus_mie_o;
  output csr_mstatus_tw_o;
  wire csr_mstatus_tw_o;
  input [31:0] csr_mtval_i;
  wire [31:0] csr_mtval_i;
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  input csr_mtvec_init_i;
  wire csr_mtvec_init_i;
  output [31:0] csr_mtvec_o;
  wire [31:0] csr_mtvec_o;
  input csr_op_en_i;
  wire csr_op_en_i;
  input [1:0] csr_op_i;
  wire [1:0] csr_op_i;
  output [135:0] csr_pmp_addr_o;
  wire [135:0] csr_pmp_addr_o;
  output [23:0] csr_pmp_cfg_o;
  wire [23:0] csr_pmp_cfg_o;
  output [2:0] csr_pmp_mseccfg_o;
  wire [2:0] csr_pmp_mseccfg_o;
  wire [31:0] csr_rdata_int;
  output [31:0] csr_rdata_o;
  wire [31:0] csr_rdata_o;
  input csr_restore_dret_i;
  wire csr_restore_dret_i;
  input csr_restore_mret_i;
  wire csr_restore_mret_i;
  input csr_save_cause_i;
  wire csr_save_cause_i;
  input csr_save_id_i;
  wire csr_save_id_i;
  input csr_save_if_i;
  wire csr_save_if_i;
  input csr_save_wb_i;
  wire csr_save_wb_i;
  output csr_shadow_err_o;
  wire csr_shadow_err_o;
  input [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_i;
  wire [31:0] csr_wdata_int;
  wire csr_we_int;
  wire csr_wr;
  output data_ind_timing_o;
  wire data_ind_timing_o;
  wire dbg_csr;
  wire [31:0] dcsr_d;
  wire dcsr_en;
  wire [31:0] dcsr_q;
  input [2:0] debug_cause_i;
  wire [2:0] debug_cause_i;
  input debug_csr_save_i;
  wire debug_csr_save_i;
  output debug_ebreakm_o;
  wire debug_ebreakm_o;
  output debug_ebreaku_o;
  wire debug_ebreaku_o;
  input debug_mode_entering_i;
  wire debug_mode_entering_i;
  input debug_mode_i;
  wire debug_mode_i;
  output debug_single_step_o;
  wire debug_single_step_o;
  wire [31:0] depc_d;
  wire depc_en;
  wire [31:0] depc_q;
  input div_wait_i;
  wire div_wait_i;
  output double_fault_seen_o;
  wire double_fault_seen_o;
  wire dscratch0_en;
  wire [31:0] dscratch0_q;
  wire dscratch1_en;
  wire [31:0] dscratch1_q;
  input dside_wait_i;
  wire dside_wait_i;
  output dummy_instr_en_o;
  wire dummy_instr_en_o;
  output [2:0] dummy_instr_mask_o;
  wire [2:0] dummy_instr_mask_o;
  output dummy_instr_seed_en_o;
  wire dummy_instr_seed_en_o;
  output [31:0] dummy_instr_seed_o;
  wire [31:0] dummy_instr_seed_o;
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounter_incr ;
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounter_we ;
  wire [28:0] \g_mcountinhibit_reduced.unused_mhphcounterh_we ;
  wire \gen_cntrs[7].gen_unimp.gen_no_compressed_instr_cnt.unused_instr_ret_compressed_spec_i ;
  wire \gen_no_dit.unused_dit ;
  wire \gen_no_dummy.unused_dummy_en ;
  wire [2:0] \gen_no_dummy.unused_dummy_mask ;
  wire \gen_no_icache.unused_ic_scr_key_valid ;
  wire \gen_no_icache.unused_icen ;
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  input ic_scr_key_valid_i;
  wire ic_scr_key_valid_i;
  output icache_enable_o;
  wire icache_enable_o;
  wire illegal_csr;
  wire illegal_csr_dbg;
  output illegal_csr_insn_o;
  wire illegal_csr_insn_o;
  wire illegal_csr_priv;
  wire illegal_csr_write;
  input instr_ret_compressed_i;
  wire instr_ret_compressed_i;
  input instr_ret_compressed_spec_i;
  wire instr_ret_compressed_spec_i;
  input instr_ret_i;
  wire instr_ret_i;
  input instr_ret_spec_i;
  wire instr_ret_spec_i;
  input irq_external_i;
  wire irq_external_i;
  input [14:0] irq_fast_i;
  wire [14:0] irq_fast_i;
  output irq_pending_o;
  wire irq_pending_o;
  input irq_software_i;
  wire irq_software_i;
  input irq_timer_i;
  wire irq_timer_i;
  output [17:0] irqs_o;
  wire [17:0] irqs_o;
  input iside_wait_i;
  wire iside_wait_i;
  input jump_i;
  wire jump_i;
  wire [6:0] mcause_d;
  wire mcause_en;
  wire [6:0] mcause_q;
  wire [31:0] mcountinhibit;
  wire [2:0] mcountinhibit_q;
  wire mcountinhibit_we;
  input mem_load_i;
  wire mem_load_i;
  input mem_store_i;
  wire mem_store_i;
  wire [31:0] mepc_d;
  wire mepc_en;
  wire [31:0] mepc_q;
  wire [63:0] \mhpmcounter[0] ;
  wire [63:0] \mhpmcounter[10] ;
  wire [63:0] \mhpmcounter[11] ;
  wire [63:0] \mhpmcounter[12] ;
  wire [63:0] \mhpmcounter[13] ;
  wire [63:0] \mhpmcounter[14] ;
  wire [63:0] \mhpmcounter[15] ;
  wire [63:0] \mhpmcounter[16] ;
  wire [63:0] \mhpmcounter[17] ;
  wire [63:0] \mhpmcounter[18] ;
  wire [63:0] \mhpmcounter[19] ;
  wire [63:0] \mhpmcounter[1] ;
  wire [63:0] \mhpmcounter[20] ;
  wire [63:0] \mhpmcounter[21] ;
  wire [63:0] \mhpmcounter[22] ;
  wire [63:0] \mhpmcounter[23] ;
  wire [63:0] \mhpmcounter[24] ;
  wire [63:0] \mhpmcounter[25] ;
  wire [63:0] \mhpmcounter[26] ;
  wire [63:0] \mhpmcounter[27] ;
  wire [63:0] \mhpmcounter[28] ;
  wire [63:0] \mhpmcounter[29] ;
  wire [63:0] \mhpmcounter[2] ;
  wire [63:0] \mhpmcounter[30] ;
  wire [63:0] \mhpmcounter[31] ;
  wire [63:0] \mhpmcounter[3] ;
  wire [63:0] \mhpmcounter[4] ;
  wire [63:0] \mhpmcounter[5] ;
  wire [63:0] \mhpmcounter[6] ;
  wire [63:0] \mhpmcounter[7] ;
  wire [63:0] \mhpmcounter[8] ;
  wire [63:0] \mhpmcounter[9] ;
  wire [4:0] mhpmcounter_idx;
  wire [31:0] mhpmcounter_incr;
  wire [31:0] mhpmcounter_we;
  wire [31:0] mhpmcounterh_we;
  wire [31:0] \mhpmevent[0] ;
  wire [31:0] \mhpmevent[10] ;
  wire [31:0] \mhpmevent[11] ;
  wire [31:0] \mhpmevent[12] ;
  wire [31:0] \mhpmevent[13] ;
  wire [31:0] \mhpmevent[14] ;
  wire [31:0] \mhpmevent[15] ;
  wire [31:0] \mhpmevent[16] ;
  wire [31:0] \mhpmevent[17] ;
  wire [31:0] \mhpmevent[18] ;
  wire [31:0] \mhpmevent[19] ;
  wire [31:0] \mhpmevent[1] ;
  wire [31:0] \mhpmevent[20] ;
  wire [31:0] \mhpmevent[21] ;
  wire [31:0] \mhpmevent[22] ;
  wire [31:0] \mhpmevent[23] ;
  wire [31:0] \mhpmevent[24] ;
  wire [31:0] \mhpmevent[25] ;
  wire [31:0] \mhpmevent[26] ;
  wire [31:0] \mhpmevent[27] ;
  wire [31:0] \mhpmevent[28] ;
  wire [31:0] \mhpmevent[29] ;
  wire [31:0] \mhpmevent[2] ;
  wire [31:0] \mhpmevent[30] ;
  wire [31:0] \mhpmevent[31] ;
  wire [31:0] \mhpmevent[3] ;
  wire [31:0] \mhpmevent[4] ;
  wire [31:0] \mhpmevent[5] ;
  wire [31:0] \mhpmevent[6] ;
  wire [31:0] \mhpmevent[7] ;
  wire [31:0] \mhpmevent[8] ;
  wire [31:0] \mhpmevent[9] ;
  wire [17:0] mie_d;
  wire mie_en;
  wire [17:0] mie_q;
  wire [63:0] minstret_next;
  wire [63:0] minstret_raw;
  wire [17:0] mip;
  wire mscratch_en;
  wire [31:0] mscratch_q;
  wire [6:0] mstack_cause_d;
  wire [6:0] mstack_cause_q;
  wire [2:0] mstack_d;
  wire mstack_en;
  wire [31:0] mstack_epc_d;
  wire [31:0] mstack_epc_q;
  wire [2:0] mstack_q;
  wire [5:0] mstatus_d;
  wire mstatus_en;
  wire mstatus_err;
  wire [5:0] mstatus_q;
  wire [31:0] mtval_d;
  wire mtval_en;
  wire [31:0] mtval_q;
  wire [31:0] mtvec_d;
  wire mtvec_en;
  wire mtvec_err;
  wire [31:0] mtvec_q;
  input mul_wait_i;
  wire mul_wait_i;
  input nmi_mode_i;
  wire nmi_mode_i;
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  input [31:0] pc_if_i;
  wire [31:0] pc_if_i;
  input [31:0] pc_wb_i;
  wire [31:0] pc_wb_i;
  wire [31:0] \pmp_addr_rdata[0] ;
  wire [31:0] \pmp_addr_rdata[10] ;
  wire [31:0] \pmp_addr_rdata[11] ;
  wire [31:0] \pmp_addr_rdata[12] ;
  wire [31:0] \pmp_addr_rdata[13] ;
  wire [31:0] \pmp_addr_rdata[14] ;
  wire [31:0] \pmp_addr_rdata[15] ;
  wire [31:0] \pmp_addr_rdata[1] ;
  wire [31:0] \pmp_addr_rdata[2] ;
  wire [31:0] \pmp_addr_rdata[3] ;
  wire [31:0] \pmp_addr_rdata[4] ;
  wire [31:0] \pmp_addr_rdata[5] ;
  wire [31:0] \pmp_addr_rdata[6] ;
  wire [31:0] \pmp_addr_rdata[7] ;
  wire [31:0] \pmp_addr_rdata[8] ;
  wire [31:0] \pmp_addr_rdata[9] ;
  wire [7:0] \pmp_cfg_rdata[0] ;
  wire [7:0] \pmp_cfg_rdata[10] ;
  wire [7:0] \pmp_cfg_rdata[11] ;
  wire [7:0] \pmp_cfg_rdata[12] ;
  wire [7:0] \pmp_cfg_rdata[13] ;
  wire [7:0] \pmp_cfg_rdata[14] ;
  wire [7:0] \pmp_cfg_rdata[15] ;
  wire [7:0] \pmp_cfg_rdata[1] ;
  wire [7:0] \pmp_cfg_rdata[2] ;
  wire [7:0] \pmp_cfg_rdata[3] ;
  wire [7:0] \pmp_cfg_rdata[4] ;
  wire [7:0] \pmp_cfg_rdata[5] ;
  wire [7:0] \pmp_cfg_rdata[6] ;
  wire [7:0] \pmp_cfg_rdata[7] ;
  wire [7:0] \pmp_cfg_rdata[8] ;
  wire [7:0] \pmp_cfg_rdata[9] ;
  wire pmp_csr_err;
  wire [2:0] pmp_mseccfg;
  wire [1:0] priv_lvl_d;
  reg [1:0] priv_lvl_q;
  output [1:0] priv_mode_id_o;
  wire [1:0] priv_mode_id_o;
  output [1:0] priv_mode_lsu_o;
  wire [1:0] priv_mode_lsu_o;
  input rst_ni;
  wire rst_ni;
  wire [31:0] tmatch_control_rdata;
  wire [31:0] tmatch_value_rdata;
  output trigger_match_o;
  wire trigger_match_o;
  wire [31:0] tselect_rdata;
  wire [7:0] unused_boot_addr;
  wire [2:0] unused_csr_addr;
  wire unused_mhpmcounter_incr_1;
  wire unused_mhpmcounter_we_1;
  wire unused_mhpmcounterh_we_1;
  assign _075_ = instr_ret_i & _140_;
  assign _076_ = instr_ret_spec_i & _140_;
  assign icache_enable_o = cpuctrlsts_part_q[0] & _141_;
  assign illegal_csr_dbg = dbg_csr & _142_;
  assign illegal_csr_insn_o = csr_access_i & _150_;
  assign _077_ = _143_ & csr_rdata_o;
  assign _078_ = csr_wr & csr_op_en_i;
  assign csr_we_int = _078_ & _144_;
  assign irqs_o = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i } & mie_q;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) priv_lvl_q <= 2'h3;
    else if (_079_) priv_lvl_q <= priv_lvl_d;
  reg [1:0] _251_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _251_ <= 2'h0;
    else if (mcountinhibit_we) _251_ <= { csr_wdata_int[2], csr_wdata_int[0] };
  assign { mcountinhibit_q[2], mcountinhibit_q[0] } = _251_;
  assign _079_ = | { csr_save_cause_i, csr_restore_dret_i, csr_restore_mret_i };
  assign _080_ = | { _184_, _185_, _186_, _187_, _188_, _189_, _190_, _191_, _192_, _193_, _194_, _195_, _197_, _198_, _199_, _232_, _233_, _234_, _235_, _236_, _237_, _238_, _239_, _182_, _180_, _179_, _178_, _105_, _104_, _103_, _102_, _101_, _100_, _099_, _098_, _097_, _096_, _095_, _094_, _093_, _092_, _091_, _090_, _089_, _088_, _087_, _086_ };
  assign _081_ = | { _200_, _201_, _202_, _203_, _204_, _205_, _206_, _207_, _208_, _209_, _210_, _211_, _212_, _213_, _214_, _215_, _216_, _217_, _218_, _219_, _220_, _221_, _222_, _223_, _224_, _225_, _226_, _227_, _228_, _229_, _230_, _231_ };
  assign _082_ = | { _186_, _187_, _188_, _178_ };
  assign _083_ = | { _108_, _153_ };
  assign _084_ = | { _200_, _201_, _202_, _203_, _204_, _205_, _206_, _207_, _208_, _209_, _210_, _211_, _212_, _213_, _214_, _215_, _216_, _217_, _218_, _219_, _220_, _221_, _222_, _223_, _224_, _225_, _226_, _227_, _228_, _230_ };
  assign _085_ = csr_addr_i[11:10] == 2'h3;
  assign _106_ = csr_wdata_int[31:30] == 2'h2;
  assign _107_ = csr_wdata_int[31:30] == 2'h3;
  assign illegal_csr_priv = csr_addr_i[9:8] > priv_lvl_q;
  assign illegal_csr_write = _085_ && csr_wr;
  assign _111_ = _134_ && _135_;
  assign _112_ = _136_ && _137_;
  assign _113_ = _086_ || _087_;
  assign _114_ = _113_ || _088_;
  assign _115_ = _114_ || _089_;
  assign _116_ = _115_ || _090_;
  assign _117_ = _116_ || _091_;
  assign _118_ = _117_ || _092_;
  assign _119_ = _118_ || _093_;
  assign _120_ = _119_ || _094_;
  assign _121_ = _120_ || _095_;
  assign _122_ = _121_ || _096_;
  assign _123_ = _122_ || _097_;
  assign _124_ = _123_ || _098_;
  assign _125_ = _124_ || _099_;
  assign _126_ = _125_ || _100_;
  assign _127_ = _126_ || _101_;
  assign _128_ = _127_ || _102_;
  assign _129_ = _128_ || _103_;
  assign _130_ = _129_ || _104_;
  assign _131_ = _130_ || _105_;
  assign _132_ = csr_mcause_i[5] || csr_mcause_i[6];
  assign _133_ = _108_ || _109_;
  assign csr_wr = _133_ || _110_;
  assign _134_ = csr_wdata_int[12:11] != 2'h3;
  assign _135_ = | csr_wdata_int[12:11];
  assign _136_ = csr_wdata_int[1:0] != 2'h3;
  assign _137_ = | csr_wdata_int[1:0];
  assign _138_ = mstatus_q[3:2] != 2'h3;
  assign _139_ = - $signed({ 27'h0000000, csr_addr_i[4:0] });
  assign _074_ = ~ mcountinhibit_q[0];
  assign _140_ = ~ mcountinhibit_q[2];
  assign _141_ = ~ _146_;
  assign _142_ = ~ debug_mode_i;
  assign _143_ = ~ csr_wdata_i;
  assign _144_ = ~ illegal_csr_insn_o;
  assign _146_ = debug_mode_i | debug_mode_entering_i;
  assign _147_ = mstatus_err | mtvec_err;
  assign csr_shadow_err_o = _147_ | cpuctrlsts_part_err;
  assign _148_ = illegal_csr | illegal_csr_write;
  assign _149_ = _148_ | illegal_csr_priv;
  assign _150_ = _149_ | illegal_csr_dbg;
  assign _151_ = mcause_q[5] | mcause_q[6];
  assign _152_ = csr_wdata_i | csr_rdata_o;
  function [31:0] _307_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _307_ = b[31:0];
      3'b?1?:
        _307_ = b[63:32];
      3'b1??:
        _307_ = b[95:64];
      default:
        _307_ = a;
    endcase
  endfunction
  assign csr_wdata_int = _307_(32'hxxxxxxxx, { _152_, _077_, csr_wdata_i }, { _109_, _110_, _083_ });
  assign _153_ = ! csr_op_i;
  assign _110_ = csr_op_i == 2'h3;
  assign _109_ = csr_op_i == 2'h2;
  assign _108_ = csr_op_i == 2'h1;
  assign cpuctrlsts_part_d[7] = csr_save_cause_i ? _045_[1] : _000_[7];
  assign _067_ = nmi_mode_i ? 1'h1 : _006_;
  assign _052_ = nmi_mode_i ? mstack_epc_q : { csr_wdata_int[31:1], 1'h0 };
  assign _068_ = nmi_mode_i ? 1'h1 : _007_;
  assign _073_[1:0] = nmi_mode_i ? mstack_q[1:0] : 2'h0;
  assign _073_[2] = nmi_mode_i ? mstack_q[2] : 1'h1;
  assign _072_ = _138_ ? 1'h0 : _008_[1];
  assign _154_ = csr_restore_mret_i ? _073_ : _008_[4:2];
  assign _155_ = csr_restore_dret_i ? _008_[4:2] : _154_;
  assign mstatus_d[4:2] = csr_save_cause_i ? _061_[2:0] : _155_;
  assign _156_ = csr_restore_mret_i ? _072_ : _008_[1];
  assign _157_ = csr_restore_dret_i ? _008_[1] : _156_;
  assign mstatus_d[1] = csr_save_cause_i ? _008_[1] : _157_;
  assign _158_ = csr_restore_mret_i ? mstatus_q[4] : _008_[5];
  assign _159_ = csr_restore_dret_i ? _008_[5] : _158_;
  assign mstatus_d[5] = csr_save_cause_i ? _061_[3] : _159_;
  assign _058_ = cpuctrlsts_part_q[6] ? 1'h1 : 1'h0;
  assign _064_[0] = _132_ ? _000_[6] : 1'h1;
  assign _049_ = _132_ ? 1'h0 : _058_;
  assign _070_ = cpuctrlsts_part_q[6] ? 1'h1 : _000_[7];
  assign _065_ = _132_ ? _001_ : 1'h1;
  assign _057_ = debug_mode_i ? _001_ : _065_;
  assign _056_ = debug_mode_i ? _000_[7:6] : _064_;
  assign _039_ = debug_mode_i ? 1'h0 : _049_;
  assign _042_ = debug_mode_i ? 1'h0 : 1'h1;
  assign _040_ = debug_mode_i ? { _107_, _106_, csr_wdata_int[4:0] } : csr_mcause_i;
  assign _059_ = debug_mode_i ? _006_ : 1'h1;
  assign _041_ = debug_mode_i ? { csr_wdata_int[31:1], 1'h0 } : _022_;
  assign _060_ = debug_mode_i ? _007_ : 1'h1;
  assign _064_[1] = _132_ ? _000_[7] : _070_;
  assign _069_[1:0] = debug_mode_i ? _008_[3:2] : priv_lvl_q;
  assign _069_[2] = debug_mode_i ? _008_[4] : mstatus_q[5];
  assign _062_ = debug_mode_i ? _009_ : 1'h1;
  assign _044_ = debug_mode_i ? csr_wdata_int : csr_mtval_i;
  assign _063_ = debug_mode_i ? _010_ : 1'h1;
  assign _048_ = debug_csr_save_i ? 1'h1 : _004_;
  assign _017_ = debug_csr_save_i ? _022_ : { csr_wdata_int[31:1], 1'h0 };
  assign _047_ = debug_csr_save_i ? 1'h1 : _003_;
  assign _071_ = debug_csr_save_i ? debug_cause_i : _002_[8:6];
  assign _066_ = debug_csr_save_i ? priv_lvl_q : _002_[1:0];
  assign _046_ = debug_csr_save_i ? _001_ : _057_;
  assign _045_ = debug_csr_save_i ? _000_[7:6] : _056_;
  assign _032_ = debug_csr_save_i ? 1'h0 : _042_;
  assign _055_ = debug_csr_save_i ? _010_ : _063_;
  assign _035_ = debug_csr_save_i ? csr_wdata_int : _044_;
  assign _051_ = debug_csr_save_i ? _006_ : _059_;
  assign _023_ = debug_csr_save_i ? { _107_, _106_, csr_wdata_int[4:0] } : _040_;
  assign _053_ = debug_csr_save_i ? _007_ : _060_;
  assign _026_ = debug_csr_save_i ? { csr_wdata_int[31:1], 1'h0 } : _041_;
  assign _054_ = debug_csr_save_i ? _009_ : _062_;
  assign _061_ = debug_csr_save_i ? _008_[5:2] : _069_;
  assign _019_ = debug_csr_save_i ? 1'h0 : _039_;
  assign _160_ = csr_save_wb_i ? pc_wb_i : pc_id_i;
  assign _161_ = csr_save_id_i ? pc_id_i : _160_;
  assign _022_ = csr_save_if_i ? pc_if_i : _161_;
  assign _162_ = csr_restore_mret_i ? 1'h1 : _001_;
  assign _163_ = csr_restore_dret_i ? _001_ : _162_;
  assign cpuctrlsts_part_we = csr_save_cause_i ? _046_ : _163_;
  assign _164_ = csr_restore_mret_i ? 1'h0 : _000_[6];
  assign _165_ = csr_restore_dret_i ? _000_[6] : _164_;
  assign cpuctrlsts_part_d[6] = csr_save_cause_i ? _045_[0] : _165_;
  assign mstack_en = csr_save_cause_i ? _032_ : 1'h0;
  assign depc_en = csr_save_cause_i ? _048_ : _004_;
  assign depc_d = csr_save_cause_i ? _017_ : { csr_wdata_int[31:1], 1'h0 };
  assign dcsr_en = csr_save_cause_i ? _047_ : _003_;
  assign dcsr_d[8:6] = csr_save_cause_i ? _071_ : _002_[8:6];
  assign dcsr_d[1:0] = csr_save_cause_i ? _066_ : _002_[1:0];
  assign mtval_en = csr_save_cause_i ? _055_ : _010_;
  assign mtval_d = csr_save_cause_i ? _035_ : csr_wdata_int;
  assign _166_ = csr_restore_mret_i ? _067_ : _006_;
  assign _167_ = csr_restore_dret_i ? _006_ : _166_;
  assign mcause_en = csr_save_cause_i ? _051_ : _167_;
  assign _168_ = csr_restore_mret_i ? _050_ : { _107_, _106_, csr_wdata_int[4:0] };
  assign _169_ = csr_restore_dret_i ? { _107_, _106_, csr_wdata_int[4:0] } : _168_;
  assign mcause_d = csr_save_cause_i ? _023_ : _169_;
  assign _170_ = csr_restore_mret_i ? _068_ : _007_;
  assign _171_ = csr_restore_dret_i ? _007_ : _170_;
  assign mepc_en = csr_save_cause_i ? _053_ : _171_;
  assign _172_ = csr_restore_mret_i ? _052_ : { csr_wdata_int[31:1], 1'h0 };
  assign _173_ = csr_restore_dret_i ? { csr_wdata_int[31:1], 1'h0 } : _172_;
  assign mepc_d = csr_save_cause_i ? _026_ : _173_;
  assign _174_ = csr_restore_mret_i ? 1'h1 : _009_;
  assign _175_ = csr_restore_dret_i ? _009_ : _174_;
  assign mstatus_en = csr_save_cause_i ? _054_ : _175_;
  assign _050_ = nmi_mode_i ? mstack_cause_q : { _107_, _106_, csr_wdata_int[4:0] };
  assign double_fault_seen_o = csr_save_cause_i ? _019_ : 1'h0;
  assign _176_ = csr_restore_mret_i ? mstatus_q[3:2] : 2'hx;
  assign _177_ = csr_restore_dret_i ? dcsr_q[1:0] : _176_;
  assign priv_lvl_d = csr_save_cause_i ? 2'h3 : _177_;
  assign _069_[3] = debug_mode_i ? _008_[5] : 1'h0;
  assign _015_[31:28] = _178_ ? 4'h4 : dcsr_q[31:28];
  assign _033_[5] = _179_ ? csr_wdata_int[3] : mstatus_q[5];
  assign _033_[4] = _179_ ? csr_wdata_int[7] : mstatus_q[4];
  assign _033_[0] = _179_ ? csr_wdata_int[21] : mstatus_q[0];
  assign _015_[27:16] = _178_ ? 12'h000 : dcsr_q[27:16];
  assign _033_[1] = _179_ ? csr_wdata_int[17] : mstatus_q[1];
  assign _033_[3:2] = _179_ ? _043_ : mstatus_q[3:2];
  assign _015_[1:0] = _178_ ? _038_ : dcsr_q[1:0];
  assign _015_[5] = _178_ ? 1'h0 : dcsr_q[5];
  assign _015_[4] = _178_ ? 1'h0 : dcsr_q[4];
  assign _015_[3] = _178_ ? 1'h0 : dcsr_q[3];
  assign _015_[2] = _178_ ? csr_wdata_int[2] : dcsr_q[2];
  assign _015_[15] = _178_ ? csr_wdata_int[15] : dcsr_q[15];
  assign _015_[14] = _178_ ? 1'h0 : dcsr_q[14];
  assign _015_[11] = _178_ ? 1'h0 : dcsr_q[11];
  assign _015_[9] = _178_ ? 1'h0 : dcsr_q[9];
  assign _043_ = _111_ ? 2'h0 : csr_wdata_int[12:11];
  assign _015_[10] = _178_ ? 1'h0 : dcsr_q[10];
  assign _038_ = _112_ ? 2'h0 : csr_wdata_int[1:0];
  assign _034_ = _179_ ? 1'h1 : 1'h0;
  assign _183_ = | _182_;
  assign _014_ = _184_ ? 1'h1 : 1'h0;
  assign _013_ = _184_ ? { csr_wdata_int[7:6], 6'h00 } : cpuctrlsts_part_q;
  assign _029_ = _181_ ? _145_ : 32'd0;
  assign _028_ = _183_ ? _145_ : 32'd0;
  assign _025_ = _185_ ? 1'h1 : 1'h0;
  assign _021_ = _186_ ? 1'h1 : 1'h0;
  assign _020_ = _187_ ? 1'h1 : 1'h0;
  assign _018_ = _188_ ? 1'h1 : 1'h0;
  assign _016_ = _178_ ? 1'h1 : 1'h0;
  assign _015_[13:12] = _178_ ? csr_wdata_int[13:12] : dcsr_q[13:12];
  assign _037_ = _189_ ? 1'h1 : csr_mtvec_init_i;
  assign _036_ = _190_ ? 1'h1 : 1'h0;
  assign _024_ = _191_ ? 1'h1 : 1'h0;
  assign _027_ = _192_ ? 1'h1 : 1'h0;
  assign _031_ = _193_ ? 1'h1 : 1'h0;
  assign _030_ = _194_ ? 1'h1 : 1'h0;
  assign _001_ = csr_we_int ? _014_ : 1'h0;
  assign { _000_[7:6], cpuctrlsts_part_d[5:0] } = csr_we_int ? _013_ : cpuctrlsts_part_q;
  assign mhpmcounterh_we = csr_we_int ? _029_ : 32'd0;
  assign mhpmcounter_we = csr_we_int ? _028_ : 32'd0;
  assign mcountinhibit_we = csr_we_int ? _025_ : 1'h0;
  assign dscratch1_en = csr_we_int ? _021_ : 1'h0;
  assign dscratch0_en = csr_we_int ? _020_ : 1'h0;
  assign _004_ = csr_we_int ? _018_ : 1'h0;
  assign _003_ = csr_we_int ? _016_ : 1'h0;
  assign { dcsr_d[31:9], _002_[8:6], dcsr_d[5:2], _002_[1:0] } = csr_we_int ? { _015_[31:9], dcsr_q[8:6], _015_[5:0] } : dcsr_q;
  assign mtvec_en = csr_we_int ? _037_ : csr_mtvec_init_i;
  assign _010_ = csr_we_int ? _036_ : 1'h0;
  assign _006_ = csr_we_int ? _024_ : 1'h0;
  assign _007_ = csr_we_int ? _027_ : 1'h0;
  assign mscratch_en = csr_we_int ? _031_ : 1'h0;
  assign mie_en = csr_we_int ? _030_ : 1'h0;
  assign _009_ = csr_we_int ? _034_ : 1'h0;
  assign { _008_[5:1], mstatus_d[0] } = csr_we_int ? _033_ : mstatus_q;
  assign illegal_csr = _131_ ? 1'h1 : _005_;
  function [0:0] _458_;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    casez (s) // synopsys parallel_case
      13'b????????????1:
        _458_ = b[0:0];
      13'b???????????1?:
        _458_ = b[1:1];
      13'b??????????1??:
        _458_ = b[2:2];
      13'b?????????1???:
        _458_ = b[3:3];
      13'b????????1????:
        _458_ = b[4:4];
      13'b???????1?????:
        _458_ = b[5:5];
      13'b??????1??????:
        _458_ = b[6:6];
      13'b?????1???????:
        _458_ = b[7:7];
      13'b????1????????:
        _458_ = b[8:8];
      13'b???1?????????:
        _458_ = b[9:9];
      13'b??1??????????:
        _458_ = b[10:10];
      13'b?1???????????:
        _458_ = b[11:11];
      13'b1????????????:
        _458_ = b[12:12];
      default:
        _458_ = a;
    endcase
  endfunction
  assign csr_rdata_o[31] = _458_(1'h0, { hart_id_i[31], mscratch_q[31], mtvec_q[31], mepc_q[31], _151_, mtval_q[31], dcsr_q[31], depc_q[31], dscratch0_q[31], dscratch1_q[31], _012_[31], _011_[31], _011_[63] }, { _197_, _193_, _189_, _192_, _191_, _190_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [0:0] _459_;
    input [0:0] a;
    input [16:0] b;
    input [16:0] s;
    casez (s) // synopsys parallel_case
      17'b????????????????1:
        _459_ = b[0:0];
      17'b???????????????1?:
        _459_ = b[1:1];
      17'b??????????????1??:
        _459_ = b[2:2];
      17'b?????????????1???:
        _459_ = b[3:3];
      17'b????????????1????:
        _459_ = b[4:4];
      17'b???????????1?????:
        _459_ = b[5:5];
      17'b??????????1??????:
        _459_ = b[6:6];
      17'b?????????1???????:
        _459_ = b[7:7];
      17'b????????1????????:
        _459_ = b[8:8];
      17'b???????1?????????:
        _459_ = b[9:9];
      17'b??????1??????????:
        _459_ = b[10:10];
      17'b?????1???????????:
        _459_ = b[11:11];
      17'b????1????????????:
        _459_ = b[12:12];
      17'b???1?????????????:
        _459_ = b[13:13];
      17'b??1??????????????:
        _459_ = b[14:14];
      17'b?1???????????????:
        _459_ = b[15:15];
      17'b1????????????????:
        _459_ = b[16:16];
      default:
        _459_ = a;
    endcase
  endfunction
  assign csr_rdata_o[7] = _459_(1'h0, { hart_id_i[7], mstatus_q[4], mie_q[16], mscratch_q[7], mtvec_q[7], mepc_q[7], _240_[2], mtval_q[7], irq_timer_i, dcsr_q[7], depc_q[7], dscratch0_q[7], dscratch1_q[7], _012_[7], _011_[7], _011_[39], cpuctrlsts_part_q[7] }, { _197_, _179_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_, _184_ });
  function [2:0] _460_;
    input [2:0] a;
    input [44:0] b;
    input [14:0] s;
    casez (s) // synopsys parallel_case
      15'b??????????????1:
        _460_ = b[2:0];
      15'b?????????????1?:
        _460_ = b[5:3];
      15'b????????????1??:
        _460_ = b[8:6];
      15'b???????????1???:
        _460_ = b[11:9];
      15'b??????????1????:
        _460_ = b[14:12];
      15'b?????????1?????:
        _460_ = b[17:15];
      15'b????????1??????:
        _460_ = b[20:18];
      15'b???????1???????:
        _460_ = b[23:21];
      15'b??????1????????:
        _460_ = b[26:24];
      15'b?????1?????????:
        _460_ = b[29:27];
      15'b????1??????????:
        _460_ = b[32:30];
      15'b???1???????????:
        _460_ = b[35:33];
      15'b??1????????????:
        _460_ = b[38:36];
      15'b?1?????????????:
        _460_ = b[41:39];
      15'b1??????????????:
        _460_ = b[44:42];
      default:
        _460_ = a;
    endcase
  endfunction
  assign csr_rdata_o[6:4] = _460_(3'h0, { 3'h1, hart_id_i[6:4], mscratch_q[6:4], mtvec_q[6:4], mepc_q[6:4], _240_[1:0], mcause_q[4], mtval_q[6:4], dcsr_q[6:4], depc_q[6:4], dscratch0_q[6:4], dscratch1_q[6:4], _012_[6:4], _011_[6:4], _011_[38:36], cpuctrlsts_part_q[6:4] }, { _199_, _197_, _193_, _189_, _192_, _191_, _190_, _178_, _188_, _187_, _186_, _196_, _183_, _181_, _184_ });
  function [0:0] _461_;
    input [0:0] a;
    input [16:0] b;
    input [16:0] s;
    casez (s) // synopsys parallel_case
      17'b????????????????1:
        _461_ = b[0:0];
      17'b???????????????1?:
        _461_ = b[1:1];
      17'b??????????????1??:
        _461_ = b[2:2];
      17'b?????????????1???:
        _461_ = b[3:3];
      17'b????????????1????:
        _461_ = b[4:4];
      17'b???????????1?????:
        _461_ = b[5:5];
      17'b??????????1??????:
        _461_ = b[6:6];
      17'b?????????1???????:
        _461_ = b[7:7];
      17'b????????1????????:
        _461_ = b[8:8];
      17'b???????1?????????:
        _461_ = b[9:9];
      17'b??????1??????????:
        _461_ = b[10:10];
      17'b?????1???????????:
        _461_ = b[11:11];
      17'b????1????????????:
        _461_ = b[12:12];
      17'b???1?????????????:
        _461_ = b[13:13];
      17'b??1??????????????:
        _461_ = b[14:14];
      17'b?1???????????????:
        _461_ = b[15:15];
      17'b1????????????????:
        _461_ = b[16:16];
      default:
        _461_ = a;
    endcase
  endfunction
  assign csr_rdata_o[3] = _461_(1'h0, { hart_id_i[3], mstatus_q[5], mie_q[17], mscratch_q[3], mtvec_q[3], mepc_q[3], mcause_q[3], mtval_q[3], irq_software_i, dcsr_q[3], depc_q[3], dscratch0_q[3], dscratch1_q[3], _012_[3], _011_[3], _011_[35], cpuctrlsts_part_q[3] }, { _197_, _179_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_, _184_ });
  assign _012_ = _081_ ? 32'd0 : 32'hxxxxxxxx;
  function [2:0] _463_;
    input [2:0] a;
    input [50:0] b;
    input [16:0] s;
    casez (s) // synopsys parallel_case
      17'b????????????????1:
        _463_ = b[2:0];
      17'b???????????????1?:
        _463_ = b[5:3];
      17'b??????????????1??:
        _463_ = b[8:6];
      17'b?????????????1???:
        _463_ = b[11:9];
      17'b????????????1????:
        _463_ = b[14:12];
      17'b???????????1?????:
        _463_ = b[17:15];
      17'b??????????1??????:
        _463_ = b[20:18];
      17'b?????????1???????:
        _463_ = b[23:21];
      17'b????????1????????:
        _463_ = b[26:24];
      17'b???????1?????????:
        _463_ = b[29:27];
      17'b??????1??????????:
        _463_ = b[32:30];
      17'b?????1???????????:
        _463_ = b[35:33];
      17'b????1????????????:
        _463_ = b[38:36];
      17'b???1?????????????:
        _463_ = b[41:39];
      17'b??1??????????????:
        _463_ = b[44:42];
      17'b?1???????????????:
        _463_ = b[47:45];
      17'b1????????????????:
        _463_ = b[50:48];
      default:
        _463_ = a;
    endcase
  endfunction
  assign csr_rdata_o[2:0] = _463_(3'h0, { 3'h6, hart_id_i[2:0], 3'h4, mscratch_q[2:0], mtvec_q[2:0], mepc_q[2:0], mcause_q[2:0], mtval_q[2:0], dcsr_q[2:0], depc_q[2:0], dscratch0_q[2:0], dscratch1_q[2:0], mcountinhibit_q[2], 1'h0, mcountinhibit_q[0], _012_[2:0], _011_[2:0], _011_[34:32], cpuctrlsts_part_q[2:0] }, { _199_, _197_, _232_, _193_, _189_, _192_, _191_, _190_, _178_, _188_, _187_, _186_, _185_, _196_, _183_, _181_, _184_ });
  assign _181_ = | _180_;
  assign _185_ = csr_addr_i == 12'h320;
  assign _199_ = csr_addr_i == 12'hf12;
  function [2:0] _467_;
    input [2:0] a;
    input [41:0] b;
    input [13:0] s;
    casez (s) // synopsys parallel_case
      14'b?????????????1:
        _467_ = b[2:0];
      14'b????????????1?:
        _467_ = b[5:3];
      14'b???????????1??:
        _467_ = b[8:6];
      14'b??????????1???:
        _467_ = b[11:9];
      14'b?????????1????:
        _467_ = b[14:12];
      14'b????????1?????:
        _467_ = b[17:15];
      14'b???????1??????:
        _467_ = b[20:18];
      14'b??????1???????:
        _467_ = b[23:21];
      14'b?????1????????:
        _467_ = b[26:24];
      14'b????1?????????:
        _467_ = b[29:27];
      14'b???1??????????:
        _467_ = b[32:30];
      14'b??1???????????:
        _467_ = b[35:33];
      14'b?1????????????:
        _467_ = b[38:36];
      14'b1?????????????:
        _467_ = b[41:39];
      default:
        _467_ = a;
    endcase
  endfunction
  assign csr_rdata_o[10:8] = _467_(3'h0, { hart_id_i[10:8], 3'h1, mscratch_q[10:8], mtvec_q[10:8], mepc_q[10:8], _240_[5:3], mtval_q[10:8], dcsr_q[10:8], depc_q[10:8], dscratch0_q[10:8], dscratch1_q[10:8], _012_[10:8], _011_[10:8], _011_[42:40] }, { _197_, _232_, _193_, _189_, _192_, _191_, _190_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [2:0] _468_;
    input [2:0] a;
    input [47:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _468_ = b[2:0];
      16'b??????????????1?:
        _468_ = b[5:3];
      16'b?????????????1??:
        _468_ = b[8:6];
      16'b????????????1???:
        _468_ = b[11:9];
      16'b???????????1????:
        _468_ = b[14:12];
      16'b??????????1?????:
        _468_ = b[17:15];
      16'b?????????1??????:
        _468_ = b[20:18];
      16'b????????1???????:
        _468_ = b[23:21];
      16'b???????1????????:
        _468_ = b[26:24];
      16'b??????1?????????:
        _468_ = b[29:27];
      16'b?????1??????????:
        _468_ = b[32:30];
      16'b????1???????????:
        _468_ = b[35:33];
      16'b???1????????????:
        _468_ = b[38:36];
      16'b??1?????????????:
        _468_ = b[41:39];
      16'b?1??????????????:
        _468_ = b[44:42];
      16'b1???????????????:
        _468_ = b[47:45];
      default:
        _468_ = a;
    endcase
  endfunction
  assign csr_rdata_o[20:18] = _468_(3'h0, { hart_id_i[20:18], 3'h4, mie_q[4:2], mscratch_q[20:18], mtvec_q[20:18], mepc_q[20:18], _240_[15:13], mtval_q[20:18], irq_fast_i[4:2], dcsr_q[20:18], depc_q[20:18], dscratch0_q[20:18], dscratch1_q[20:18], _012_[20:18], _011_[20:18], _011_[52:50] }, { _197_, _232_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [0:0] _469_;
    input [0:0] a;
    input [14:0] b;
    input [14:0] s;
    casez (s) // synopsys parallel_case
      15'b??????????????1:
        _469_ = b[0:0];
      15'b?????????????1?:
        _469_ = b[1:1];
      15'b????????????1??:
        _469_ = b[2:2];
      15'b???????????1???:
        _469_ = b[3:3];
      15'b??????????1????:
        _469_ = b[4:4];
      15'b?????????1?????:
        _469_ = b[5:5];
      15'b????????1??????:
        _469_ = b[6:6];
      15'b???????1???????:
        _469_ = b[7:7];
      15'b??????1????????:
        _469_ = b[8:8];
      15'b?????1?????????:
        _469_ = b[9:9];
      15'b????1??????????:
        _469_ = b[10:10];
      15'b???1???????????:
        _469_ = b[11:11];
      15'b??1????????????:
        _469_ = b[12:12];
      15'b?1?????????????:
        _469_ = b[13:13];
      15'b1??????????????:
        _469_ = b[14:14];
      default:
        _469_ = a;
    endcase
  endfunction
  assign csr_rdata_o[12] = _469_(1'h0, { hart_id_i[12], mstatus_q[3], 1'h1, mscratch_q[12], mtvec_q[12], mepc_q[12], _240_[7], mtval_q[12], dcsr_q[12], depc_q[12], dscratch0_q[12], dscratch1_q[12], _012_[12], _011_[12], _011_[44] }, { _197_, _179_, _232_, _193_, _189_, _192_, _191_, _190_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [0:0] _470_;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _470_ = b[0:0];
      16'b??????????????1?:
        _470_ = b[1:1];
      16'b?????????????1??:
        _470_ = b[2:2];
      16'b????????????1???:
        _470_ = b[3:3];
      16'b???????????1????:
        _470_ = b[4:4];
      16'b??????????1?????:
        _470_ = b[5:5];
      16'b?????????1??????:
        _470_ = b[6:6];
      16'b????????1???????:
        _470_ = b[7:7];
      16'b???????1????????:
        _470_ = b[8:8];
      16'b??????1?????????:
        _470_ = b[9:9];
      16'b?????1??????????:
        _470_ = b[10:10];
      16'b????1???????????:
        _470_ = b[11:11];
      16'b???1????????????:
        _470_ = b[12:12];
      16'b??1?????????????:
        _470_ = b[13:13];
      16'b?1??????????????:
        _470_ = b[14:14];
      16'b1???????????????:
        _470_ = b[15:15];
      default:
        _470_ = a;
    endcase
  endfunction
  assign csr_rdata_o[17] = _470_(1'h0, { hart_id_i[17], mstatus_q[1], mie_q[1], mscratch_q[17], mtvec_q[17], mepc_q[17], _240_[12], mtval_q[17], irq_fast_i[1], dcsr_q[17], depc_q[17], dscratch0_q[17], dscratch1_q[17], _012_[17], _011_[17], _011_[49] }, { _197_, _179_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [2:0] _471_;
    input [2:0] a;
    input [38:0] b;
    input [12:0] s;
    casez (s) // synopsys parallel_case
      13'b????????????1:
        _471_ = b[2:0];
      13'b???????????1?:
        _471_ = b[5:3];
      13'b??????????1??:
        _471_ = b[8:6];
      13'b?????????1???:
        _471_ = b[11:9];
      13'b????????1????:
        _471_ = b[14:12];
      13'b???????1?????:
        _471_ = b[17:15];
      13'b??????1??????:
        _471_ = b[20:18];
      13'b?????1???????:
        _471_ = b[23:21];
      13'b????1????????:
        _471_ = b[26:24];
      13'b???1?????????:
        _471_ = b[29:27];
      13'b??1??????????:
        _471_ = b[32:30];
      13'b?1???????????:
        _471_ = b[35:33];
      13'b1????????????:
        _471_ = b[38:36];
      default:
        _471_ = a;
    endcase
  endfunction
  assign csr_rdata_o[15:13] = _471_(3'h0, { hart_id_i[15:13], mscratch_q[15:13], mtvec_q[15:13], mepc_q[15:13], _240_[10:8], mtval_q[15:13], dcsr_q[15:13], depc_q[15:13], dscratch0_q[15:13], dscratch1_q[15:13], _012_[15:13], _011_[15:13], _011_[47:45] }, { _197_, _193_, _189_, _192_, _191_, _190_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [0:0] _472_;
    input [0:0] a;
    input [14:0] b;
    input [14:0] s;
    casez (s) // synopsys parallel_case
      15'b??????????????1:
        _472_ = b[0:0];
      15'b?????????????1?:
        _472_ = b[1:1];
      15'b????????????1??:
        _472_ = b[2:2];
      15'b???????????1???:
        _472_ = b[3:3];
      15'b??????????1????:
        _472_ = b[4:4];
      15'b?????????1?????:
        _472_ = b[5:5];
      15'b????????1??????:
        _472_ = b[6:6];
      15'b???????1???????:
        _472_ = b[7:7];
      15'b??????1????????:
        _472_ = b[8:8];
      15'b?????1?????????:
        _472_ = b[9:9];
      15'b????1??????????:
        _472_ = b[10:10];
      15'b???1???????????:
        _472_ = b[11:11];
      15'b??1????????????:
        _472_ = b[12:12];
      15'b?1?????????????:
        _472_ = b[13:13];
      15'b1??????????????:
        _472_ = b[14:14];
      default:
        _472_ = a;
    endcase
  endfunction
  assign csr_rdata_o[16] = _472_(1'h0, { hart_id_i[16], mie_q[0], mscratch_q[16], mtvec_q[16], mepc_q[16], _240_[11], mtval_q[16], irq_fast_i[0], dcsr_q[16], depc_q[16], dscratch0_q[16], dscratch1_q[16], _012_[16], _011_[16], _011_[48] }, { _197_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  assign _196_ = | _195_;
  function [8:0] _474_;
    input [8:0] a;
    input [143:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _474_ = b[8:0];
      16'b??????????????1?:
        _474_ = b[17:9];
      16'b?????????????1??:
        _474_ = b[26:18];
      16'b????????????1???:
        _474_ = b[35:27];
      16'b???????????1????:
        _474_ = b[44:36];
      16'b??????????1?????:
        _474_ = b[53:45];
      16'b?????????1??????:
        _474_ = b[62:54];
      16'b????????1???????:
        _474_ = b[71:63];
      16'b???????1????????:
        _474_ = b[80:72];
      16'b??????1?????????:
        _474_ = b[89:81];
      16'b?????1??????????:
        _474_ = b[98:90];
      16'b????1???????????:
        _474_ = b[107:99];
      16'b???1????????????:
        _474_ = b[116:108];
      16'b??1?????????????:
        _474_ = b[125:117];
      16'b?1??????????????:
        _474_ = b[134:126];
      16'b1???????????????:
        _474_ = b[143:135];
      default:
        _474_ = a;
    endcase
  endfunction
  assign csr_rdata_o[30:22] = _474_(9'h000, { hart_id_i[30:22], 9'h100, mie_q[14:6], mscratch_q[30:22], mtvec_q[30:22], mepc_q[30:22], _240_[25:17], mtval_q[30:22], irq_fast_i[14:6], dcsr_q[30:22], depc_q[30:22], dscratch0_q[30:22], dscratch1_q[30:22], _012_[30:22], _011_[30:22], _011_[62:54] }, { _197_, _232_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  assign _232_ = csr_addr_i == 12'h301;
  function [0:0] _476_;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _476_ = b[0:0];
      16'b??????????????1?:
        _476_ = b[1:1];
      16'b?????????????1??:
        _476_ = b[2:2];
      16'b????????????1???:
        _476_ = b[3:3];
      16'b???????????1????:
        _476_ = b[4:4];
      16'b??????????1?????:
        _476_ = b[5:5];
      16'b?????????1??????:
        _476_ = b[6:6];
      16'b????????1???????:
        _476_ = b[7:7];
      16'b???????1????????:
        _476_ = b[8:8];
      16'b??????1?????????:
        _476_ = b[9:9];
      16'b?????1??????????:
        _476_ = b[10:10];
      16'b????1???????????:
        _476_ = b[11:11];
      16'b???1????????????:
        _476_ = b[12:12];
      16'b??1?????????????:
        _476_ = b[13:13];
      16'b?1??????????????:
        _476_ = b[14:14];
      16'b1???????????????:
        _476_ = b[15:15];
      default:
        _476_ = a;
    endcase
  endfunction
  assign csr_rdata_o[11] = _476_(1'h0, { hart_id_i[11], mstatus_q[2], mie_q[15], mscratch_q[11], mtvec_q[11], mepc_q[11], _240_[6], mtval_q[11], irq_external_i, dcsr_q[11], depc_q[11], dscratch0_q[11], dscratch1_q[11], _012_[11], _011_[11], _011_[43] }, { _197_, _179_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  function [63:0] _477_;
    input [63:0] a;
    input [191:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _477_ = b[63:0];
      3'b?1?:
        _477_ = b[127:64];
      3'b1??:
        _477_ = b[191:128];
      default:
        _477_ = a;
    endcase
  endfunction
  assign _011_ = _477_(64'hxxxxxxxxxxxxxxxx, { \mhpmcounter[0] , \mhpmcounter[2] , 64'h0000000000000000 }, { _231_, _229_, _084_ });
  assign _200_ = csr_addr_i[4:0] == 5'h1f;
  assign _201_ = csr_addr_i[4:0] == 5'h1e;
  assign _202_ = csr_addr_i[4:0] == 5'h1d;
  assign _203_ = csr_addr_i[4:0] == 5'h1c;
  assign _204_ = csr_addr_i[4:0] == 5'h1b;
  assign _205_ = csr_addr_i[4:0] == 5'h1a;
  assign _206_ = csr_addr_i[4:0] == 5'h19;
  assign _207_ = csr_addr_i[4:0] == 5'h18;
  assign _208_ = csr_addr_i[4:0] == 5'h17;
  assign _209_ = csr_addr_i[4:0] == 5'h16;
  assign _210_ = csr_addr_i[4:0] == 5'h15;
  assign _211_ = csr_addr_i[4:0] == 5'h14;
  assign _212_ = csr_addr_i[4:0] == 5'h13;
  assign _213_ = csr_addr_i[4:0] == 5'h12;
  assign _214_ = csr_addr_i[4:0] == 5'h11;
  assign _215_ = csr_addr_i[4:0] == 5'h10;
  assign _216_ = csr_addr_i[4:0] == 5'h0f;
  assign _217_ = csr_addr_i[4:0] == 5'h0e;
  assign _218_ = csr_addr_i[4:0] == 5'h0d;
  assign _219_ = csr_addr_i[4:0] == 5'h0c;
  assign _220_ = csr_addr_i[4:0] == 5'h0b;
  assign _221_ = csr_addr_i[4:0] == 5'h0a;
  assign _222_ = csr_addr_i[4:0] == 5'h09;
  assign _223_ = csr_addr_i[4:0] == 5'h08;
  assign _224_ = csr_addr_i[4:0] == 5'h07;
  assign _225_ = csr_addr_i[4:0] == 5'h06;
  assign _226_ = csr_addr_i[4:0] == 5'h05;
  assign _227_ = csr_addr_i[4:0] == 5'h04;
  assign _228_ = csr_addr_i[4:0] == 5'h03;
  assign _229_ = csr_addr_i[4:0] == 5'h02;
  assign _230_ = csr_addr_i[4:0] == 5'h01;
  assign _231_ = ! csr_addr_i[4:0];
  function [0:0] _510_;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _510_ = b[0:0];
      16'b??????????????1?:
        _510_ = b[1:1];
      16'b?????????????1??:
        _510_ = b[2:2];
      16'b????????????1???:
        _510_ = b[3:3];
      16'b???????????1????:
        _510_ = b[4:4];
      16'b??????????1?????:
        _510_ = b[5:5];
      16'b?????????1??????:
        _510_ = b[6:6];
      16'b????????1???????:
        _510_ = b[7:7];
      16'b???????1????????:
        _510_ = b[8:8];
      16'b??????1?????????:
        _510_ = b[9:9];
      16'b?????1??????????:
        _510_ = b[10:10];
      16'b????1???????????:
        _510_ = b[11:11];
      16'b???1????????????:
        _510_ = b[12:12];
      16'b??1?????????????:
        _510_ = b[13:13];
      16'b?1??????????????:
        _510_ = b[14:14];
      16'b1???????????????:
        _510_ = b[15:15];
      default:
        _510_ = a;
    endcase
  endfunction
  assign csr_rdata_o[21] = _510_(1'h0, { hart_id_i[21], mstatus_q[0], mie_q[5], mscratch_q[21], mtvec_q[21], mepc_q[21], _240_[16], mtval_q[21], irq_fast_i[5], dcsr_q[21], depc_q[21], dscratch0_q[21], dscratch1_q[21], _012_[21], _011_[21], _011_[53] }, { _197_, _179_, _194_, _193_, _189_, _192_, _191_, _190_, _198_, _178_, _188_, _187_, _186_, _196_, _183_, _181_ });
  assign _186_ = csr_addr_i == 12'h7b3;
  assign _187_ = csr_addr_i == 12'h7b2;
  assign _188_ = csr_addr_i == 12'h7b1;
  assign _178_ = csr_addr_i == 12'h7b0;
  assign _105_ = csr_addr_i == 12'h3bf;
  assign _104_ = csr_addr_i == 12'h3be;
  assign _103_ = csr_addr_i == 12'h3bd;
  assign _102_ = csr_addr_i == 12'h3bc;
  assign _101_ = csr_addr_i == 12'h3bb;
  assign _100_ = csr_addr_i == 12'h3ba;
  assign _099_ = csr_addr_i == 12'h3b9;
  assign _098_ = csr_addr_i == 12'h3b8;
  assign _097_ = csr_addr_i == 12'h3b7;
  assign _096_ = csr_addr_i == 12'h3b6;
  assign _095_ = csr_addr_i == 12'h3b5;
  assign _094_ = csr_addr_i == 12'h3b4;
  assign _093_ = csr_addr_i == 12'h3b3;
  assign _092_ = csr_addr_i == 12'h3b2;
  assign _091_ = csr_addr_i == 12'h3b1;
  assign _090_ = csr_addr_i == 12'h3b0;
  assign _089_ = csr_addr_i == 12'h3a3;
  assign _088_ = csr_addr_i == 12'h3a2;
  assign _087_ = csr_addr_i == 12'h3a1;
  assign _086_ = csr_addr_i == 12'h3a0;
  assign _198_ = csr_addr_i == 12'h344;
  assign _190_ = csr_addr_i == 12'h343;
  assign _191_ = csr_addr_i == 12'h342;
  assign _192_ = csr_addr_i == 12'h341;
  assign _189_ = csr_addr_i == 12'h305;
  assign _193_ = csr_addr_i == 12'h340;
  assign _194_ = csr_addr_i == 12'h304;
  assign _179_ = csr_addr_i == 12'h300;
  assign _197_ = csr_addr_i == 12'hf14;
  assign _182_[1] = csr_addr_i == 12'hb02;
  assign _182_[10] = csr_addr_i == 12'hb0b;
  assign _182_[11] = csr_addr_i == 12'hb0c;
  assign _182_[12] = csr_addr_i == 12'hb0d;
  assign _182_[13] = csr_addr_i == 12'hb0e;
  assign _182_[14] = csr_addr_i == 12'hb0f;
  assign _182_[15] = csr_addr_i == 12'hb10;
  assign _182_[16] = csr_addr_i == 12'hb11;
  assign _182_[17] = csr_addr_i == 12'hb12;
  assign _182_[18] = csr_addr_i == 12'hb13;
  assign _182_[19] = csr_addr_i == 12'hb14;
  assign _182_[2] = csr_addr_i == 12'hb03;
  assign _182_[20] = csr_addr_i == 12'hb15;
  assign _182_[21] = csr_addr_i == 12'hb16;
  assign _182_[22] = csr_addr_i == 12'hb17;
  assign _182_[23] = csr_addr_i == 12'hb18;
  assign _182_[24] = csr_addr_i == 12'hb19;
  assign _182_[25] = csr_addr_i == 12'hb1a;
  assign _182_[26] = csr_addr_i == 12'hb1b;
  assign _182_[27] = csr_addr_i == 12'hb1c;
  assign _182_[28] = csr_addr_i == 12'hb1d;
  assign _182_[29] = csr_addr_i == 12'hb1e;
  assign _182_[3] = csr_addr_i == 12'hb04;
  assign _182_[30] = csr_addr_i == 12'hb1f;
  assign _182_[4] = csr_addr_i == 12'hb05;
  assign _182_[5] = csr_addr_i == 12'hb06;
  assign _182_[6] = csr_addr_i == 12'hb07;
  assign _182_[7] = csr_addr_i == 12'hb08;
  assign _182_[8] = csr_addr_i == 12'hb09;
  assign _182_[9] = csr_addr_i == 12'hb0a;
  assign _195_[0] = csr_addr_i == 12'h323;
  assign _195_[1] = csr_addr_i == 12'h324;
  assign _195_[10] = csr_addr_i == 12'h32d;
  assign _195_[11] = csr_addr_i == 12'h32e;
  assign _195_[12] = csr_addr_i == 12'h32f;
  assign _195_[13] = csr_addr_i == 12'h330;
  assign _195_[14] = csr_addr_i == 12'h331;
  assign _195_[15] = csr_addr_i == 12'h332;
  assign _195_[16] = csr_addr_i == 12'h333;
  assign _195_[17] = csr_addr_i == 12'h334;
  assign _195_[18] = csr_addr_i == 12'h335;
  assign _195_[19] = csr_addr_i == 12'h336;
  assign _195_[2] = csr_addr_i == 12'h325;
  assign _195_[20] = csr_addr_i == 12'h337;
  assign _195_[21] = csr_addr_i == 12'h338;
  assign _195_[22] = csr_addr_i == 12'h339;
  assign _195_[23] = csr_addr_i == 12'h33a;
  assign _195_[24] = csr_addr_i == 12'h33b;
  assign _195_[25] = csr_addr_i == 12'h33c;
  assign _195_[26] = csr_addr_i == 12'h33d;
  assign _195_[27] = csr_addr_i == 12'h33e;
  assign _195_[28] = csr_addr_i == 12'h33f;
  assign _195_[3] = csr_addr_i == 12'h326;
  assign _195_[4] = csr_addr_i == 12'h327;
  assign _195_[5] = csr_addr_i == 12'h328;
  assign _195_[6] = csr_addr_i == 12'h329;
  assign _195_[7] = csr_addr_i == 12'h32a;
  assign _195_[8] = csr_addr_i == 12'h32b;
  assign _195_[9] = csr_addr_i == 12'h32c;
  assign _005_ = _080_ ? 1'h0 : 1'h1;
  assign _233_ = csr_addr_i == 12'h7c1;
  assign _184_ = csr_addr_i == 12'h7c0;
  assign _180_[0] = csr_addr_i == 12'hb80;
  assign _180_[1] = csr_addr_i == 12'hb82;
  assign _180_[10] = csr_addr_i == 12'hb8b;
  assign _180_[11] = csr_addr_i == 12'hb8c;
  assign _180_[12] = csr_addr_i == 12'hb8d;
  assign _180_[13] = csr_addr_i == 12'hb8e;
  assign _180_[14] = csr_addr_i == 12'hb8f;
  assign _180_[15] = csr_addr_i == 12'hb90;
  assign _180_[16] = csr_addr_i == 12'hb91;
  assign _180_[17] = csr_addr_i == 12'hb92;
  assign _180_[18] = csr_addr_i == 12'hb93;
  assign _180_[19] = csr_addr_i == 12'hb94;
  assign _180_[2] = csr_addr_i == 12'hb83;
  assign _180_[20] = csr_addr_i == 12'hb95;
  assign _180_[21] = csr_addr_i == 12'hb96;
  assign _180_[22] = csr_addr_i == 12'hb97;
  assign _180_[23] = csr_addr_i == 12'hb98;
  assign _180_[24] = csr_addr_i == 12'hb99;
  assign _180_[25] = csr_addr_i == 12'hb9a;
  assign _180_[26] = csr_addr_i == 12'hb9b;
  assign _180_[27] = csr_addr_i == 12'hb9c;
  assign _180_[28] = csr_addr_i == 12'hb9d;
  assign _180_[29] = csr_addr_i == 12'hb9e;
  assign _180_[3] = csr_addr_i == 12'hb84;
  assign _180_[30] = csr_addr_i == 12'hb9f;
  assign _180_[4] = csr_addr_i == 12'hb85;
  assign _180_[5] = csr_addr_i == 12'hb86;
  assign _180_[6] = csr_addr_i == 12'hb87;
  assign _180_[7] = csr_addr_i == 12'hb88;
  assign _180_[8] = csr_addr_i == 12'hb89;
  assign _180_[9] = csr_addr_i == 12'hb8a;
  assign _182_[0] = csr_addr_i == 12'hb00;
  assign _234_ = csr_addr_i == 12'h306;
  assign _235_[0] = csr_addr_i == 12'h30a;
  assign _235_[1] = csr_addr_i == 12'h31a;
  assign _236_ = csr_addr_i == 12'h310;
  assign _237_ = csr_addr_i == 12'hf15;
  assign _238_ = csr_addr_i == 12'hf13;
  assign _239_ = csr_addr_i == 12'hf11;
  assign dbg_csr = _082_ ? 1'h1 : 1'h0;
  assign irq_pending_o = | irqs_o;
  assign _145_ = $signed(_139_) < 0 ? 1'h1 << - _139_ : 1'h1 >> _139_;
  assign \mhpmcounter[2]  = _076_ ? minstret_next : minstret_raw;
  assign _240_ = mcause_q[6] ? 26'h3ffffff : 26'h0000000;
  assign mtvec_d = csr_mtvec_init_i ? { boot_addr_i[31:8], 8'h01 } : { csr_wdata_int[31:8], 8'h01 };
  assign priv_mode_lsu_o = mstatus_q[1] ? mstatus_q[3:2] : priv_lvl_q;
  \$paramod$d7b51dbfb2e8246ec0696b5c7e6a6ef4e9dcb0cd\ibex_counter  mcycle_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(_074_),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(\mhpmcounter[0] ),
    .counter_we_i(mhpmcounter_we[0]),
    .counterh_we_i(mhpmcounterh_we[0]),
    .rst_ni(rst_ni)
  );
  \$paramod$0e8af16ac611542545c79f92c6ed357e82273047\ibex_counter  minstret_counter_i (
    .clk_i(clk_i),
    .counter_inc_i(_075_),
    .counter_val_i(csr_wdata_int),
    .counter_val_o(minstret_raw),
    .counter_val_upd_o(minstret_next),
    .counter_we_i(mhpmcounter_we[2]),
    .counterh_we_i(mhpmcounterh_we[2]),
    .rst_ni(rst_ni)
  );
  \$paramod$584cd83b7252dd2a0d1c3e78791b884a85cfd813\ibex_csr  u_cpuctrlsts_part_csr (
    .clk_i(clk_i),
    .rd_data_o(cpuctrlsts_part_q),
    .rd_error_o(cpuctrlsts_part_err),
    .rst_ni(rst_ni),
    .wr_data_i(cpuctrlsts_part_d),
    .wr_en_i(cpuctrlsts_part_we)
  );
  \$paramod$6b0cd16df8f60d8f4f3293fe0e151f68f42046a8\ibex_csr  u_dcsr_csr (
    .clk_i(clk_i),
    .rd_data_o(dcsr_q),
    .rst_ni(rst_ni),
    .wr_data_i(dcsr_d),
    .wr_en_i(dcsr_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_depc_csr (
    .clk_i(clk_i),
    .rd_data_o(depc_q),
    .rst_ni(rst_ni),
    .wr_data_i(depc_d),
    .wr_en_i(depc_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_dscratch0_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch0_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch0_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_dscratch1_csr (
    .clk_i(clk_i),
    .rd_data_o(dscratch1_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(dscratch1_en)
  );
  \$paramod$8cdeaec9f14809cb51f63039b8d591bee7b08a85\ibex_csr  u_mcause_csr (
    .clk_i(clk_i),
    .rd_data_o(mcause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_d),
    .wr_en_i(mcause_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_mepc_csr (
    .clk_i(clk_i),
    .rd_data_o(mepc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_d),
    .wr_en_i(mepc_en)
  );
  \$paramod$2b059ceb396aa1a4580cfca7b7f87b2e9d5e9ff7\ibex_csr  u_mie_csr (
    .clk_i(clk_i),
    .rd_data_o(mie_q),
    .rst_ni(rst_ni),
    .wr_data_i({ csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[30:16] }),
    .wr_en_i(mie_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_mscratch_csr (
    .clk_i(clk_i),
    .rd_data_o(mscratch_q),
    .rst_ni(rst_ni),
    .wr_data_i(csr_wdata_int),
    .wr_en_i(mscratch_en)
  );
  \$paramod$8cdeaec9f14809cb51f63039b8d591bee7b08a85\ibex_csr  u_mstack_cause_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_cause_q),
    .rst_ni(rst_ni),
    .wr_data_i(mcause_q),
    .wr_en_i(mstack_en)
  );
  \$paramod$4a237c9b6d1f84d9ddca8fe2aafcfcb32d0a6882\ibex_csr  u_mstack_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_q),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_q[4:2]),
    .wr_en_i(mstack_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_mstack_epc_csr (
    .clk_i(clk_i),
    .rd_data_o(mstack_epc_q),
    .rst_ni(rst_ni),
    .wr_data_i(mepc_q),
    .wr_en_i(mstack_en)
  );
  \$paramod$1856f3122dfb4c7484e38d1258cb6e342e4f338e\ibex_csr  u_mstatus_csr (
    .clk_i(clk_i),
    .rd_data_o(mstatus_q),
    .rd_error_o(mstatus_err),
    .rst_ni(rst_ni),
    .wr_data_i(mstatus_d),
    .wr_en_i(mstatus_en)
  );
  \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr  u_mtval_csr (
    .clk_i(clk_i),
    .rd_data_o(mtval_q),
    .rst_ni(rst_ni),
    .wr_data_i(mtval_d),
    .wr_en_i(mtval_en)
  );
  \$paramod$1eaadcfb69924342b10bf40ee9572283f5a3eb24\ibex_csr  u_mtvec_csr (
    .clk_i(clk_i),
    .rd_data_o(mtvec_q),
    .rd_error_o(mtvec_err),
    .rst_ni(rst_ni),
    .wr_data_i(mtvec_d),
    .wr_en_i(mtvec_en)
  );
  assign _000_[5:0] = cpuctrlsts_part_d[5:0];
  assign { _002_[31:9], _002_[5:2] } = { dcsr_d[31:9], dcsr_d[5:2] };
  assign _008_[0] = mstatus_d[0];
  assign _015_[8:6] = dcsr_q[8:6];
  assign cpuctrlsts_ic_scr_key_err = 1'h0;
  assign cpuctrlsts_ic_scr_key_valid_q = 1'h0;
  assign cpuctrlsts_part_wdata = { csr_wdata_int[7:6], 6'h00 };
  assign cpuctrlsts_part_wdata_raw = csr_wdata_int[7:0];
  assign csr_addr = csr_addr_i;
  assign csr_depc_o = depc_q;
  assign csr_mepc_o = mepc_q;
  assign csr_mstatus_mie_o = mstatus_q[5];
  assign csr_mstatus_tw_o = mstatus_q[0];
  assign csr_mtval_o = mtval_q;
  assign csr_mtvec_o = mtvec_q;
  assign csr_pmp_addr_o = 136'h0000000000000000000000000000000000;
  assign csr_pmp_cfg_o = 24'h000000;
  assign csr_pmp_mseccfg_o = 3'h0;
  assign csr_rdata_int = csr_rdata_o;
  assign data_ind_timing_o = cpuctrlsts_part_q[1];
  assign debug_ebreakm_o = dcsr_q[15];
  assign debug_ebreaku_o = dcsr_q[12];
  assign debug_single_step_o = dcsr_q[2];
  assign dummy_instr_en_o = cpuctrlsts_part_q[2];
  assign dummy_instr_mask_o = cpuctrlsts_part_q[5:3];
  assign dummy_instr_seed_en_o = 1'h0;
  assign dummy_instr_seed_o = 32'd0;
  assign \g_mcountinhibit_reduced.unused_mhphcounter_incr  = { 19'h00000, div_wait_i, mul_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i };
  assign \g_mcountinhibit_reduced.unused_mhphcounter_we  = mhpmcounter_we[31:3];
  assign \g_mcountinhibit_reduced.unused_mhphcounterh_we  = mhpmcounterh_we[31:3];
  assign \gen_cntrs[7].gen_unimp.gen_no_compressed_instr_cnt.unused_instr_ret_compressed_spec_i  = instr_ret_compressed_spec_i;
  assign \gen_no_dit.unused_dit  = csr_wdata_int[1];
  assign \gen_no_dummy.unused_dummy_en  = csr_wdata_int[2];
  assign \gen_no_dummy.unused_dummy_mask  = csr_wdata_int[5:3];
  assign \gen_no_icache.unused_ic_scr_key_valid  = ic_scr_key_valid_i;
  assign \gen_no_icache.unused_icen  = csr_wdata_int[0];
  assign mcountinhibit = { 29'h00000000, mcountinhibit_q[2], 1'h0, mcountinhibit_q[0] };
  assign mcountinhibit_q[1] = 1'h0;
  assign \mhpmcounter[10]  = 64'h0000000000000000;
  assign \mhpmcounter[11]  = 64'h0000000000000000;
  assign \mhpmcounter[12]  = 64'h0000000000000000;
  assign \mhpmcounter[13]  = 64'h0000000000000000;
  assign \mhpmcounter[14]  = 64'h0000000000000000;
  assign \mhpmcounter[15]  = 64'h0000000000000000;
  assign \mhpmcounter[16]  = 64'h0000000000000000;
  assign \mhpmcounter[17]  = 64'h0000000000000000;
  assign \mhpmcounter[18]  = 64'h0000000000000000;
  assign \mhpmcounter[19]  = 64'h0000000000000000;
  assign \mhpmcounter[1]  = 64'h0000000000000000;
  assign \mhpmcounter[20]  = 64'h0000000000000000;
  assign \mhpmcounter[21]  = 64'h0000000000000000;
  assign \mhpmcounter[22]  = 64'h0000000000000000;
  assign \mhpmcounter[23]  = 64'h0000000000000000;
  assign \mhpmcounter[24]  = 64'h0000000000000000;
  assign \mhpmcounter[25]  = 64'h0000000000000000;
  assign \mhpmcounter[26]  = 64'h0000000000000000;
  assign \mhpmcounter[27]  = 64'h0000000000000000;
  assign \mhpmcounter[28]  = 64'h0000000000000000;
  assign \mhpmcounter[29]  = 64'h0000000000000000;
  assign \mhpmcounter[30]  = 64'h0000000000000000;
  assign \mhpmcounter[31]  = 64'h0000000000000000;
  assign \mhpmcounter[3]  = 64'h0000000000000000;
  assign \mhpmcounter[4]  = 64'h0000000000000000;
  assign \mhpmcounter[5]  = 64'h0000000000000000;
  assign \mhpmcounter[6]  = 64'h0000000000000000;
  assign \mhpmcounter[7]  = 64'h0000000000000000;
  assign \mhpmcounter[8]  = 64'h0000000000000000;
  assign \mhpmcounter[9]  = 64'h0000000000000000;
  assign mhpmcounter_idx = csr_addr_i[4:0];
  assign mhpmcounter_incr = { 19'h00000, div_wait_i, mul_wait_i, instr_ret_compressed_i, branch_taken_i, branch_i, jump_i, mem_store_i, mem_load_i, iside_wait_i, dside_wait_i, instr_ret_i, 2'h1 };
  assign \mhpmevent[0]  = 32'd0;
  assign \mhpmevent[10]  = 32'd0;
  assign \mhpmevent[11]  = 32'd0;
  assign \mhpmevent[12]  = 32'd0;
  assign \mhpmevent[13]  = 32'd0;
  assign \mhpmevent[14]  = 32'd0;
  assign \mhpmevent[15]  = 32'd0;
  assign \mhpmevent[16]  = 32'd0;
  assign \mhpmevent[17]  = 32'd0;
  assign \mhpmevent[18]  = 32'd0;
  assign \mhpmevent[19]  = 32'd0;
  assign \mhpmevent[1]  = 32'd0;
  assign \mhpmevent[20]  = 32'd0;
  assign \mhpmevent[21]  = 32'd0;
  assign \mhpmevent[22]  = 32'd0;
  assign \mhpmevent[23]  = 32'd0;
  assign \mhpmevent[24]  = 32'd0;
  assign \mhpmevent[25]  = 32'd0;
  assign \mhpmevent[26]  = 32'd0;
  assign \mhpmevent[27]  = 32'd0;
  assign \mhpmevent[28]  = 32'd0;
  assign \mhpmevent[29]  = 32'd0;
  assign \mhpmevent[2]  = 32'd0;
  assign \mhpmevent[30]  = 32'd0;
  assign \mhpmevent[31]  = 32'd0;
  assign \mhpmevent[3]  = 32'd0;
  assign \mhpmevent[4]  = 32'd0;
  assign \mhpmevent[5]  = 32'd0;
  assign \mhpmevent[6]  = 32'd0;
  assign \mhpmevent[7]  = 32'd0;
  assign \mhpmevent[8]  = 32'd0;
  assign \mhpmevent[9]  = 32'd0;
  assign mie_d = { csr_wdata_int[3], csr_wdata_int[7], csr_wdata_int[11], csr_wdata_int[30:16] };
  assign mip = { irq_software_i, irq_timer_i, irq_external_i, irq_fast_i };
  assign mstack_cause_d = mcause_q;
  assign mstack_d = mstatus_q[4:2];
  assign mstack_epc_d = mepc_q;
  assign \pmp_addr_rdata[0]  = 32'd0;
  assign \pmp_addr_rdata[10]  = 32'd0;
  assign \pmp_addr_rdata[11]  = 32'd0;
  assign \pmp_addr_rdata[12]  = 32'd0;
  assign \pmp_addr_rdata[13]  = 32'd0;
  assign \pmp_addr_rdata[14]  = 32'd0;
  assign \pmp_addr_rdata[15]  = 32'd0;
  assign \pmp_addr_rdata[1]  = 32'd0;
  assign \pmp_addr_rdata[2]  = 32'd0;
  assign \pmp_addr_rdata[3]  = 32'd0;
  assign \pmp_addr_rdata[4]  = 32'd0;
  assign \pmp_addr_rdata[5]  = 32'd0;
  assign \pmp_addr_rdata[6]  = 32'd0;
  assign \pmp_addr_rdata[7]  = 32'd0;
  assign \pmp_addr_rdata[8]  = 32'd0;
  assign \pmp_addr_rdata[9]  = 32'd0;
  assign \pmp_cfg_rdata[0]  = 8'h00;
  assign \pmp_cfg_rdata[10]  = 8'h00;
  assign \pmp_cfg_rdata[11]  = 8'h00;
  assign \pmp_cfg_rdata[12]  = 8'h00;
  assign \pmp_cfg_rdata[13]  = 8'h00;
  assign \pmp_cfg_rdata[14]  = 8'h00;
  assign \pmp_cfg_rdata[15]  = 8'h00;
  assign \pmp_cfg_rdata[1]  = 8'h00;
  assign \pmp_cfg_rdata[2]  = 8'h00;
  assign \pmp_cfg_rdata[3]  = 8'h00;
  assign \pmp_cfg_rdata[4]  = 8'h00;
  assign \pmp_cfg_rdata[5]  = 8'h00;
  assign \pmp_cfg_rdata[6]  = 8'h00;
  assign \pmp_cfg_rdata[7]  = 8'h00;
  assign \pmp_cfg_rdata[8]  = 8'h00;
  assign \pmp_cfg_rdata[9]  = 8'h00;
  assign pmp_csr_err = 1'h0;
  assign pmp_mseccfg = 3'h0;
  assign priv_mode_id_o = priv_lvl_q;
  assign tmatch_control_rdata = 32'd0;
  assign tmatch_value_rdata = 32'd0;
  assign trigger_match_o = 1'h0;
  assign tselect_rdata = 32'd0;
  assign unused_boot_addr = boot_addr_i[7:0];
  assign unused_csr_addr = csr_addr_i[7:5];
  assign unused_mhpmcounter_incr_1 = 1'h0;
  assign unused_mhpmcounter_we_1 = mhpmcounter_we[1];
  assign unused_mhpmcounterh_we_1 = mhpmcounterh_we[1];
endmodule

module \$paramod$69bd9f1779f5787819689c910adb47212d141491\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [31:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 32'd0;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$6b0cd16df8f60d8f4f3293fe0e151f68f42046a8\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [31:0] rd_data_o;
  wire [31:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [31:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [31:0] wr_data_i;
  wire [31:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 32'd1073741827;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$6e2e0a12ad0ebef4b29bd0e1dd7b1a205c645b47\prim_clock_gating (clk_i, en_i, test_en_i, clk_o);
  input clk_i;
  wire clk_i;
  output clk_o;
  wire clk_o;
  input en_i;
  wire en_i;
  input test_en_i;
  wire test_en_i;
  \$paramod\prim_generic_clock_gating\NoFpgaGate=1'0\FpgaBufGlobal=1'1  \gen_generic.u_impl_generic  (
    .clk_i(clk_i),
    .clk_o(clk_o),
    .en_i(en_i),
    .test_en_i(test_en_i)
  );
endmodule

module \$paramod$8cdeaec9f14809cb51f63039b8d591bee7b08a85\ibex_csr (clk_i, rst_ni, wr_data_i, wr_en_i, rd_data_o, rd_error_o);
  input clk_i;
  wire clk_i;
  output [6:0] rd_data_o;
  wire [6:0] rd_data_o;
  output rd_error_o;
  wire rd_error_o;
  reg [6:0] rdata_q;
  input rst_ni;
  wire rst_ni;
  input [6:0] wr_data_i;
  wire [6:0] wr_data_i;
  input wr_en_i;
  wire wr_en_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 7'h00;
    else if (wr_en_i) rdata_q <= wr_data_i;
  assign rd_data_o = rdata_q;
  assign rd_error_o = 1'h0;
endmodule

module \$paramod$91101494017b6f0320aba9e4eea08443360907ca\ibex_compressed_decoder (clk_i, rst_ni, valid_i, instr_i, instr_o, is_compressed_o, illegal_instr_o);
  wire _000_;
  wire [31:0] _001_;
  wire _002_;
  wire [31:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire [31:0] _007_;
  wire _008_;
  wire [31:0] _009_;
  wire _010_;
  wire [31:0] _011_;
  wire _012_;
  wire [31:0] _013_;
  wire _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire _017_;
  wire [31:0] _018_;
  wire _019_;
  wire [31:0] _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire [3:0] _034_;
  wire _035_;
  wire _036_;
  wire [3:0] _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire [1:0] _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  input clk_i;
  wire clk_i;
  output illegal_instr_o;
  wire illegal_instr_o;
  input [31:0] instr_i;
  wire [31:0] instr_i;
  output [31:0] instr_o;
  wire [31:0] instr_o;
  output is_compressed_o;
  wire is_compressed_o;
  input rst_ni;
  wire rst_ni;
  wire unused_valid;
  input valid_i;
  wire valid_i;
  assign _021_ = | { _039_, _040_, _041_, _042_ };
  assign _022_ = | { _032_, _036_ };
  assign _023_ = | { _032_, _033_, _034_[3:2], _034_[0], _036_ };
  assign _024_ = instr_i[11:7] == 5'h02;
  assign _025_ = ! { instr_i[12], instr_i[6:2] };
  assign _026_ = ! instr_i[11:7];
  assign _027_ = ! instr_i[12:5];
  assign _028_ = | instr_i[6:2];
  assign is_compressed_o = instr_i[1:0] != 2'h3;
  assign _029_ = ~ instr_i[15];
  assign _003_ = _026_ ? 32'd1048691 : { 12'h000, instr_i[11:7], 15'h00e7 };
  assign _001_ = _028_ ? { 7'h00, instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h33 } : _003_;
  assign _020_ = _028_ ? { 7'h00, instr_i[6:2], 8'h00, instr_i[11:7], 7'h33 } : { 12'h000, instr_i[11:7], 15'h0067 };
  assign _005_ = _028_ ? 1'h0 : _002_;
  assign _004_ = instr_i[12] ? 1'h0 : _005_;
  assign _018_ = instr_i[12] ? _001_ : _020_;
  assign _002_ = _026_ ? 1'h1 : 1'h0;
  assign _000_ = instr_i[12] ? 1'h1 : 1'h0;
  function [0:0] _071_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _071_ = b[0:0];
      5'b???1?:
        _071_ = b[1:1];
      5'b??1??:
        _071_ = b[2:2];
      5'b?1???:
        _071_ = b[3:3];
      5'b1????:
        _071_ = b[4:4];
      default:
        _071_ = a;
    endcase
  endfunction
  assign _019_ = _071_(1'hx, { _000_, _002_, _004_, 2'h1 }, { _033_, _032_, _030_, _036_, _035_ });
  function [31:0] _072_;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _072_ = b[31:0];
      5'b???1?:
        _072_ = b[63:32];
      5'b??1??:
        _072_ = b[95:64];
      5'b?1???:
        _072_ = b[127:96];
      5'b1????:
        _072_ = b[159:128];
      default:
        _072_ = a;
    endcase
  endfunction
  assign _016_ = _072_(32'hxxxxxxxx, { 7'h00, instr_i[6:2], instr_i[11:7], 3'h1, instr_i[11:7], 11'h130, instr_i[3:2], instr_i[12], instr_i[6:4], 10'h012, instr_i[11:7], 7'h03, _018_, 4'h0, instr_i[8:7], instr_i[12], instr_i[6:2], 8'h12, instr_i[11:9], 9'h023, instr_i }, { _033_, _032_, _030_, _036_, _035_ });
  assign _035_ = | _034_;
  function [31:0] _074_;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _074_ = b[31:0];
      5'b???1?:
        _074_ = b[63:32];
      5'b??1??:
        _074_ = b[95:64];
      5'b?1???:
        _074_ = b[127:96];
      5'b1????:
        _074_ = b[159:128];
      default:
        _074_ = a;
    endcase
  endfunction
  assign _015_ = _074_(32'hxxxxxxxx, { 9'h081, instr_i[4:2], 2'h1, instr_i[9:7], 5'h01, instr_i[9:7], 16'h6601, instr_i[4:2], 2'h1, instr_i[9:7], 5'h11, instr_i[9:7], 16'h6601, instr_i[4:2], 2'h1, instr_i[9:7], 5'h19, instr_i[9:7], 16'h6601, instr_i[4:2], 2'h1, instr_i[9:7], 5'h1d, instr_i[9:7], 7'h33, instr_i }, { _042_, _041_, _040_, _039_, _038_ });
  function [0:0] _075_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _075_ = b[0:0];
      2'b1?:
        _075_ = b[1:1];
      default:
        _075_ = a;
    endcase
  endfunction
  assign _017_ = _075_(1'hx, 2'h1, { _021_, _038_ });
  assign _038_ = | _037_;
  assign _037_[0] = { instr_i[12], instr_i[6:5] } == 3'h4;
  assign _037_[1] = { instr_i[12], instr_i[6:5] } == 3'h5;
  assign _037_[2] = { instr_i[12], instr_i[6:5] } == 3'h6;
  assign _037_[3] = { instr_i[12], instr_i[6:5] } == 3'h7;
  assign _039_ = { instr_i[12], instr_i[6:5] } == 3'h3;
  assign _040_ = { instr_i[12], instr_i[6:5] } == 3'h2;
  assign _041_ = { instr_i[12], instr_i[6:5] } == 3'h1;
  assign _042_ = ! { instr_i[12], instr_i[6:5] };
  function [0:0] _085_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _085_ = b[0:0];
      3'b?1?:
        _085_ = b[1:1];
      3'b1??:
        _085_ = b[2:2];
      default:
        _085_ = a;
    endcase
  endfunction
  assign _014_ = _085_(1'hx, { _000_, 1'h0, _017_ }, { _046_, _047_, _043_ });
  function [31:0] _086_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _086_ = b[31:0];
      3'b?1?:
        _086_ = b[63:32];
      3'b1??:
        _086_ = b[95:64];
      default:
        _086_ = a;
    endcase
  endfunction
  assign _013_ = _086_(32'hxxxxxxxx, { 1'h0, instr_i[10], 5'h00, instr_i[6:2], 2'h1, instr_i[9:7], 5'h15, instr_i[9:7], 7'h13, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 2'h1, instr_i[9:7], 5'h1d, instr_i[9:7], 7'h13, _015_ }, { _046_, _047_, _043_ });
  assign _043_ = instr_i[11:10] == 2'h3;
  assign _047_ = instr_i[11:10] == 2'h2;
  assign _046_ = | _045_;
  assign _045_[0] = ! instr_i[11:10];
  assign _045_[1] = instr_i[11:10] == 2'h1;
  assign _012_ = _025_ ? 1'h1 : 1'h0;
  assign _011_ = _024_ ? { instr_i[12], instr_i[12], instr_i[12], instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 24'h010113 } : { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 7'h37 };
  function [31:0] _094_;
    input [31:0] a;
    input [191:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _094_ = b[31:0];
      6'b????1?:
        _094_ = b[63:32];
      6'b???1??:
        _094_ = b[95:64];
      6'b??1???:
        _094_ = b[127:96];
      6'b?1????:
        _094_ = b[159:128];
      6'b1?????:
        _094_ = b[191:160];
      default:
        _094_ = a;
    endcase
  endfunction
  assign _009_ = _094_(32'hxxxxxxxx, { instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], instr_i[11:7], 3'h0, instr_i[11:7], 7'h13, instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], 4'h0, _029_, 7'h6f, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:2], 8'h00, instr_i[11:7], 7'h13, _011_, _013_, instr_i[12], instr_i[12], instr_i[12], instr_i[12], instr_i[6:5], instr_i[2], 7'h01, instr_i[9:7], 2'h0, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], 7'h63 }, { _033_, _049_, _032_, _034_[1], _030_, _048_ });
  assign _048_ = | { _034_[3], _036_ };
  assign _049_ = | { _034_[2], _034_[0] };
  function [0:0] _097_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _097_ = b[0:0];
      3'b?1?:
        _097_ = b[1:1];
      3'b1??:
        _097_ = b[2:2];
      default:
        _097_ = a;
    endcase
  endfunction
  assign _010_ = _097_(1'hx, { _012_, _014_, 1'h0 }, { _034_[1], _030_, _023_ });
  assign _008_ = _027_ ? 1'h1 : 1'h0;
  function [0:0] _099_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _099_ = b[0:0];
      3'b?1?:
        _099_ = b[1:1];
      3'b1??:
        _099_ = b[2:2];
      default:
        _099_ = a;
    endcase
  endfunction
  assign _006_ = _099_(1'hx, { _008_, 2'h1 }, { _033_, _022_, _051_ });
  assign _051_ = | { _030_, _034_ };
  function [31:0] _101_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _101_ = b[31:0];
      4'b??1?:
        _101_ = b[63:32];
      4'b?1??:
        _101_ = b[95:64];
      4'b1???:
        _101_ = b[127:96];
      default:
        _101_ = a;
    endcase
  endfunction
  assign _007_ = _101_(32'hxxxxxxxx, { 2'h0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 12'h041, instr_i[4:2], 12'h260, instr_i[5], instr_i[12:10], instr_i[6], 4'h1, instr_i[9:7], 5'h09, instr_i[4:2], 12'h060, instr_i[5], instr_i[12], 2'h1, instr_i[4:2], 2'h1, instr_i[9:7], 3'h2, instr_i[11:10], instr_i[6], 9'h023, instr_i }, { _033_, _032_, _036_, _051_ });
  assign _034_[0] = instr_i[15:13] == 3'h1;
  assign _034_[1] = instr_i[15:13] == 3'h3;
  assign _030_ = instr_i[15:13] == 3'h4;
  assign _034_[2] = instr_i[15:13] == 3'h5;
  assign _034_[3] = instr_i[15:13] == 3'h7;
  assign _036_ = instr_i[15:13] == 3'h6;
  assign _032_ = instr_i[15:13] == 3'h2;
  assign _033_ = ! instr_i[15:13];
  function [0:0] _110_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _110_ = b[0:0];
      4'b??1?:
        _110_ = b[1:1];
      4'b?1??:
        _110_ = b[2:2];
      4'b1???:
        _110_ = b[3:3];
      default:
        _110_ = a;
    endcase
  endfunction
  assign illegal_instr_o = _110_(1'hx, { _006_, _010_, _019_, 1'h0 }, { _050_, _044_, _031_, _052_ });
  assign _044_ = instr_i[1:0] == 2'h1;
  assign _050_ = ! instr_i[1:0];
  function [31:0] _113_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _113_ = b[31:0];
      4'b??1?:
        _113_ = b[63:32];
      4'b?1??:
        _113_ = b[95:64];
      4'b1???:
        _113_ = b[127:96];
      default:
        _113_ = a;
    endcase
  endfunction
  assign instr_o = _113_(32'hxxxxxxxx, { _007_, _009_, _016_, instr_i }, { _050_, _044_, _031_, _052_ });
  assign _052_ = instr_i[1:0] == 2'h3;
  assign _031_ = instr_i[1:0] == 2'h2;
  assign unused_valid = valid_i;
endmodule

module \$paramod$9d25aeb654852e23119bf7a06ef985a6167b1dc5\ibex_alu (operator_i, operand_a_i, operand_b_i, instr_first_cycle_i, multdiv_operand_a_i, multdiv_operand_b_i, multdiv_sel_i, imd_val_q_i, imd_val_d_o, imd_val_we_o, adder_result_o, adder_result_ext_o, result_o, comparison_result_o, is_equal_result_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire [7:0] _09_;
  wire _10_;
  wire [4:0] _11_;
  wire _12_;
  wire [4:0] _13_;
  wire _14_;
  wire [5:0] _15_;
  wire _16_;
  wire [31:0] _17_;
  wire [5:0] _18_;
  wire _19_;
  wire [3:0] _20_;
  wire _21_;
  wire _22_;
  wire [32:0] _23_;
  wire [31:0] _24_;
  wire _25_;
  wire _26_;
  wire [32:0] adder_in_a;
  wire [32:0] adder_in_b;
  wire adder_op_a_shift1;
  wire adder_op_a_shift2;
  wire adder_op_a_shift3;
  wire adder_op_b_negate;
  wire [31:0] adder_result;
  output [33:0] adder_result_ext_o;
  wire [33:0] adder_result_ext_o;
  output [31:0] adder_result_o;
  wire [31:0] adder_result_o;
  wire [4:0] bfp_len;
  wire [31:0] bfp_mask;
  wire [31:0] bfp_mask_rev;
  wire [4:0] bfp_off;
  wire bfp_op;
  wire [31:0] bfp_result;
  wire [5:0] bitcnt_result;
  wire [31:0] butterfly_result;
  wire bwlogic_and;
  wire [31:0] bwlogic_and_result;
  wire bwlogic_op_b_negate;
  wire [31:0] bwlogic_operand_b;
  wire bwlogic_or;
  wire [31:0] bwlogic_or_result;
  wire [31:0] bwlogic_result;
  wire [31:0] bwlogic_xor_result;
  wire [31:0] clmul_result;
  wire cmp_result;
  wire cmp_signed;
  output comparison_result_o;
  wire comparison_result_o;
  wire [31:0] \g_no_alu_rvb.unused_butterfly_result ;
  wire [63:0] \g_no_alu_rvb.unused_imd_val_q ;
  wire [31:0] \g_no_alu_rvb.unused_invbutterfly_result ;
  output [63:0] imd_val_d_o;
  wire [63:0] imd_val_d_o;
  input [63:0] imd_val_q_i;
  wire [63:0] imd_val_q_i;
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  input instr_first_cycle_i;
  wire instr_first_cycle_i;
  wire [31:0] invbutterfly_result;
  wire is_equal;
  output is_equal_result_o;
  wire is_equal_result_o;
  wire is_greater_equal;
  wire [31:0] minmax_result;
  input [32:0] multdiv_operand_a_i;
  wire [32:0] multdiv_operand_a_i;
  input [32:0] multdiv_operand_b_i;
  wire [32:0] multdiv_operand_b_i;
  input multdiv_sel_i;
  wire multdiv_sel_i;
  wire [31:0] multicycle_result;
  input [31:0] operand_a_i;
  wire [31:0] operand_a_i;
  wire [31:0] operand_a_rev;
  input [31:0] operand_b_i;
  wire [31:0] operand_b_i;
  wire [32:0] operand_b_neg;
  input [6:0] operator_i;
  wire [6:0] operator_i;
  wire [31:0] pack_result;
  output [31:0] result_o;
  wire [31:0] result_o;
  wire [31:0] rev_result;
  wire [31:0] sext_result;
  wire [5:0] shift_amt;
  wire [5:0] shift_amt_compl;
  wire shift_arith;
  wire shift_funnel;
  wire shift_left;
  wire shift_ones;
  wire [31:0] shift_operand;
  wire [31:0] shift_result;
  wire [32:0] shift_result_ext;
  wire [32:0] shift_result_ext_signed;
  wire [31:0] shift_result_rev;
  wire shift_sbmode;
  wire [31:0] shuffle_result;
  wire [31:0] singlebit_result;
  wire unused_shift_amt_compl;
  wire unused_shift_result_ext;
  wire [31:0] xperm_result;
  reg [0:0] \$auto$proc_rom.cc:150:do_switch$6002  [63:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$6002 [0] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [1] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [2] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [3] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [4] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [5] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [6] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [7] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [8] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [9] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [10] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [11] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [12] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [13] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [14] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [15] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [16] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [17] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [18] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [19] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [20] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [21] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [22] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [23] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [24] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [25] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [26] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [27] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [28] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [29] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [30] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [31] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [32] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [33] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [34] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [35] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [36] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [37] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [38] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [39] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [40] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [41] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [42] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [43] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [44] = 1'h1;
    \$auto$proc_rom.cc:150:do_switch$6002 [45] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [46] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [47] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [48] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [49] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [50] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [51] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [52] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [53] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [54] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [55] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [56] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [57] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [58] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [59] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [60] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [61] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [62] = 1'h0;
    \$auto$proc_rom.cc:150:do_switch$6002 [63] = 1'h0;
  end
  assign _01_ = \$auto$proc_rom.cc:150:do_switch$6002 [operator_i[5:0]];
  assign adder_result_ext_o = { 1'h0, adder_in_a } + { 1'h0, adder_in_b };
  assign _00_ = shift_arith & shift_operand[31];
  assign bwlogic_and_result = operand_a_i & operand_b_i;
  assign operand_b_neg = ~ { operand_b_i, 1'h0 };
  assign is_equal = ! adder_result_ext_o[32:1];
  assign _02_ = ~ adder_result_ext_o[32];
  assign _07_ = ~ is_equal;
  assign _08_ = ~ is_greater_equal;
  assign bwlogic_or_result = operand_a_i | operand_b_i;
  assign bwlogic_or = _03_ | _04_;
  assign bwlogic_and = _05_ | _06_;
  function [31:0] _40_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _40_ = b[31:0];
      4'b??1?:
        _40_ = b[63:32];
      4'b?1??:
        _40_ = b[95:64];
      4'b1???:
        _40_ = b[127:96];
      default:
        _40_ = a;
    endcase
  endfunction
  assign result_o = _40_(32'd0, { bwlogic_result, adder_result_ext_o[32:1], shift_result, 31'h00000000, cmp_result }, { _16_, _14_, _12_, _10_ });
  assign _10_ = | _09_;
  assign _09_[0] = operator_i == 7'h1d;
  assign _12_ = | { shift_arith, _11_[4:3], _11_[1:0] };
  assign _11_[1] = operator_i == 7'h09;
  assign shift_arith = operator_i == 7'h08;
  assign _11_[3] = operator_i == 7'h0c;
  assign _11_[4] = operator_i == 7'h0b;
  assign _14_ = | _13_;
  assign _13_[0] = ! operator_i;
  assign _13_[1] = operator_i == 7'h01;
  assign _13_[2] = operator_i == 7'h16;
  assign _13_[3] = operator_i == 7'h17;
  assign _13_[4] = operator_i == 7'h18;
  assign _16_ = | { _06_, _05_, _04_, _03_, _15_[1:0] };
  assign _15_[0] = operator_i == 7'h02;
  assign _15_[1] = operator_i == 7'h05;
  assign _03_ = operator_i == 7'h03;
  assign _04_ = operator_i == 7'h06;
  assign _05_ = operator_i == 7'h04;
  assign _06_ = operator_i == 7'h07;
  assign _17_ = bwlogic_and ? bwlogic_and_result : bwlogic_xor_result;
  assign bwlogic_result = bwlogic_or ? bwlogic_or_result : _17_;
  assign shift_left = _11_[0] ? 1'h1 : 1'h0;
  assign _11_[0] = operator_i == 7'h0a;
  function [0:0] _65_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _65_ = b[0:0];
      3'b?1?:
        _65_ = b[1:1];
      3'b1??:
        _65_ = b[2:2];
      default:
        _65_ = a;
    endcase
  endfunction
  assign cmp_result = _65_(is_equal, { _07_, is_greater_equal, _08_ }, { _09_[1], _21_, _19_ });
  assign _19_ = | { _09_[7:4], _18_[3:2] };
  assign _09_[4] = operator_i == 7'h19;
  assign _09_[5] = operator_i == 7'h1a;
  assign _18_[2] = operator_i == 7'h1f;
  assign _18_[3] = operator_i == 7'h20;
  assign _09_[6] = operator_i == 7'h2b;
  assign _09_[7] = operator_i == 7'h2c;
  assign _21_ = | { _09_[3:2], _20_[3:2] };
  assign _09_[3] = operator_i == 7'h1c;
  assign _20_[2] = operator_i == 7'h21;
  assign _20_[3] = operator_i == 7'h22;
  assign _09_[1] = operator_i == 7'h1e;
  assign is_greater_equal = _25_ ? _26_ : _02_;
  assign cmp_signed = _22_ ? 1'h1 : 1'h0;
  assign _22_ = | { _09_[6], _09_[4], _09_[2], _18_[2], _20_[2] };
  assign _09_[2] = operator_i == 7'h1b;
  assign _23_ = adder_op_b_negate ? operand_b_neg : { operand_b_i, 1'h0 };
  assign adder_in_b = multdiv_sel_i ? multdiv_operand_b_i : _23_;
  assign adder_in_a = multdiv_sel_i ? multdiv_operand_a_i : { operand_a_i, 1'h1 };
  assign adder_op_b_negate = operator_i[6] ? 1'h0 : _01_;
  assign shift_result_ext = $signed({ _00_, shift_operand }) >>> shift_amt[4:0];
  assign { _24_[31:6], shift_amt_compl } = 32'd32 - operand_b_i[4:0];
  assign shift_amt[4:0] = instr_first_cycle_i ? operand_b_i[4:0] : shift_amt_compl[4:0];
  assign shift_operand = shift_left ? { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] } : operand_a_i;
  assign shift_result = shift_left ? { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] } : shift_result_ext[31:0];
  assign _25_ = operand_a_i[31] ^ operand_b_i[31];
  assign _26_ = operand_a_i[31] ^ cmp_signed;
  assign bwlogic_xor_result = operand_a_i ^ operand_b_i;
  assign _11_[2] = shift_arith;
  assign _15_[5:2] = { _06_, _05_, _04_, _03_ };
  assign { _18_[5:4], _18_[1:0] } = _09_[7:4];
  assign _20_[1:0] = _09_[3:2];
  assign _24_[5:0] = shift_amt_compl;
  assign adder_op_a_shift1 = 1'h0;
  assign adder_op_a_shift2 = 1'h0;
  assign adder_op_a_shift3 = 1'h0;
  assign adder_result = adder_result_ext_o[32:1];
  assign adder_result_o = adder_result_ext_o[32:1];
  assign bfp_len[3:0] = operand_b_i[27:24];
  assign bfp_mask = 32'd0;
  assign bfp_mask_rev = 32'd0;
  assign bfp_off = operand_b_i[20:16];
  assign bfp_op = 1'h0;
  assign bfp_result = 32'd0;
  assign bitcnt_result = 6'h00;
  assign butterfly_result = 32'd0;
  assign bwlogic_op_b_negate = 1'h0;
  assign bwlogic_operand_b = operand_b_i;
  assign clmul_result = 32'd0;
  assign comparison_result_o = cmp_result;
  assign \g_no_alu_rvb.unused_butterfly_result  = 32'd0;
  assign \g_no_alu_rvb.unused_imd_val_q  = imd_val_q_i;
  assign \g_no_alu_rvb.unused_invbutterfly_result  = 32'd0;
  assign imd_val_d_o = 64'h0000000000000000;
  assign imd_val_we_o = 2'h0;
  assign invbutterfly_result = 32'd0;
  assign is_equal_result_o = is_equal;
  assign minmax_result = 32'd0;
  assign multicycle_result = 32'd0;
  assign operand_a_rev = { operand_a_i[0], operand_a_i[1], operand_a_i[2], operand_a_i[3], operand_a_i[4], operand_a_i[5], operand_a_i[6], operand_a_i[7], operand_a_i[8], operand_a_i[9], operand_a_i[10], operand_a_i[11], operand_a_i[12], operand_a_i[13], operand_a_i[14], operand_a_i[15], operand_a_i[16], operand_a_i[17], operand_a_i[18], operand_a_i[19], operand_a_i[20], operand_a_i[21], operand_a_i[22], operand_a_i[23], operand_a_i[24], operand_a_i[25], operand_a_i[26], operand_a_i[27], operand_a_i[28], operand_a_i[29], operand_a_i[30], operand_a_i[31] };
  assign pack_result = 32'd0;
  assign rev_result = 32'd0;
  assign sext_result = 32'd0;
  assign shift_amt[5] = 1'h0;
  assign shift_funnel = 1'h0;
  assign shift_ones = 1'h0;
  assign shift_result_ext_signed = shift_result_ext;
  assign shift_result_rev = { shift_result_ext[0], shift_result_ext[1], shift_result_ext[2], shift_result_ext[3], shift_result_ext[4], shift_result_ext[5], shift_result_ext[6], shift_result_ext[7], shift_result_ext[8], shift_result_ext[9], shift_result_ext[10], shift_result_ext[11], shift_result_ext[12], shift_result_ext[13], shift_result_ext[14], shift_result_ext[15], shift_result_ext[16], shift_result_ext[17], shift_result_ext[18], shift_result_ext[19], shift_result_ext[20], shift_result_ext[21], shift_result_ext[22], shift_result_ext[23], shift_result_ext[24], shift_result_ext[25], shift_result_ext[26], shift_result_ext[27], shift_result_ext[28], shift_result_ext[29], shift_result_ext[30], shift_result_ext[31] };
  assign shift_sbmode = 1'h0;
  assign shuffle_result = 32'd0;
  assign singlebit_result = 32'd0;
  assign unused_shift_amt_compl = shift_amt_compl[5];
  assign unused_shift_result_ext = shift_result_ext[32];
  assign xperm_result = 32'd0;
endmodule

module \$paramod$a9bef41b3b641c45d77bc238893e68a57373d786\ibex_register_file_ff (clk_i, rst_ni, test_en_i, dummy_instr_id_i, dummy_instr_wb_i, raddr_a_i, rdata_a_o, raddr_b_i, rdata_b_o, waddr_a_i, wdata_a_i, we_a_i, err_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  input clk_i;
  wire clk_i;
  input dummy_instr_id_i;
  wire dummy_instr_id_i;
  input dummy_instr_wb_i;
  wire dummy_instr_wb_i;
  output err_o;
  wire err_o;
  reg [31:0] \g_rf_flops[10].rf_reg_q ;
  reg [31:0] \g_rf_flops[11].rf_reg_q ;
  reg [31:0] \g_rf_flops[12].rf_reg_q ;
  reg [31:0] \g_rf_flops[13].rf_reg_q ;
  reg [31:0] \g_rf_flops[14].rf_reg_q ;
  reg [31:0] \g_rf_flops[15].rf_reg_q ;
  reg [31:0] \g_rf_flops[16].rf_reg_q ;
  reg [31:0] \g_rf_flops[17].rf_reg_q ;
  reg [31:0] \g_rf_flops[18].rf_reg_q ;
  reg [31:0] \g_rf_flops[19].rf_reg_q ;
  reg [31:0] \g_rf_flops[1].rf_reg_q ;
  reg [31:0] \g_rf_flops[20].rf_reg_q ;
  reg [31:0] \g_rf_flops[21].rf_reg_q ;
  reg [31:0] \g_rf_flops[22].rf_reg_q ;
  reg [31:0] \g_rf_flops[23].rf_reg_q ;
  reg [31:0] \g_rf_flops[24].rf_reg_q ;
  reg [31:0] \g_rf_flops[25].rf_reg_q ;
  reg [31:0] \g_rf_flops[26].rf_reg_q ;
  reg [31:0] \g_rf_flops[27].rf_reg_q ;
  reg [31:0] \g_rf_flops[28].rf_reg_q ;
  reg [31:0] \g_rf_flops[29].rf_reg_q ;
  reg [31:0] \g_rf_flops[2].rf_reg_q ;
  reg [31:0] \g_rf_flops[30].rf_reg_q ;
  reg [31:0] \g_rf_flops[31].rf_reg_q ;
  reg [31:0] \g_rf_flops[3].rf_reg_q ;
  reg [31:0] \g_rf_flops[4].rf_reg_q ;
  reg [31:0] \g_rf_flops[5].rf_reg_q ;
  reg [31:0] \g_rf_flops[6].rf_reg_q ;
  reg [31:0] \g_rf_flops[7].rf_reg_q ;
  reg [31:0] \g_rf_flops[8].rf_reg_q ;
  reg [31:0] \g_rf_flops[9].rf_reg_q ;
  wire oh_raddr_a_err;
  wire oh_raddr_b_err;
  wire oh_we_err;
  input [4:0] raddr_a_i;
  wire [4:0] raddr_a_i;
  input [4:0] raddr_b_i;
  wire [4:0] raddr_b_i;
  output [31:0] rdata_a_o;
  wire [31:0] rdata_a_o;
  output [31:0] rdata_b_o;
  wire [31:0] rdata_b_o;
  wire [31:0] \rf_reg[0] ;
  wire [31:0] \rf_reg[10] ;
  wire [31:0] \rf_reg[11] ;
  wire [31:0] \rf_reg[12] ;
  wire [31:0] \rf_reg[13] ;
  wire [31:0] \rf_reg[14] ;
  wire [31:0] \rf_reg[15] ;
  wire [31:0] \rf_reg[16] ;
  wire [31:0] \rf_reg[17] ;
  wire [31:0] \rf_reg[18] ;
  wire [31:0] \rf_reg[19] ;
  wire [31:0] \rf_reg[1] ;
  wire [31:0] \rf_reg[20] ;
  wire [31:0] \rf_reg[21] ;
  wire [31:0] \rf_reg[22] ;
  wire [31:0] \rf_reg[23] ;
  wire [31:0] \rf_reg[24] ;
  wire [31:0] \rf_reg[25] ;
  wire [31:0] \rf_reg[26] ;
  wire [31:0] \rf_reg[27] ;
  wire [31:0] \rf_reg[28] ;
  wire [31:0] \rf_reg[29] ;
  wire [31:0] \rf_reg[2] ;
  wire [31:0] \rf_reg[30] ;
  wire [31:0] \rf_reg[31] ;
  wire [31:0] \rf_reg[3] ;
  wire [31:0] \rf_reg[4] ;
  wire [31:0] \rf_reg[5] ;
  wire [31:0] \rf_reg[6] ;
  wire [31:0] \rf_reg[7] ;
  wire [31:0] \rf_reg[8] ;
  wire [31:0] \rf_reg[9] ;
  input rst_ni;
  wire rst_ni;
  input test_en_i;
  wire test_en_i;
  wire unused_test_en;
  input [4:0] waddr_a_i;
  wire [4:0] waddr_a_i;
  input [31:0] wdata_a_i;
  wire [31:0] wdata_a_i;
  wire [31:0] we_a_dec;
  input we_a_i;
  wire we_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[1].rf_reg_q  <= 32'd0;
    else if (we_a_dec[1]) \g_rf_flops[1].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[2].rf_reg_q  <= 32'd0;
    else if (we_a_dec[2]) \g_rf_flops[2].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[31].rf_reg_q  <= 32'd0;
    else if (we_a_dec[31]) \g_rf_flops[31].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[30].rf_reg_q  <= 32'd0;
    else if (we_a_dec[30]) \g_rf_flops[30].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[29].rf_reg_q  <= 32'd0;
    else if (we_a_dec[29]) \g_rf_flops[29].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[28].rf_reg_q  <= 32'd0;
    else if (we_a_dec[28]) \g_rf_flops[28].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[27].rf_reg_q  <= 32'd0;
    else if (we_a_dec[27]) \g_rf_flops[27].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[26].rf_reg_q  <= 32'd0;
    else if (we_a_dec[26]) \g_rf_flops[26].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[25].rf_reg_q  <= 32'd0;
    else if (we_a_dec[25]) \g_rf_flops[25].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[24].rf_reg_q  <= 32'd0;
    else if (we_a_dec[24]) \g_rf_flops[24].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[23].rf_reg_q  <= 32'd0;
    else if (we_a_dec[23]) \g_rf_flops[23].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[22].rf_reg_q  <= 32'd0;
    else if (we_a_dec[22]) \g_rf_flops[22].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[21].rf_reg_q  <= 32'd0;
    else if (we_a_dec[21]) \g_rf_flops[21].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[20].rf_reg_q  <= 32'd0;
    else if (we_a_dec[20]) \g_rf_flops[20].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[19].rf_reg_q  <= 32'd0;
    else if (we_a_dec[19]) \g_rf_flops[19].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[18].rf_reg_q  <= 32'd0;
    else if (we_a_dec[18]) \g_rf_flops[18].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[17].rf_reg_q  <= 32'd0;
    else if (we_a_dec[17]) \g_rf_flops[17].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[16].rf_reg_q  <= 32'd0;
    else if (we_a_dec[16]) \g_rf_flops[16].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[15].rf_reg_q  <= 32'd0;
    else if (we_a_dec[15]) \g_rf_flops[15].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[14].rf_reg_q  <= 32'd0;
    else if (we_a_dec[14]) \g_rf_flops[14].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[13].rf_reg_q  <= 32'd0;
    else if (we_a_dec[13]) \g_rf_flops[13].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[12].rf_reg_q  <= 32'd0;
    else if (we_a_dec[12]) \g_rf_flops[12].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[11].rf_reg_q  <= 32'd0;
    else if (we_a_dec[11]) \g_rf_flops[11].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[10].rf_reg_q  <= 32'd0;
    else if (we_a_dec[10]) \g_rf_flops[10].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[9].rf_reg_q  <= 32'd0;
    else if (we_a_dec[9]) \g_rf_flops[9].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[8].rf_reg_q  <= 32'd0;
    else if (we_a_dec[8]) \g_rf_flops[8].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[7].rf_reg_q  <= 32'd0;
    else if (we_a_dec[7]) \g_rf_flops[7].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[6].rf_reg_q  <= 32'd0;
    else if (we_a_dec[6]) \g_rf_flops[6].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[5].rf_reg_q  <= 32'd0;
    else if (we_a_dec[5]) \g_rf_flops[5].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[4].rf_reg_q  <= 32'd0;
    else if (we_a_dec[4]) \g_rf_flops[4].rf_reg_q  <= wdata_a_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \g_rf_flops[3].rf_reg_q  <= 32'd0;
    else if (we_a_dec[3]) \g_rf_flops[3].rf_reg_q  <= wdata_a_i;
  assign _000_ = waddr_a_i == 5'h02;
  assign _001_ = waddr_a_i == 5'h03;
  assign _002_ = waddr_a_i == 5'h04;
  assign _003_ = waddr_a_i == 5'h05;
  assign _004_ = waddr_a_i == 5'h06;
  assign _005_ = waddr_a_i == 5'h07;
  assign _006_ = waddr_a_i == 5'h08;
  assign _007_ = waddr_a_i == 5'h09;
  assign _008_ = waddr_a_i == 5'h0a;
  assign _009_ = waddr_a_i == 5'h0b;
  assign _010_ = waddr_a_i == 5'h0c;
  assign _011_ = waddr_a_i == 5'h0d;
  assign _012_ = waddr_a_i == 5'h0e;
  assign _013_ = waddr_a_i == 5'h0f;
  assign _014_ = waddr_a_i == 5'h10;
  assign _015_ = waddr_a_i == 5'h11;
  assign _016_ = waddr_a_i == 5'h12;
  assign _017_ = waddr_a_i == 5'h13;
  assign _018_ = waddr_a_i == 5'h14;
  assign _019_ = waddr_a_i == 5'h15;
  assign _020_ = waddr_a_i == 5'h16;
  assign _021_ = waddr_a_i == 5'h17;
  assign _022_ = waddr_a_i == 5'h18;
  assign _023_ = waddr_a_i == 5'h19;
  assign _024_ = waddr_a_i == 5'h1a;
  assign _025_ = waddr_a_i == 5'h1b;
  assign _026_ = waddr_a_i == 5'h1c;
  assign _027_ = waddr_a_i == 5'h1d;
  assign _028_ = waddr_a_i == 5'h1e;
  assign _029_ = waddr_a_i == 5'h1f;
  assign _030_ = waddr_a_i == 5'h01;
  function [31:0] _157_;
    input [31:0] a;
    input [1023:0] b;
    input [31:0] s;
    casez (s) // synopsys parallel_case
      32'b???????????????????????????????1:
        _157_ = b[31:0];
      32'b??????????????????????????????1?:
        _157_ = b[63:32];
      32'b?????????????????????????????1??:
        _157_ = b[95:64];
      32'b????????????????????????????1???:
        _157_ = b[127:96];
      32'b???????????????????????????1????:
        _157_ = b[159:128];
      32'b??????????????????????????1?????:
        _157_ = b[191:160];
      32'b?????????????????????????1??????:
        _157_ = b[223:192];
      32'b????????????????????????1???????:
        _157_ = b[255:224];
      32'b???????????????????????1????????:
        _157_ = b[287:256];
      32'b??????????????????????1?????????:
        _157_ = b[319:288];
      32'b?????????????????????1??????????:
        _157_ = b[351:320];
      32'b????????????????????1???????????:
        _157_ = b[383:352];
      32'b???????????????????1????????????:
        _157_ = b[415:384];
      32'b??????????????????1?????????????:
        _157_ = b[447:416];
      32'b?????????????????1??????????????:
        _157_ = b[479:448];
      32'b????????????????1???????????????:
        _157_ = b[511:480];
      32'b???????????????1????????????????:
        _157_ = b[543:512];
      32'b??????????????1?????????????????:
        _157_ = b[575:544];
      32'b?????????????1??????????????????:
        _157_ = b[607:576];
      32'b????????????1???????????????????:
        _157_ = b[639:608];
      32'b???????????1????????????????????:
        _157_ = b[671:640];
      32'b??????????1?????????????????????:
        _157_ = b[703:672];
      32'b?????????1??????????????????????:
        _157_ = b[735:704];
      32'b????????1???????????????????????:
        _157_ = b[767:736];
      32'b???????1????????????????????????:
        _157_ = b[799:768];
      32'b??????1?????????????????????????:
        _157_ = b[831:800];
      32'b?????1??????????????????????????:
        _157_ = b[863:832];
      32'b????1???????????????????????????:
        _157_ = b[895:864];
      32'b???1????????????????????????????:
        _157_ = b[927:896];
      32'b??1?????????????????????????????:
        _157_ = b[959:928];
      32'b?1??????????????????????????????:
        _157_ = b[991:960];
      32'b1???????????????????????????????:
        _157_ = b[1023:992];
      default:
        _157_ = a;
    endcase
  endfunction
  assign rdata_b_o = _157_(32'hxxxxxxxx, { 32'h00000000, \g_rf_flops[1].rf_reg_q , \g_rf_flops[2].rf_reg_q , \g_rf_flops[3].rf_reg_q , \g_rf_flops[4].rf_reg_q , \g_rf_flops[5].rf_reg_q , \g_rf_flops[6].rf_reg_q , \g_rf_flops[7].rf_reg_q , \g_rf_flops[8].rf_reg_q , \g_rf_flops[9].rf_reg_q , \g_rf_flops[10].rf_reg_q , \g_rf_flops[11].rf_reg_q , \g_rf_flops[12].rf_reg_q , \g_rf_flops[13].rf_reg_q , \g_rf_flops[14].rf_reg_q , \g_rf_flops[15].rf_reg_q , \g_rf_flops[16].rf_reg_q , \g_rf_flops[17].rf_reg_q , \g_rf_flops[18].rf_reg_q , \g_rf_flops[19].rf_reg_q , \g_rf_flops[20].rf_reg_q , \g_rf_flops[21].rf_reg_q , \g_rf_flops[22].rf_reg_q , \g_rf_flops[23].rf_reg_q , \g_rf_flops[24].rf_reg_q , \g_rf_flops[25].rf_reg_q , \g_rf_flops[26].rf_reg_q , \g_rf_flops[27].rf_reg_q , \g_rf_flops[28].rf_reg_q , \g_rf_flops[29].rf_reg_q , \g_rf_flops[30].rf_reg_q , \g_rf_flops[31].rf_reg_q  }, { _062_, _061_, _060_, _059_, _058_, _057_, _056_, _055_, _054_, _053_, _052_, _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_, _042_, _041_, _040_, _039_, _038_, _037_, _036_, _035_, _034_, _033_, _032_, _031_ });
  assign _031_ = raddr_b_i == 5'h1f;
  assign _032_ = raddr_b_i == 5'h1e;
  assign _033_ = raddr_b_i == 5'h1d;
  assign _034_ = raddr_b_i == 5'h1c;
  assign _035_ = raddr_b_i == 5'h1b;
  assign _036_ = raddr_b_i == 5'h1a;
  assign _037_ = raddr_b_i == 5'h19;
  assign _038_ = raddr_b_i == 5'h18;
  assign _039_ = raddr_b_i == 5'h17;
  assign _040_ = raddr_b_i == 5'h16;
  assign _041_ = raddr_b_i == 5'h15;
  assign _042_ = raddr_b_i == 5'h14;
  assign _043_ = raddr_b_i == 5'h13;
  assign _044_ = raddr_b_i == 5'h12;
  assign _045_ = raddr_b_i == 5'h11;
  assign _046_ = raddr_b_i == 5'h10;
  assign _047_ = raddr_b_i == 5'h0f;
  assign _048_ = raddr_b_i == 5'h0e;
  assign _049_ = raddr_b_i == 5'h0d;
  assign _050_ = raddr_b_i == 5'h0c;
  assign _051_ = raddr_b_i == 5'h0b;
  assign _052_ = raddr_b_i == 5'h0a;
  assign _053_ = raddr_b_i == 5'h09;
  assign _054_ = raddr_b_i == 5'h08;
  assign _055_ = raddr_b_i == 5'h07;
  assign _056_ = raddr_b_i == 5'h06;
  assign _057_ = raddr_b_i == 5'h05;
  assign _058_ = raddr_b_i == 5'h04;
  assign _059_ = raddr_b_i == 5'h03;
  assign _060_ = raddr_b_i == 5'h02;
  assign _061_ = raddr_b_i == 5'h01;
  assign _062_ = ! raddr_b_i;
  function [31:0] _190_;
    input [31:0] a;
    input [1023:0] b;
    input [31:0] s;
    casez (s) // synopsys parallel_case
      32'b???????????????????????????????1:
        _190_ = b[31:0];
      32'b??????????????????????????????1?:
        _190_ = b[63:32];
      32'b?????????????????????????????1??:
        _190_ = b[95:64];
      32'b????????????????????????????1???:
        _190_ = b[127:96];
      32'b???????????????????????????1????:
        _190_ = b[159:128];
      32'b??????????????????????????1?????:
        _190_ = b[191:160];
      32'b?????????????????????????1??????:
        _190_ = b[223:192];
      32'b????????????????????????1???????:
        _190_ = b[255:224];
      32'b???????????????????????1????????:
        _190_ = b[287:256];
      32'b??????????????????????1?????????:
        _190_ = b[319:288];
      32'b?????????????????????1??????????:
        _190_ = b[351:320];
      32'b????????????????????1???????????:
        _190_ = b[383:352];
      32'b???????????????????1????????????:
        _190_ = b[415:384];
      32'b??????????????????1?????????????:
        _190_ = b[447:416];
      32'b?????????????????1??????????????:
        _190_ = b[479:448];
      32'b????????????????1???????????????:
        _190_ = b[511:480];
      32'b???????????????1????????????????:
        _190_ = b[543:512];
      32'b??????????????1?????????????????:
        _190_ = b[575:544];
      32'b?????????????1??????????????????:
        _190_ = b[607:576];
      32'b????????????1???????????????????:
        _190_ = b[639:608];
      32'b???????????1????????????????????:
        _190_ = b[671:640];
      32'b??????????1?????????????????????:
        _190_ = b[703:672];
      32'b?????????1??????????????????????:
        _190_ = b[735:704];
      32'b????????1???????????????????????:
        _190_ = b[767:736];
      32'b???????1????????????????????????:
        _190_ = b[799:768];
      32'b??????1?????????????????????????:
        _190_ = b[831:800];
      32'b?????1??????????????????????????:
        _190_ = b[863:832];
      32'b????1???????????????????????????:
        _190_ = b[895:864];
      32'b???1????????????????????????????:
        _190_ = b[927:896];
      32'b??1?????????????????????????????:
        _190_ = b[959:928];
      32'b?1??????????????????????????????:
        _190_ = b[991:960];
      32'b1???????????????????????????????:
        _190_ = b[1023:992];
      default:
        _190_ = a;
    endcase
  endfunction
  assign rdata_a_o = _190_(32'hxxxxxxxx, { 32'h00000000, \g_rf_flops[1].rf_reg_q , \g_rf_flops[2].rf_reg_q , \g_rf_flops[3].rf_reg_q , \g_rf_flops[4].rf_reg_q , \g_rf_flops[5].rf_reg_q , \g_rf_flops[6].rf_reg_q , \g_rf_flops[7].rf_reg_q , \g_rf_flops[8].rf_reg_q , \g_rf_flops[9].rf_reg_q , \g_rf_flops[10].rf_reg_q , \g_rf_flops[11].rf_reg_q , \g_rf_flops[12].rf_reg_q , \g_rf_flops[13].rf_reg_q , \g_rf_flops[14].rf_reg_q , \g_rf_flops[15].rf_reg_q , \g_rf_flops[16].rf_reg_q , \g_rf_flops[17].rf_reg_q , \g_rf_flops[18].rf_reg_q , \g_rf_flops[19].rf_reg_q , \g_rf_flops[20].rf_reg_q , \g_rf_flops[21].rf_reg_q , \g_rf_flops[22].rf_reg_q , \g_rf_flops[23].rf_reg_q , \g_rf_flops[24].rf_reg_q , \g_rf_flops[25].rf_reg_q , \g_rf_flops[26].rf_reg_q , \g_rf_flops[27].rf_reg_q , \g_rf_flops[28].rf_reg_q , \g_rf_flops[29].rf_reg_q , \g_rf_flops[30].rf_reg_q , \g_rf_flops[31].rf_reg_q  }, { _094_, _093_, _092_, _091_, _090_, _089_, _088_, _087_, _086_, _085_, _084_, _083_, _082_, _081_, _080_, _079_, _078_, _077_, _076_, _075_, _074_, _073_, _072_, _071_, _070_, _069_, _068_, _067_, _066_, _065_, _064_, _063_ });
  assign _063_ = raddr_a_i == 5'h1f;
  assign _064_ = raddr_a_i == 5'h1e;
  assign _065_ = raddr_a_i == 5'h1d;
  assign _066_ = raddr_a_i == 5'h1c;
  assign _067_ = raddr_a_i == 5'h1b;
  assign _068_ = raddr_a_i == 5'h1a;
  assign _069_ = raddr_a_i == 5'h19;
  assign _070_ = raddr_a_i == 5'h18;
  assign _071_ = raddr_a_i == 5'h17;
  assign _072_ = raddr_a_i == 5'h16;
  assign _073_ = raddr_a_i == 5'h15;
  assign _074_ = raddr_a_i == 5'h14;
  assign _075_ = raddr_a_i == 5'h13;
  assign _076_ = raddr_a_i == 5'h12;
  assign _077_ = raddr_a_i == 5'h11;
  assign _078_ = raddr_a_i == 5'h10;
  assign _079_ = raddr_a_i == 5'h0f;
  assign _080_ = raddr_a_i == 5'h0e;
  assign _081_ = raddr_a_i == 5'h0d;
  assign _082_ = raddr_a_i == 5'h0c;
  assign _083_ = raddr_a_i == 5'h0b;
  assign _084_ = raddr_a_i == 5'h0a;
  assign _085_ = raddr_a_i == 5'h09;
  assign _086_ = raddr_a_i == 5'h08;
  assign _087_ = raddr_a_i == 5'h07;
  assign _088_ = raddr_a_i == 5'h06;
  assign _089_ = raddr_a_i == 5'h05;
  assign _090_ = raddr_a_i == 5'h04;
  assign _091_ = raddr_a_i == 5'h03;
  assign _092_ = raddr_a_i == 5'h02;
  assign _093_ = raddr_a_i == 5'h01;
  assign _094_ = ! raddr_a_i;
  assign we_a_dec[1] = _030_ ? we_a_i : 1'h0;
  assign we_a_dec[2] = _000_ ? we_a_i : 1'h0;
  assign we_a_dec[3] = _001_ ? we_a_i : 1'h0;
  assign we_a_dec[4] = _002_ ? we_a_i : 1'h0;
  assign we_a_dec[5] = _003_ ? we_a_i : 1'h0;
  assign we_a_dec[6] = _004_ ? we_a_i : 1'h0;
  assign we_a_dec[7] = _005_ ? we_a_i : 1'h0;
  assign we_a_dec[8] = _006_ ? we_a_i : 1'h0;
  assign we_a_dec[9] = _007_ ? we_a_i : 1'h0;
  assign we_a_dec[10] = _008_ ? we_a_i : 1'h0;
  assign we_a_dec[11] = _009_ ? we_a_i : 1'h0;
  assign we_a_dec[12] = _010_ ? we_a_i : 1'h0;
  assign we_a_dec[13] = _011_ ? we_a_i : 1'h0;
  assign we_a_dec[14] = _012_ ? we_a_i : 1'h0;
  assign we_a_dec[15] = _013_ ? we_a_i : 1'h0;
  assign we_a_dec[16] = _014_ ? we_a_i : 1'h0;
  assign we_a_dec[17] = _015_ ? we_a_i : 1'h0;
  assign we_a_dec[18] = _016_ ? we_a_i : 1'h0;
  assign we_a_dec[19] = _017_ ? we_a_i : 1'h0;
  assign we_a_dec[20] = _018_ ? we_a_i : 1'h0;
  assign we_a_dec[21] = _019_ ? we_a_i : 1'h0;
  assign we_a_dec[22] = _020_ ? we_a_i : 1'h0;
  assign we_a_dec[23] = _021_ ? we_a_i : 1'h0;
  assign we_a_dec[24] = _022_ ? we_a_i : 1'h0;
  assign we_a_dec[25] = _023_ ? we_a_i : 1'h0;
  assign we_a_dec[26] = _024_ ? we_a_i : 1'h0;
  assign we_a_dec[27] = _025_ ? we_a_i : 1'h0;
  assign we_a_dec[28] = _026_ ? we_a_i : 1'h0;
  assign we_a_dec[29] = _027_ ? we_a_i : 1'h0;
  assign we_a_dec[30] = _028_ ? we_a_i : 1'h0;
  assign we_a_dec[31] = _029_ ? we_a_i : 1'h0;
  assign err_o = 1'h0;
  assign oh_raddr_a_err = 1'h0;
  assign oh_raddr_b_err = 1'h0;
  assign oh_we_err = 1'h0;
  assign \rf_reg[0]  = 32'd0;
  assign \rf_reg[10]  = \g_rf_flops[10].rf_reg_q ;
  assign \rf_reg[11]  = \g_rf_flops[11].rf_reg_q ;
  assign \rf_reg[12]  = \g_rf_flops[12].rf_reg_q ;
  assign \rf_reg[13]  = \g_rf_flops[13].rf_reg_q ;
  assign \rf_reg[14]  = \g_rf_flops[14].rf_reg_q ;
  assign \rf_reg[15]  = \g_rf_flops[15].rf_reg_q ;
  assign \rf_reg[16]  = \g_rf_flops[16].rf_reg_q ;
  assign \rf_reg[17]  = \g_rf_flops[17].rf_reg_q ;
  assign \rf_reg[18]  = \g_rf_flops[18].rf_reg_q ;
  assign \rf_reg[19]  = \g_rf_flops[19].rf_reg_q ;
  assign \rf_reg[1]  = \g_rf_flops[1].rf_reg_q ;
  assign \rf_reg[20]  = \g_rf_flops[20].rf_reg_q ;
  assign \rf_reg[21]  = \g_rf_flops[21].rf_reg_q ;
  assign \rf_reg[22]  = \g_rf_flops[22].rf_reg_q ;
  assign \rf_reg[23]  = \g_rf_flops[23].rf_reg_q ;
  assign \rf_reg[24]  = \g_rf_flops[24].rf_reg_q ;
  assign \rf_reg[25]  = \g_rf_flops[25].rf_reg_q ;
  assign \rf_reg[26]  = \g_rf_flops[26].rf_reg_q ;
  assign \rf_reg[27]  = \g_rf_flops[27].rf_reg_q ;
  assign \rf_reg[28]  = \g_rf_flops[28].rf_reg_q ;
  assign \rf_reg[29]  = \g_rf_flops[29].rf_reg_q ;
  assign \rf_reg[2]  = \g_rf_flops[2].rf_reg_q ;
  assign \rf_reg[30]  = \g_rf_flops[30].rf_reg_q ;
  assign \rf_reg[31]  = \g_rf_flops[31].rf_reg_q ;
  assign \rf_reg[3]  = \g_rf_flops[3].rf_reg_q ;
  assign \rf_reg[4]  = \g_rf_flops[4].rf_reg_q ;
  assign \rf_reg[5]  = \g_rf_flops[5].rf_reg_q ;
  assign \rf_reg[6]  = \g_rf_flops[6].rf_reg_q ;
  assign \rf_reg[7]  = \g_rf_flops[7].rf_reg_q ;
  assign \rf_reg[8]  = \g_rf_flops[8].rf_reg_q ;
  assign \rf_reg[9]  = \g_rf_flops[9].rf_reg_q ;
  assign unused_test_en = test_en_i;
endmodule

module \$paramod$aede8c9d141b01b36ebf5d5b516ae2e58869ec17\ibex_core (clk_i, rst_ni, hart_id_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_rdata_i, data_err_i, dummy_instr_id_o, dummy_instr_wb_o
, rf_raddr_a_o, rf_raddr_b_o, rf_waddr_wb_o, rf_we_wb_o, rf_wdata_wb_ecc_o, rf_rdata_a_ecc_i, rf_rdata_b_ecc_i, ic_tag_req_o, ic_tag_write_o, ic_tag_addr_o, ic_tag_wdata_o, ic_tag_rdata_i, ic_data_req_o, ic_data_write_o, ic_data_addr_o, ic_data_wdata_o, ic_data_rdata_i, ic_scr_key_valid_i, ic_scr_key_req_o, irq_software_i, irq_timer_i
, irq_external_i, irq_fast_i, irq_nm_i, irq_pending_o, debug_req_i, double_fault_seen_o, fetch_enable_i, alert_minor_o, alert_major_internal_o, alert_major_bus_o, core_busy_o, crash_dump_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  output alert_major_bus_o;
  wire alert_major_bus_o;
  output alert_major_internal_o;
  wire alert_major_internal_o;
  output alert_minor_o;
  wire alert_minor_o;
  wire [31:0] alu_adder_result_ex;
  wire [31:0] alu_operand_a_ex;
  wire [31:0] alu_operand_b_ex;
  wire [6:0] alu_operator_ex;
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  wire branch_decision;
  wire [31:0] branch_target_ex;
  wire [31:0] bt_a_operand;
  wire [31:0] bt_b_operand;
  input clk_i;
  wire clk_i;
  output [3:0] core_busy_o;
  wire [3:0] core_busy_o;
  wire [31:0] crash_dump_mtval;
  output [159:0] crash_dump_o;
  wire [159:0] crash_dump_o;
  wire csr_access;
  wire [11:0] csr_addr;
  wire [31:0] csr_depc;
  wire [31:0] csr_mepc;
  wire csr_mstatus_mie;
  wire csr_mstatus_tw;
  wire [31:0] csr_mtval;
  wire [31:0] csr_mtvec;
  wire csr_mtvec_init;
  wire [1:0] csr_op;
  wire csr_op_en;
  wire [135:0] csr_pmp_addr;
  wire [23:0] csr_pmp_cfg;
  wire [2:0] csr_pmp_mseccfg;
  wire [31:0] csr_rdata;
  wire csr_restore_dret_id;
  wire csr_restore_mret_id;
  wire csr_save_cause;
  wire csr_save_id;
  wire csr_save_if;
  wire csr_save_wb;
  wire csr_shadow_err;
  wire [31:0] csr_wdata;
  wire ctrl_busy;
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  input data_err_i;
  wire data_err_i;
  input data_gnt_i;
  wire data_gnt_i;
  wire data_ind_timing;
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  output data_req_o;
  wire data_req_o;
  wire data_req_out;
  input data_rvalid_i;
  wire data_rvalid_i;
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  output data_we_o;
  wire data_we_o;
  wire [2:0] debug_cause;
  wire debug_csr_save;
  wire debug_ebreakm;
  wire debug_ebreaku;
  wire debug_mode;
  wire debug_mode_entering;
  input debug_req_i;
  wire debug_req_i;
  wire debug_single_step;
  wire div_en_ex;
  wire div_sel_ex;
  output double_fault_seen_o;
  wire double_fault_seen_o;
  wire dummy_instr_en;
  wire dummy_instr_id;
  output dummy_instr_id_o;
  wire dummy_instr_id_o;
  wire [2:0] dummy_instr_mask;
  wire [31:0] dummy_instr_seed;
  wire dummy_instr_seed_en;
  wire dummy_instr_wb;
  output dummy_instr_wb_o;
  wire dummy_instr_wb_o;
  wire en_wb;
  wire ex_valid;
  wire [6:0] exc_cause;
  wire [1:0] exc_pc_mux_id;
  input [3:0] fetch_enable_i;
  wire [3:0] fetch_enable_i;
  wire [135:0] \g_no_pmp.unused_csr_pmp_addr ;
  wire [23:0] \g_no_pmp.unused_csr_pmp_cfg ;
  wire [2:0] \g_no_pmp.unused_csr_pmp_mseccfg ;
  wire [1:0] \g_no_pmp.unused_priv_lvl_ls ;
  wire \gen_no_regfile_ecc.unused_rf_rd_a_wb_match ;
  wire \gen_no_regfile_ecc.unused_rf_rd_b_wb_match ;
  wire \gen_no_regfile_ecc.unused_rf_ren_a ;
  wire \gen_no_regfile_ecc.unused_rf_ren_b ;
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  output [7:0] ic_data_addr_o;
  wire [7:0] ic_data_addr_o;
  input [127:0] ic_data_rdata_i;
  wire [127:0] ic_data_rdata_i;
  output [1:0] ic_data_req_o;
  wire [1:0] ic_data_req_o;
  output [63:0] ic_data_wdata_o;
  wire [63:0] ic_data_wdata_o;
  output ic_data_write_o;
  wire ic_data_write_o;
  output ic_scr_key_req_o;
  wire ic_scr_key_req_o;
  input ic_scr_key_valid_i;
  wire ic_scr_key_valid_i;
  output [7:0] ic_tag_addr_o;
  wire [7:0] ic_tag_addr_o;
  input [43:0] ic_tag_rdata_i;
  wire [43:0] ic_tag_rdata_i;
  output [1:0] ic_tag_req_o;
  wire [1:0] ic_tag_req_o;
  output [21:0] ic_tag_wdata_o;
  wire [21:0] ic_tag_wdata_o;
  output ic_tag_write_o;
  wire ic_tag_write_o;
  wire icache_ecc_error;
  wire icache_enable;
  wire icache_inval;
  wire id_in_ready;
  wire if_busy;
  wire illegal_c_insn_id;
  wire illegal_csr_insn_id;
  wire illegal_insn_id;
  wire [67:0] imd_val_d_ex;
  wire [67:0] imd_val_q_ex;
  wire [1:0] imd_val_we_ex;
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  wire instr_bp_taken_id;
  wire instr_done_wb;
  input instr_err_i;
  wire instr_err_i;
  wire instr_exec;
  wire instr_fetch_err;
  wire instr_fetch_err_plus2;
  wire instr_first_cycle_id;
  input instr_gnt_i;
  wire instr_gnt_i;
  wire instr_id_done;
  wire instr_intg_err;
  wire instr_is_compressed_id;
  wire instr_new_id;
  wire instr_perf_count_id;
  wire [31:0] instr_rdata_alu_id;
  wire [15:0] instr_rdata_c_id;
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_id;
  wire instr_req_gated;
  wire instr_req_int;
  output instr_req_o;
  wire instr_req_o;
  input instr_rvalid_i;
  wire instr_rvalid_i;
  wire [1:0] instr_type_wb;
  wire instr_valid_clear;
  wire instr_valid_id;
  input irq_external_i;
  wire irq_external_i;
  input [14:0] irq_fast_i;
  wire [14:0] irq_fast_i;
  input irq_nm_i;
  wire irq_nm_i;
  output irq_pending_o;
  wire irq_pending_o;
  input irq_software_i;
  wire irq_software_i;
  input irq_timer_i;
  wire irq_timer_i;
  wire [17:0] irqs;
  wire lsu_addr_incr_req;
  wire [31:0] lsu_addr_last;
  wire lsu_busy;
  wire lsu_load_err;
  wire lsu_load_resp_intg_err;
  wire lsu_req;
  wire lsu_req_done;
  wire lsu_resp_err;
  wire lsu_resp_valid;
  wire lsu_sign_ext;
  wire lsu_store_err;
  wire lsu_store_resp_intg_err;
  wire [1:0] lsu_type;
  wire [31:0] lsu_wdata;
  wire lsu_we;
  wire mult_en_ex;
  wire mult_sel_ex;
  wire [31:0] multdiv_operand_a_ex;
  wire [31:0] multdiv_operand_b_ex;
  wire [1:0] multdiv_operator_ex;
  wire multdiv_ready_id;
  wire [1:0] multdiv_signed_mode_ex;
  wire nmi_mode;
  wire [31:0] nt_branch_addr;
  wire nt_branch_mispredict;
  wire outstanding_load_wb;
  wire outstanding_store_wb;
  wire [31:0] pc_id;
  wire [31:0] pc_if;
  wire pc_mismatch_alert;
  wire [2:0] pc_mux_id;
  wire pc_set;
  wire [31:0] pc_wb;
  wire perf_branch;
  wire perf_div_wait;
  wire perf_dside_wait;
  wire perf_instr_ret_compressed_wb;
  wire perf_instr_ret_compressed_wb_spec;
  wire perf_instr_ret_wb;
  wire perf_instr_ret_wb_spec;
  wire perf_iside_wait;
  wire perf_jump;
  wire perf_load;
  wire perf_mul_wait;
  wire perf_store;
  wire perf_tbranch;
  wire \pmp_req_err[0] ;
  wire \pmp_req_err[1] ;
  wire \pmp_req_err[2] ;
  wire [1:0] priv_mode_id;
  wire [1:0] priv_mode_lsu;
  wire ready_wb;
  wire [31:0] result_ex;
  wire rf_ecc_err_comb;
  wire [4:0] rf_raddr_a;
  output [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_a_o;
  wire [4:0] rf_raddr_b;
  output [4:0] rf_raddr_b_o;
  wire [4:0] rf_raddr_b_o;
  wire rf_rd_a_wb_match;
  wire rf_rd_b_wb_match;
  wire [31:0] rf_rdata_a;
  input [31:0] rf_rdata_a_ecc_i;
  wire [31:0] rf_rdata_a_ecc_i;
  wire [31:0] rf_rdata_b;
  input [31:0] rf_rdata_b_ecc_i;
  wire [31:0] rf_rdata_b_ecc_i;
  wire rf_ren_a;
  wire rf_ren_b;
  wire [4:0] rf_waddr_id;
  wire [4:0] rf_waddr_wb;
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  wire [31:0] rf_wdata_fwd_wb;
  wire [31:0] rf_wdata_id;
  wire [31:0] rf_wdata_lsu;
  wire [31:0] rf_wdata_wb;
  output [31:0] rf_wdata_wb_ecc_o;
  wire [31:0] rf_wdata_wb_ecc_o;
  wire rf_we_id;
  wire rf_we_lsu;
  wire rf_we_wb;
  output rf_we_wb_o;
  wire rf_we_wb_o;
  wire rf_write_wb;
  input rst_ni;
  wire rst_ni;
  wire trigger_match;
  wire unused_illegal_insn_id;
  wire unused_instr_done_wb;
  wire unused_instr_id_done;
  wire unused_instr_new_id;
  assign perf_iside_wait = id_in_ready & _02_;
  assign instr_req_gated = instr_req_int & fetch_enable_i[0];
  assign _00_ = ctrl_busy || if_busy;
  assign _01_ = _00_ || lsu_busy;
  assign _02_ = ~ instr_valid_id;
  assign lsu_resp_err = lsu_load_err | lsu_store_err;
  assign alert_major_internal_o = pc_mismatch_alert | csr_shadow_err;
  assign _03_ = lsu_load_resp_intg_err | lsu_store_resp_intg_err;
  assign alert_major_bus_o = _03_ | instr_intg_err;
  assign csr_addr = csr_access ? alu_operand_b_ex[11:0] : 12'h000;
  assign core_busy_o = _01_ ? 4'h5 : 4'ha;
  \$paramod$614bb09e9e953f1295bd420dba0675225b551eb5\ibex_cs_registers  cs_registers_i (
    .boot_addr_i(boot_addr_i),
    .branch_i(perf_branch),
    .branch_taken_i(perf_tbranch),
    .clk_i(clk_i),
    .csr_access_i(csr_access),
    .csr_addr_i(csr_addr),
    .csr_depc_o(csr_depc),
    .csr_mcause_i(exc_cause),
    .csr_mepc_o(csr_mepc),
    .csr_mstatus_mie_o(csr_mstatus_mie),
    .csr_mstatus_tw_o(csr_mstatus_tw),
    .csr_mtval_i(csr_mtval),
    .csr_mtval_o(crash_dump_mtval),
    .csr_mtvec_init_i(csr_mtvec_init),
    .csr_mtvec_o(csr_mtvec),
    .csr_op_en_i(csr_op_en),
    .csr_op_i(csr_op),
    .csr_pmp_addr_o(csr_pmp_addr),
    .csr_pmp_cfg_o(csr_pmp_cfg),
    .csr_pmp_mseccfg_o(csr_pmp_mseccfg),
    .csr_rdata_o(csr_rdata),
    .csr_restore_dret_i(csr_restore_dret_id),
    .csr_restore_mret_i(csr_restore_mret_id),
    .csr_save_cause_i(csr_save_cause),
    .csr_save_id_i(csr_save_id),
    .csr_save_if_i(csr_save_if),
    .csr_save_wb_i(csr_save_wb),
    .csr_shadow_err_o(csr_shadow_err),
    .csr_wdata_i(alu_operand_a_ex),
    .data_ind_timing_o(data_ind_timing),
    .debug_cause_i(debug_cause),
    .debug_csr_save_i(debug_csr_save),
    .debug_ebreakm_o(debug_ebreakm),
    .debug_ebreaku_o(debug_ebreaku),
    .debug_mode_entering_i(debug_mode_entering),
    .debug_mode_i(debug_mode),
    .debug_single_step_o(debug_single_step),
    .div_wait_i(perf_div_wait),
    .double_fault_seen_o(double_fault_seen_o),
    .dside_wait_i(perf_dside_wait),
    .dummy_instr_en_o(dummy_instr_en),
    .dummy_instr_mask_o(dummy_instr_mask),
    .dummy_instr_seed_en_o(dummy_instr_seed_en),
    .dummy_instr_seed_o(dummy_instr_seed),
    .hart_id_i(hart_id_i),
    .ic_scr_key_valid_i(ic_scr_key_valid_i),
    .icache_enable_o(icache_enable),
    .illegal_csr_insn_o(illegal_csr_insn_id),
    .instr_ret_compressed_i(perf_instr_ret_compressed_wb),
    .instr_ret_compressed_spec_i(perf_instr_ret_compressed_wb_spec),
    .instr_ret_i(perf_instr_ret_wb),
    .instr_ret_spec_i(perf_instr_ret_wb_spec),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_pending_o(irq_pending_o),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .irqs_o(irqs),
    .iside_wait_i(perf_iside_wait),
    .jump_i(perf_jump),
    .mem_load_i(perf_load),
    .mem_store_i(perf_store),
    .mul_wait_i(perf_mul_wait),
    .nmi_mode_i(nmi_mode),
    .pc_id_i(pc_id),
    .pc_if_i(pc_if),
    .pc_wb_i(pc_wb),
    .priv_mode_id_o(priv_mode_id),
    .priv_mode_lsu_o(priv_mode_lsu),
    .rst_ni(rst_ni),
    .trigger_match_o(trigger_match)
  );
  \$paramod$f81757853e3faaa896cea499cbdc8749225fde4b\ibex_ex_block  ex_block_i (
    .alu_adder_result_ex_o(alu_adder_result_ex),
    .alu_instr_first_cycle_i(instr_first_cycle_id),
    .alu_operand_a_i(alu_operand_a_ex),
    .alu_operand_b_i(alu_operand_b_ex),
    .alu_operator_i(alu_operator_ex),
    .branch_decision_o(branch_decision),
    .branch_target_o(branch_target_ex),
    .bt_a_operand_i(bt_a_operand),
    .bt_b_operand_i(bt_b_operand),
    .clk_i(clk_i),
    .data_ind_timing_i(data_ind_timing),
    .div_en_i(div_en_ex),
    .div_sel_i(div_sel_ex),
    .ex_valid_o(ex_valid),
    .imd_val_d_o(imd_val_d_ex),
    .imd_val_q_i(imd_val_q_ex),
    .imd_val_we_o(imd_val_we_ex),
    .mult_en_i(mult_en_ex),
    .mult_sel_i(mult_sel_ex),
    .multdiv_operand_a_i(multdiv_operand_a_ex),
    .multdiv_operand_b_i(multdiv_operand_b_ex),
    .multdiv_operator_i(multdiv_operator_ex),
    .multdiv_ready_id_i(multdiv_ready_id),
    .multdiv_signed_mode_i(multdiv_signed_mode_ex),
    .result_ex_o(result_ex),
    .rst_ni(rst_ni)
  );
  \$paramod$559b9fcb9d6ddcdae0bcb24d3976e1d2712a8b54\ibex_id_stage  id_stage_i (
    .alu_operand_a_ex_o(alu_operand_a_ex),
    .alu_operand_b_ex_o(alu_operand_b_ex),
    .alu_operator_ex_o(alu_operator_ex),
    .branch_decision_i(branch_decision),
    .bt_a_operand_o(bt_a_operand),
    .bt_b_operand_o(bt_b_operand),
    .clk_i(clk_i),
    .csr_access_o(csr_access),
    .csr_mstatus_mie_i(csr_mstatus_mie),
    .csr_mstatus_tw_i(csr_mstatus_tw),
    .csr_mtval_o(csr_mtval),
    .csr_op_en_o(csr_op_en),
    .csr_op_o(csr_op),
    .csr_rdata_i(csr_rdata),
    .csr_restore_dret_id_o(csr_restore_dret_id),
    .csr_restore_mret_id_o(csr_restore_mret_id),
    .csr_save_cause_o(csr_save_cause),
    .csr_save_id_o(csr_save_id),
    .csr_save_if_o(csr_save_if),
    .csr_save_wb_o(csr_save_wb),
    .ctrl_busy_o(ctrl_busy),
    .data_ind_timing_i(data_ind_timing),
    .debug_cause_o(debug_cause),
    .debug_csr_save_o(debug_csr_save),
    .debug_ebreakm_i(debug_ebreakm),
    .debug_ebreaku_i(debug_ebreaku),
    .debug_mode_entering_o(debug_mode_entering),
    .debug_mode_o(debug_mode),
    .debug_req_i(debug_req_i),
    .debug_single_step_i(debug_single_step),
    .div_en_ex_o(div_en_ex),
    .div_sel_ex_o(div_sel_ex),
    .en_wb_o(en_wb),
    .ex_valid_i(ex_valid),
    .exc_cause_o(exc_cause),
    .exc_pc_mux_o(exc_pc_mux_id),
    .icache_inval_o(icache_inval),
    .id_in_ready_o(id_in_ready),
    .illegal_c_insn_i(illegal_c_insn_id),
    .illegal_csr_insn_i(illegal_csr_insn_id),
    .illegal_insn_o(illegal_insn_id),
    .imd_val_d_ex_i(imd_val_d_ex),
    .imd_val_q_ex_o(imd_val_q_ex),
    .imd_val_we_ex_i(imd_val_we_ex),
    .instr_bp_taken_i(instr_bp_taken_id),
    .instr_exec_i(fetch_enable_i[0]),
    .instr_fetch_err_i(instr_fetch_err),
    .instr_fetch_err_plus2_i(instr_fetch_err_plus2),
    .instr_first_cycle_id_o(instr_first_cycle_id),
    .instr_id_done_o(instr_id_done),
    .instr_is_compressed_i(instr_is_compressed_id),
    .instr_perf_count_id_o(instr_perf_count_id),
    .instr_rdata_alu_i(instr_rdata_alu_id),
    .instr_rdata_c_i(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_id),
    .instr_req_o(instr_req_int),
    .instr_type_wb_o(instr_type_wb),
    .instr_valid_clear_o(instr_valid_clear),
    .instr_valid_i(instr_valid_id),
    .irq_nm_i(irq_nm_i),
    .irq_pending_i(irq_pending_o),
    .irqs_i(irqs),
    .lsu_addr_incr_req_i(lsu_addr_incr_req),
    .lsu_addr_last_i(lsu_addr_last),
    .lsu_load_err_i(lsu_load_err),
    .lsu_load_resp_intg_err_i(lsu_load_resp_intg_err),
    .lsu_req_done_i(lsu_req_done),
    .lsu_req_o(lsu_req),
    .lsu_resp_valid_i(lsu_resp_valid),
    .lsu_sign_ext_o(lsu_sign_ext),
    .lsu_store_err_i(lsu_store_err),
    .lsu_store_resp_intg_err_i(lsu_store_resp_intg_err),
    .lsu_type_o(lsu_type),
    .lsu_wdata_o(lsu_wdata),
    .lsu_we_o(lsu_we),
    .mult_en_ex_o(mult_en_ex),
    .mult_sel_ex_o(mult_sel_ex),
    .multdiv_operand_a_ex_o(multdiv_operand_a_ex),
    .multdiv_operand_b_ex_o(multdiv_operand_b_ex),
    .multdiv_operator_ex_o(multdiv_operator_ex),
    .multdiv_ready_id_o(multdiv_ready_id),
    .multdiv_signed_mode_ex_o(multdiv_signed_mode_ex),
    .nmi_mode_o(nmi_mode),
    .nt_branch_addr_o(nt_branch_addr),
    .nt_branch_mispredict_o(nt_branch_mispredict),
    .outstanding_load_wb_i(outstanding_load_wb),
    .outstanding_store_wb_i(outstanding_store_wb),
    .pc_id_i(pc_id),
    .pc_mux_o(pc_mux_id),
    .pc_set_o(pc_set),
    .perf_branch_o(perf_branch),
    .perf_div_wait_o(perf_div_wait),
    .perf_dside_wait_o(perf_dside_wait),
    .perf_jump_o(perf_jump),
    .perf_mul_wait_o(perf_mul_wait),
    .perf_tbranch_o(perf_tbranch),
    .priv_mode_i(priv_mode_id),
    .ready_wb_i(ready_wb),
    .result_ex_i(result_ex),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rd_a_wb_match_o(rf_rd_a_wb_match),
    .rf_rd_b_wb_match_o(rf_rd_b_wb_match),
    .rf_rdata_a_i(rf_rdata_a_ecc_i),
    .rf_rdata_b_i(rf_rdata_b_ecc_i),
    .rf_ren_a_o(rf_ren_a),
    .rf_ren_b_o(rf_ren_b),
    .rf_waddr_id_o(rf_waddr_id),
    .rf_waddr_wb_i(rf_waddr_wb),
    .rf_wdata_fwd_wb_i(rf_wdata_fwd_wb),
    .rf_wdata_id_o(rf_wdata_id),
    .rf_we_id_o(rf_we_id),
    .rf_write_wb_i(rf_write_wb),
    .rst_ni(rst_ni),
    .trigger_match_i(trigger_match)
  );
  \$paramod$3a67466f09f54788ef62f556ea1b090a6f71265e\ibex_if_stage  if_stage_i (
    .boot_addr_i(boot_addr_i),
    .branch_target_ex_i(branch_target_ex),
    .clk_i(clk_i),
    .csr_depc_i(csr_depc),
    .csr_mepc_i(csr_mepc),
    .csr_mtvec_i(csr_mtvec),
    .csr_mtvec_init_o(csr_mtvec_init),
    .dummy_instr_en_i(dummy_instr_en),
    .dummy_instr_id_o(dummy_instr_id),
    .dummy_instr_mask_i(dummy_instr_mask),
    .dummy_instr_seed_en_i(dummy_instr_seed_en),
    .dummy_instr_seed_i(dummy_instr_seed),
    .exc_cause(exc_cause),
    .exc_pc_mux_i(exc_pc_mux_id),
    .ic_data_addr_o(ic_data_addr_o),
    .ic_data_rdata_i(ic_data_rdata_i),
    .ic_data_req_o(ic_data_req_o),
    .ic_data_wdata_o(ic_data_wdata_o),
    .ic_data_write_o(ic_data_write_o),
    .ic_scr_key_req_o(ic_scr_key_req_o),
    .ic_scr_key_valid_i(ic_scr_key_valid_i),
    .ic_tag_addr_o(ic_tag_addr_o),
    .ic_tag_rdata_i(ic_tag_rdata_i),
    .ic_tag_req_o(ic_tag_req_o),
    .ic_tag_wdata_o(ic_tag_wdata_o),
    .ic_tag_write_o(ic_tag_write_o),
    .icache_ecc_error_o(icache_ecc_error),
    .icache_enable_i(icache_enable),
    .icache_inval_i(icache_inval),
    .id_in_ready_i(id_in_ready),
    .if_busy_o(if_busy),
    .illegal_c_insn_id_o(illegal_c_insn_id),
    .instr_addr_o(instr_addr_o),
    .instr_bp_taken_o(instr_bp_taken_id),
    .instr_bus_err_i(instr_err_i),
    .instr_fetch_err_o(instr_fetch_err),
    .instr_fetch_err_plus2_o(instr_fetch_err_plus2),
    .instr_gnt_i(instr_gnt_i),
    .instr_intg_err_o(instr_intg_err),
    .instr_is_compressed_id_o(instr_is_compressed_id),
    .instr_new_id_o(instr_new_id),
    .instr_rdata_alu_id_o(instr_rdata_alu_id),
    .instr_rdata_c_id_o(instr_rdata_c_id),
    .instr_rdata_i(instr_rdata_i),
    .instr_rdata_id_o(instr_rdata_id),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .instr_valid_clear_i(instr_valid_clear),
    .instr_valid_id_o(instr_valid_id),
    .nt_branch_addr_i(nt_branch_addr),
    .nt_branch_mispredict_i(nt_branch_mispredict),
    .pc_id_o(pc_id),
    .pc_if_o(pc_if),
    .pc_mismatch_alert_o(pc_mismatch_alert),
    .pc_mux_i(pc_mux_id),
    .pc_set_i(pc_set),
    .pmp_err_if_i(1'h0),
    .pmp_err_if_plus2_i(1'h0),
    .req_i(instr_req_gated),
    .rst_ni(rst_ni)
  );
  \$paramod\ibex_load_store_unit\MemECC=1'0\MemDataWidth=32'00000000000000000000000000100000  load_store_unit_i (
    .adder_result_ex_i(alu_adder_result_ex),
    .addr_incr_req_o(lsu_addr_incr_req),
    .addr_last_o(lsu_addr_last),
    .busy_o(lsu_busy),
    .clk_i(clk_i),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_bus_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_pmp_err_i(1'h0),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_out),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_o),
    .data_we_o(data_we_o),
    .load_err_o(lsu_load_err),
    .load_resp_intg_err_o(lsu_load_resp_intg_err),
    .lsu_rdata_o(rf_wdata_lsu),
    .lsu_rdata_valid_o(rf_we_lsu),
    .lsu_req_done_o(lsu_req_done),
    .lsu_req_i(lsu_req),
    .lsu_resp_valid_o(lsu_resp_valid),
    .lsu_sign_ext_i(lsu_sign_ext),
    .lsu_type_i(lsu_type),
    .lsu_wdata_i(lsu_wdata),
    .lsu_we_i(lsu_we),
    .perf_load_o(perf_load),
    .perf_store_o(perf_store),
    .rst_ni(rst_ni),
    .store_err_o(lsu_store_err),
    .store_resp_intg_err_o(lsu_store_resp_intg_err)
  );
  \$paramod$e62ff1c5d96b90691d79c5de030f6b584059d274\ibex_wb_stage  wb_stage_i (
    .clk_i(clk_i),
    .dummy_instr_id_i(dummy_instr_id),
    .dummy_instr_wb_o(dummy_instr_wb),
    .en_wb_i(en_wb),
    .instr_done_wb_o(instr_done_wb),
    .instr_is_compressed_id_i(instr_is_compressed_id),
    .instr_perf_count_id_i(instr_perf_count_id),
    .instr_type_wb_i(instr_type_wb),
    .lsu_resp_err_i(lsu_resp_err),
    .lsu_resp_valid_i(lsu_resp_valid),
    .outstanding_load_wb_o(outstanding_load_wb),
    .outstanding_store_wb_o(outstanding_store_wb),
    .pc_id_i(pc_id),
    .pc_wb_o(pc_wb),
    .perf_instr_ret_compressed_wb_o(perf_instr_ret_compressed_wb),
    .perf_instr_ret_compressed_wb_spec_o(perf_instr_ret_compressed_wb_spec),
    .perf_instr_ret_wb_o(perf_instr_ret_wb),
    .perf_instr_ret_wb_spec_o(perf_instr_ret_wb_spec),
    .ready_wb_o(ready_wb),
    .rf_waddr_id_i(rf_waddr_id),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_fwd_wb_o(rf_wdata_fwd_wb),
    .rf_wdata_id_i(rf_wdata_id),
    .rf_wdata_lsu_i(rf_wdata_lsu),
    .rf_wdata_wb_o(rf_wdata_wb),
    .rf_we_id_i(rf_we_id),
    .rf_we_lsu_i(rf_we_lsu),
    .rf_we_wb_o(rf_we_wb),
    .rf_write_wb_o(rf_write_wb),
    .rst_ni(rst_ni)
  );
  assign alert_minor_o = icache_ecc_error;
  assign crash_dump_o = { pc_id, pc_if, lsu_addr_last, csr_mepc, crash_dump_mtval };
  assign csr_wdata = alu_operand_a_ex;
  assign data_req_o = data_req_out;
  assign dummy_instr_id_o = dummy_instr_id;
  assign dummy_instr_wb_o = dummy_instr_wb;
  assign \g_no_pmp.unused_csr_pmp_addr  = csr_pmp_addr;
  assign \g_no_pmp.unused_csr_pmp_cfg  = csr_pmp_cfg;
  assign \g_no_pmp.unused_csr_pmp_mseccfg  = csr_pmp_mseccfg;
  assign \g_no_pmp.unused_priv_lvl_ls  = priv_mode_lsu;
  assign \gen_no_regfile_ecc.unused_rf_rd_a_wb_match  = rf_rd_a_wb_match;
  assign \gen_no_regfile_ecc.unused_rf_rd_b_wb_match  = rf_rd_b_wb_match;
  assign \gen_no_regfile_ecc.unused_rf_ren_a  = rf_ren_a;
  assign \gen_no_regfile_ecc.unused_rf_ren_b  = rf_ren_b;
  assign instr_exec = fetch_enable_i[0];
  assign \pmp_req_err[0]  = 1'h0;
  assign \pmp_req_err[1]  = 1'h0;
  assign \pmp_req_err[2]  = 1'h0;
  assign rf_ecc_err_comb = 1'h0;
  assign rf_raddr_a_o = rf_raddr_a;
  assign rf_raddr_b_o = rf_raddr_b;
  assign rf_rdata_a = rf_rdata_a_ecc_i;
  assign rf_rdata_b = rf_rdata_b_ecc_i;
  assign rf_waddr_wb_o = rf_waddr_wb;
  assign rf_wdata_wb_ecc_o = rf_wdata_wb;
  assign rf_we_wb_o = rf_we_wb;
  assign unused_illegal_insn_id = illegal_insn_id;
  assign unused_instr_done_wb = instr_done_wb;
  assign unused_instr_id_done = instr_id_done;
  assign unused_instr_new_id = instr_new_id;
endmodule

module \$paramod$b248027d9aa650110c5d3ad1fe588bd99fafd9b9\prim_buf (in_i, out_o);
  input [31:0] in_i;
  wire [31:0] in_i;
  output [31:0] out_o;
  wire [31:0] out_o;
  \$paramod\prim_generic_buf\Width=s32'00000000000000000000000000100000  \gen_generic.u_impl_generic  (
    .in_i(in_i),
    .out_o(out_o)
  );
endmodule

module \$paramod$d7b51dbfb2e8246ec0696b5c7e6a6ef4e9dcb0cd\ibex_counter (clk_i, rst_ni, counter_inc_i, counterh_we_i, counter_we_i, counter_val_i, counter_val_o, counter_val_upd_o);
  wire [63:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  input clk_i;
  wire clk_i;
  wire [63:0] counter;
  wire [63:0] counter_d;
  input counter_inc_i;
  wire counter_inc_i;
  wire [63:0] counter_load;
  reg [63:0] counter_q;
  wire [63:0] counter_upd;
  input [31:0] counter_val_i;
  wire [31:0] counter_val_i;
  output [63:0] counter_val_o;
  wire [63:0] counter_val_o;
  output [63:0] counter_val_upd_o;
  wire [63:0] counter_val_upd_o;
  input counter_we_i;
  wire counter_we_i;
  input counterh_we_i;
  wire counterh_we_i;
  input rst_ni;
  wire rst_ni;
  wire we;
  assign counter_upd = counter_q + 64'h0000000000000001;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q[63:32] <= 32'd0;
    else if (_04_) counter_q[63:32] <= counter_d[63:32];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) counter_q[31:0] <= 32'd0;
    else if (_05_) counter_q[31:0] <= counter_d[31:0];
  assign _01_ = | { we, counter_inc_i };
  assign _02_ = { we, counterh_we_i } != 2'h2;
  assign _03_ = { we, counterh_we_i } != 2'h3;
  assign _04_ = & { _01_, _02_ };
  assign _05_ = & { _01_, _03_ };
  assign we = counter_we_i | counterh_we_i;
  assign _00_ = counter_inc_i ? counter_upd : 64'hxxxxxxxxxxxxxxxx;
  assign counter_d = we ? counter_load : _00_;
  assign counter_load[63:32] = counterh_we_i ? counter_val_i : 32'hxxxxxxxx;
  assign counter_load[31:0] = counterh_we_i ? 32'hxxxxxxxx : counter_val_i;
  assign counter = counter_q;
  assign counter_val_o = counter_q;
  assign counter_val_upd_o = 64'h0000000000000000;
endmodule

module \$paramod$e62ff1c5d96b90691d79c5de030f6b584059d274\ibex_wb_stage (clk_i, rst_ni, en_wb_i, instr_type_wb_i, pc_id_i, instr_is_compressed_id_i, instr_perf_count_id_i, ready_wb_o, rf_write_wb_o, outstanding_load_wb_o, outstanding_store_wb_o, pc_wb_o, perf_instr_ret_wb_o, perf_instr_ret_compressed_wb_o, perf_instr_ret_wb_spec_o, perf_instr_ret_compressed_wb_spec_o, rf_waddr_id_i, rf_wdata_id_i, rf_we_id_i, dummy_instr_id_i, rf_wdata_lsu_i
, rf_we_lsu_i, rf_wdata_fwd_wb_o, rf_waddr_wb_o, rf_wdata_wb_o, rf_we_wb_o, dummy_instr_wb_o, lsu_resp_valid_i, lsu_resp_err_i, instr_done_wb_o);
  wire _00_;
  wire _01_;
  wire [31:0] _02_;
  wire [31:0] _03_;
  wire _04_;
  input clk_i;
  wire clk_i;
  input dummy_instr_id_i;
  wire dummy_instr_id_i;
  output dummy_instr_wb_o;
  wire dummy_instr_wb_o;
  input en_wb_i;
  wire en_wb_i;
  wire \g_bypass_wb.unused_clk ;
  wire \g_bypass_wb.unused_dummy_instr_id ;
  wire [1:0] \g_bypass_wb.unused_instr_type_wb ;
  wire [31:0] \g_bypass_wb.unused_pc_id ;
  wire \g_bypass_wb.unused_rst ;
  output instr_done_wb_o;
  wire instr_done_wb_o;
  input instr_is_compressed_id_i;
  wire instr_is_compressed_id_i;
  input instr_perf_count_id_i;
  wire instr_perf_count_id_i;
  input [1:0] instr_type_wb_i;
  wire [1:0] instr_type_wb_i;
  input lsu_resp_err_i;
  wire lsu_resp_err_i;
  input lsu_resp_valid_i;
  wire lsu_resp_valid_i;
  output outstanding_load_wb_o;
  wire outstanding_load_wb_o;
  output outstanding_store_wb_o;
  wire outstanding_store_wb_o;
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  output [31:0] pc_wb_o;
  wire [31:0] pc_wb_o;
  output perf_instr_ret_compressed_wb_o;
  wire perf_instr_ret_compressed_wb_o;
  output perf_instr_ret_compressed_wb_spec_o;
  wire perf_instr_ret_compressed_wb_spec_o;
  output perf_instr_ret_wb_o;
  wire perf_instr_ret_wb_o;
  output perf_instr_ret_wb_spec_o;
  wire perf_instr_ret_wb_spec_o;
  output ready_wb_o;
  wire ready_wb_o;
  input [4:0] rf_waddr_id_i;
  wire [4:0] rf_waddr_id_i;
  output [4:0] rf_waddr_wb_o;
  wire [4:0] rf_waddr_wb_o;
  output [31:0] rf_wdata_fwd_wb_o;
  wire [31:0] rf_wdata_fwd_wb_o;
  input [31:0] rf_wdata_id_i;
  wire [31:0] rf_wdata_id_i;
  input [31:0] rf_wdata_lsu_i;
  wire [31:0] rf_wdata_lsu_i;
  wire [31:0] \rf_wdata_wb_mux[0] ;
  wire [31:0] \rf_wdata_wb_mux[1] ;
  wire [1:0] rf_wdata_wb_mux_we;
  output [31:0] rf_wdata_wb_o;
  wire [31:0] rf_wdata_wb_o;
  input rf_we_id_i;
  wire rf_we_id_i;
  input rf_we_lsu_i;
  wire rf_we_lsu_i;
  output rf_we_wb_o;
  wire rf_we_wb_o;
  output rf_write_wb_o;
  wire rf_write_wb_o;
  input rst_ni;
  wire rst_ni;
  assign _00_ = instr_perf_count_id_i & en_wb_i;
  assign perf_instr_ret_wb_o = _00_ & _04_;
  assign _01_ = lsu_resp_valid_i & lsu_resp_err_i;
  assign perf_instr_ret_compressed_wb_o = perf_instr_ret_wb_o & instr_is_compressed_id_i;
  assign _02_ = { rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i, rf_we_id_i } & rf_wdata_id_i;
  assign _03_ = { rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i, rf_we_lsu_i } & rf_wdata_lsu_i;
  assign _04_ = ~ _01_;
  assign rf_wdata_wb_o = _02_ | _03_;
  assign rf_we_wb_o = | { rf_we_lsu_i, rf_we_id_i };
  assign dummy_instr_wb_o = dummy_instr_id_i;
  assign \g_bypass_wb.unused_clk  = clk_i;
  assign \g_bypass_wb.unused_dummy_instr_id  = dummy_instr_id_i;
  assign \g_bypass_wb.unused_instr_type_wb  = instr_type_wb_i;
  assign \g_bypass_wb.unused_pc_id  = pc_id_i;
  assign \g_bypass_wb.unused_rst  = rst_ni;
  assign instr_done_wb_o = 1'h0;
  assign outstanding_load_wb_o = 1'h0;
  assign outstanding_store_wb_o = 1'h0;
  assign pc_wb_o = 32'd0;
  assign perf_instr_ret_compressed_wb_spec_o = 1'h0;
  assign perf_instr_ret_wb_spec_o = 1'h0;
  assign ready_wb_o = 1'h1;
  assign rf_waddr_wb_o = rf_waddr_id_i;
  assign rf_wdata_fwd_wb_o = 32'd0;
  assign \rf_wdata_wb_mux[0]  = rf_wdata_id_i;
  assign \rf_wdata_wb_mux[1]  = rf_wdata_lsu_i;
  assign rf_wdata_wb_mux_we = { rf_we_lsu_i, rf_we_id_i };
  assign rf_write_wb_o = 1'h0;
endmodule

module \$paramod$f81757853e3faaa896cea499cbdc8749225fde4b\ibex_ex_block (clk_i, rst_ni, alu_operator_i, alu_operand_a_i, alu_operand_b_i, alu_instr_first_cycle_i, bt_a_operand_i, bt_b_operand_i, multdiv_operator_i, mult_en_i, div_en_i, mult_sel_i, div_sel_i, multdiv_signed_mode_i, multdiv_operand_a_i, multdiv_operand_b_i, multdiv_ready_id_i, data_ind_timing_i, imd_val_we_o, imd_val_d_o, imd_val_q_i
, alu_adder_result_ex_o, result_ex_o, branch_target_o, branch_decision_o, ex_valid_o);
  wire _0_;
  wire _1_;
  output [31:0] alu_adder_result_ex_o;
  wire [31:0] alu_adder_result_ex_o;
  wire [33:0] alu_adder_result_ext;
  wire alu_cmp_result;
  wire [63:0] alu_imd_val_d;
  wire [63:0] alu_imd_val_q;
  wire [1:0] alu_imd_val_we;
  input alu_instr_first_cycle_i;
  wire alu_instr_first_cycle_i;
  wire alu_is_equal_result;
  input [31:0] alu_operand_a_i;
  wire [31:0] alu_operand_a_i;
  input [31:0] alu_operand_b_i;
  wire [31:0] alu_operand_b_i;
  input [6:0] alu_operator_i;
  wire [6:0] alu_operator_i;
  wire [31:0] alu_result;
  output branch_decision_o;
  wire branch_decision_o;
  output [31:0] branch_target_o;
  wire [31:0] branch_target_o;
  input [31:0] bt_a_operand_i;
  wire [31:0] bt_a_operand_i;
  input [31:0] bt_b_operand_i;
  wire [31:0] bt_b_operand_i;
  input clk_i;
  wire clk_i;
  input data_ind_timing_i;
  wire data_ind_timing_i;
  input div_en_i;
  wire div_en_i;
  input div_sel_i;
  wire div_sel_i;
  output ex_valid_o;
  wire ex_valid_o;
  wire [31:0] \g_no_branch_target_alu.unused_bt_a_operand ;
  wire [31:0] \g_no_branch_target_alu.unused_bt_b_operand ;
  output [67:0] imd_val_d_o;
  wire [67:0] imd_val_d_o;
  input [67:0] imd_val_q_i;
  wire [67:0] imd_val_q_i;
  output [1:0] imd_val_we_o;
  wire [1:0] imd_val_we_o;
  input mult_en_i;
  wire mult_en_i;
  input mult_sel_i;
  wire mult_sel_i;
  wire [32:0] multdiv_alu_operand_a;
  wire [32:0] multdiv_alu_operand_b;
  wire [67:0] multdiv_imd_val_d;
  wire [1:0] multdiv_imd_val_we;
  input [31:0] multdiv_operand_a_i;
  wire [31:0] multdiv_operand_a_i;
  input [31:0] multdiv_operand_b_i;
  wire [31:0] multdiv_operand_b_i;
  input [1:0] multdiv_operator_i;
  wire [1:0] multdiv_operator_i;
  input multdiv_ready_id_i;
  wire multdiv_ready_id_i;
  wire [31:0] multdiv_result;
  wire multdiv_sel;
  input [1:0] multdiv_signed_mode_i;
  wire [1:0] multdiv_signed_mode_i;
  wire multdiv_valid;
  output [31:0] result_ex_o;
  wire [31:0] result_ex_o;
  input rst_ni;
  wire rst_ni;
  assign _0_ = ~ _1_;
  assign multdiv_sel = mult_sel_i | div_sel_i;
  assign _1_ = | alu_imd_val_we;
  assign ex_valid_o = multdiv_sel ? multdiv_valid : _0_;
  assign imd_val_d_o[33:0] = multdiv_sel ? multdiv_imd_val_d[33:0] : { 2'h0, alu_imd_val_d[31:0] };
  assign imd_val_d_o[67:34] = multdiv_sel ? multdiv_imd_val_d[67:34] : { 2'h0, alu_imd_val_d[63:32] };
  assign imd_val_we_o = multdiv_sel ? multdiv_imd_val_we : alu_imd_val_we;
  assign result_ex_o = multdiv_sel ? multdiv_result : alu_result;
  \$paramod$9d25aeb654852e23119bf7a06ef985a6167b1dc5\ibex_alu  alu_i (
    .adder_result_ext_o(alu_adder_result_ext),
    .adder_result_o(alu_adder_result_ex_o),
    .comparison_result_o(alu_cmp_result),
    .imd_val_d_o(alu_imd_val_d),
    .imd_val_q_i({ imd_val_q_i[31:0], imd_val_q_i[65:34] }),
    .imd_val_we_o(alu_imd_val_we),
    .instr_first_cycle_i(alu_instr_first_cycle_i),
    .is_equal_result_o(alu_is_equal_result),
    .multdiv_operand_a_i(multdiv_alu_operand_a),
    .multdiv_operand_b_i(multdiv_alu_operand_b),
    .multdiv_sel_i(multdiv_sel),
    .operand_a_i(alu_operand_a_i),
    .operand_b_i(alu_operand_b_i),
    .operator_i(alu_operator_i),
    .result_o(alu_result)
  );
  \$paramod$4a6e6da8bfee0acbe2a656982ede1618a80bf18f\ibex_multdiv_fast  \gen_multdiv_fast.multdiv_i  (
    .alu_adder_ext_i(alu_adder_result_ext),
    .alu_adder_i(alu_adder_result_ex_o),
    .alu_operand_a_o(multdiv_alu_operand_a),
    .alu_operand_b_o(multdiv_alu_operand_b),
    .clk_i(clk_i),
    .data_ind_timing_i(data_ind_timing_i),
    .div_en_i(div_en_i),
    .div_sel_i(div_sel_i),
    .equal_to_zero_i(alu_is_equal_result),
    .imd_val_d_o(multdiv_imd_val_d),
    .imd_val_q_i(imd_val_q_i),
    .imd_val_we_o(multdiv_imd_val_we),
    .mult_en_i(mult_en_i),
    .mult_sel_i(mult_sel_i),
    .multdiv_ready_id_i(multdiv_ready_id_i),
    .multdiv_result_o(multdiv_result),
    .op_a_i(multdiv_operand_a_i),
    .op_b_i(multdiv_operand_b_i),
    .operator_i(multdiv_operator_i),
    .rst_ni(rst_ni),
    .signed_mode_i(multdiv_signed_mode_i),
    .valid_o(multdiv_valid)
  );
  assign alu_imd_val_q = { imd_val_q_i[31:0], imd_val_q_i[65:34] };
  assign branch_decision_o = alu_cmp_result;
  assign branch_target_o = alu_adder_result_ex_o;
  assign \g_no_branch_target_alu.unused_bt_a_operand  = bt_a_operand_i;
  assign \g_no_branch_target_alu.unused_bt_b_operand  = bt_b_operand_i;
endmodule

module \$paramod$f81836c4f2c4509350656370cfb9555047cdf611\ibex_controller (clk_i, rst_ni, ctrl_busy_o, illegal_insn_i, ecall_insn_i, mret_insn_i, dret_insn_i, wfi_insn_i, ebrk_insn_i, csr_pipe_flush_i, instr_valid_i, instr_i, instr_compressed_i, instr_is_compressed_i, instr_bp_taken_i, instr_fetch_err_i, instr_fetch_err_plus2_i, pc_id_i, instr_valid_clear_o, id_in_ready_o, controller_run_o
, instr_exec_i, instr_req_o, pc_set_o, pc_mux_o, nt_branch_mispredict_o, exc_pc_mux_o, lsu_addr_last_i, load_err_i, store_err_i, mem_resp_intg_err_i, wb_exception_o, id_exception_o, branch_set_i, branch_not_set_i, jump_set_i, csr_mstatus_mie_i, irq_pending_i, irq_nm_ext_i, nmi_mode_o, debug_req_i, debug_cause_o
, debug_csr_save_o, debug_mode_o, debug_mode_entering_o, debug_single_step_i, debug_ebreakm_i, debug_ebreaku_i, trigger_match_i, csr_save_if_o, csr_save_id_o, csr_save_wb_o, csr_restore_mret_id_o, csr_restore_dret_id_o, csr_save_cause_o, csr_mtval_o, priv_mode_i, stall_id_i, stall_wb_i, flush_id_o, ready_wb_i, perf_jump_o, perf_tbranch_o
, exc_cause_o, irqs_i);
  wire [3:0] _000_;
  wire [3:0] _001_;
  wire [3:0] _002_;
  wire [3:0] _003_;
  wire [3:0] _004_;
  wire [3:0] _005_;
  wire [3:0] _006_;
  wire [3:0] _007_;
  wire [3:0] _008_;
  wire [3:0] _009_;
  wire [3:0] _010_;
  wire [3:0] _011_;
  wire [3:0] _012_;
  wire _013_;
  wire [3:0] _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire [3:0] _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire [6:0] _024_;
  wire [1:0] _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire [3:0] _029_;
  wire _030_;
  wire [2:0] _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire [3:0] _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire [6:0] _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire [3:0] _047_;
  wire _048_;
  wire [2:0] _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire [3:0] _053_;
  wire _054_;
  wire _055_;
  wire [6:0] _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire [3:0] _060_;
  wire _061_;
  wire [2:0] _062_;
  wire _063_;
  wire _064_;
  wire [31:0] _065_;
  wire [3:0] _066_;
  wire [6:0] _067_;
  wire _068_;
  wire _069_;
  wire [3:0] _070_;
  wire _071_;
  wire _072_;
  wire [31:0] _073_;
  wire [3:0] _074_;
  wire [6:0] _075_;
  wire _076_;
  wire _077_;
  wire [3:0] _078_;
  wire [3:0] _079_;
  wire [6:0] _080_;
  wire _081_;
  wire [3:0] _082_;
  wire _083_;
  wire [3:0] _084_;
  wire [6:0] _085_;
  wire [3:0] _086_;
  wire [3:0] _087_;
  wire [6:0] _088_;
  wire [3:0] _089_;
  wire [31:0] _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire [31:0] _161_;
  wire [31:0] _162_;
  wire [31:0] _163_;
  wire [31:0] _164_;
  wire [31:0] _165_;
  wire [6:0] _166_;
  wire [6:0] _167_;
  wire [6:0] _168_;
  wire [6:0] _169_;
  wire [6:0] _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire [3:0] _174_;
  wire [3:0] _175_;
  wire [3:0] _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire [2:0] _187_;
  wire [2:0] _188_;
  wire [2:0] _189_;
  wire [6:0] _190_;
  wire [1:0] _191_;
  wire [31:0] _192_;
  wire [31:0] _193_;
  wire [6:0] _194_;
  input branch_not_set_i;
  wire branch_not_set_i;
  input branch_set_i;
  wire branch_set_i;
  input clk_i;
  wire clk_i;
  output controller_run_o;
  wire controller_run_o;
  input csr_mstatus_mie_i;
  wire csr_mstatus_mie_i;
  output [31:0] csr_mtval_o;
  wire [31:0] csr_mtval_o;
  wire csr_pipe_flush;
  input csr_pipe_flush_i;
  wire csr_pipe_flush_i;
  output csr_restore_dret_id_o;
  wire csr_restore_dret_id_o;
  output csr_restore_mret_id_o;
  wire csr_restore_mret_id_o;
  output csr_save_cause_o;
  wire csr_save_cause_o;
  output csr_save_id_o;
  wire csr_save_id_o;
  output csr_save_if_o;
  wire csr_save_if_o;
  output csr_save_wb_o;
  wire csr_save_wb_o;
  output ctrl_busy_o;
  wire ctrl_busy_o;
  reg [3:0] ctrl_fsm_cs;
  wire [3:0] ctrl_fsm_ns;
  wire [2:0] debug_cause_d;
  output [2:0] debug_cause_o;
  wire [2:0] debug_cause_o;
  reg [2:0] debug_cause_q;
  output debug_csr_save_o;
  wire debug_csr_save_o;
  input debug_ebreakm_i;
  wire debug_ebreakm_i;
  input debug_ebreaku_i;
  wire debug_ebreaku_i;
  wire debug_mode_d;
  output debug_mode_entering_o;
  wire debug_mode_entering_o;
  output debug_mode_o;
  wire debug_mode_o;
  reg debug_mode_q;
  input debug_req_i;
  wire debug_req_i;
  input debug_single_step_i;
  wire debug_single_step_i;
  wire do_single_step_d;
  reg do_single_step_q;
  wire dret_insn;
  input dret_insn_i;
  wire dret_insn_i;
  wire ebreak_into_debug;
  wire ebrk_insn;
  input ebrk_insn_i;
  wire ebrk_insn_i;
  wire ebrk_insn_prio;
  wire ecall_insn;
  input ecall_insn_i;
  wire ecall_insn_i;
  wire ecall_insn_prio;
  wire enter_debug_mode;
  wire enter_debug_mode_prio_d;
  reg enter_debug_mode_prio_q;
  output [6:0] exc_cause_o;
  wire [6:0] exc_cause_o;
  output [1:0] exc_pc_mux_o;
  wire [1:0] exc_pc_mux_o;
  wire exc_req_d;
  wire exc_req_lsu;
  reg exc_req_q;
  wire flush_id;
  output flush_id_o;
  wire flush_id_o;
  wire \g_no_intg_irq_int.unused_mem_resp_intg_err_i ;
  wire halt_if;
  wire handle_irq;
  output id_exception_o;
  wire id_exception_o;
  output id_in_ready_o;
  wire id_in_ready_o;
  wire id_wb_pending;
  wire illegal_insn_d;
  input illegal_insn_i;
  wire illegal_insn_i;
  wire illegal_insn_prio;
  reg illegal_insn_q;
  input instr_bp_taken_i;
  wire instr_bp_taken_i;
  input [15:0] instr_compressed_i;
  wire [15:0] instr_compressed_i;
  input instr_exec_i;
  wire instr_exec_i;
  wire instr_fetch_err;
  input instr_fetch_err_i;
  wire instr_fetch_err_i;
  input instr_fetch_err_plus2_i;
  wire instr_fetch_err_plus2_i;
  wire instr_fetch_err_prio;
  input [31:0] instr_i;
  wire [31:0] instr_i;
  input instr_is_compressed_i;
  wire instr_is_compressed_i;
  output instr_req_o;
  wire instr_req_o;
  output instr_valid_clear_o;
  wire instr_valid_clear_o;
  input instr_valid_i;
  wire instr_valid_i;
  wire irq_enabled;
  wire irq_nm;
  input irq_nm_ext_i;
  wire irq_nm_ext_i;
  wire irq_nm_int;
  wire [4:0] irq_nm_int_cause;
  wire [31:0] irq_nm_int_mtval;
  input irq_pending_i;
  wire irq_pending_i;
  input [17:0] irqs_i;
  wire [17:0] irqs_i;
  input jump_set_i;
  wire jump_set_i;
  wire load_err_d;
  input load_err_i;
  wire load_err_i;
  wire load_err_prio;
  reg load_err_q;
  input [31:0] lsu_addr_last_i;
  wire [31:0] lsu_addr_last_i;
  input mem_resp_intg_err_i;
  wire mem_resp_intg_err_i;
  wire [3:0] mfip_id;
  wire mret_insn;
  input mret_insn_i;
  wire mret_insn_i;
  wire nmi_mode_d;
  output nmi_mode_o;
  wire nmi_mode_o;
  reg nmi_mode_q;
  output nt_branch_mispredict_o;
  wire nt_branch_mispredict_o;
  input [31:0] pc_id_i;
  wire [31:0] pc_id_i;
  output [2:0] pc_mux_o;
  wire [2:0] pc_mux_o;
  output pc_set_o;
  wire pc_set_o;
  output perf_jump_o;
  wire perf_jump_o;
  output perf_tbranch_o;
  wire perf_tbranch_o;
  input [1:0] priv_mode_i;
  wire [1:0] priv_mode_i;
  input ready_wb_i;
  wire ready_wb_i;
  wire retain_id;
  input rst_ni;
  wire rst_ni;
  wire special_req;
  wire special_req_flush_only;
  wire special_req_pc_change;
  wire stall;
  input stall_id_i;
  wire stall_id_i;
  input stall_wb_i;
  wire stall_wb_i;
  wire store_err_d;
  input store_err_i;
  wire store_err_i;
  wire store_err_prio;
  reg store_err_q;
  input trigger_match_i;
  wire trigger_match_i;
  wire unused_irq_timer;
  output wb_exception_o;
  wire wb_exception_o;
  wire wfi_insn;
  input wfi_insn_i;
  wire wfi_insn_i;
  assign _090_ = pc_id_i + 32'd2;
  assign ecall_insn = ecall_insn_i & instr_valid_i;
  assign mret_insn = mret_insn_i & instr_valid_i;
  assign dret_insn = dret_insn_i & instr_valid_i;
  assign wfi_insn = wfi_insn_i & instr_valid_i;
  assign ebrk_insn = ebrk_insn_i & instr_valid_i;
  assign csr_pipe_flush = csr_pipe_flush_i & instr_valid_i;
  assign instr_fetch_err = instr_fetch_err_i & instr_valid_i;
  assign illegal_insn_d = illegal_insn_i & _141_;
  assign exc_req_d = _153_ & _141_;
  assign _091_ = _144_ & debug_single_step_i;
  assign enter_debug_mode_prio_d = _156_ & _144_;
  assign _092_ = trigger_match_i & _144_;
  assign _093_ = _144_ & _145_;
  assign _094_ = _093_ & _146_;
  assign handle_irq = _094_ & _157_;
  assign _095_ = irq_pending_i & irq_enabled;
  assign _096_ = ebrk_insn_prio & ebreak_into_debug;
  assign _097_ = _147_ & _148_;
  assign id_in_ready_o = _097_ & _149_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) nmi_mode_q <= 1'h0;
    else if (_108_) nmi_mode_q <= nmi_mode_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) debug_mode_q <= 1'h0;
    else if (_109_) debug_mode_q <= debug_mode_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ctrl_fsm_cs <= 4'h0;
    else if (_110_) ctrl_fsm_cs <= ctrl_fsm_ns;
  assign _098_ = { _178_, handle_irq, _122_ } != 3'h6;
  assign _099_ = { _160_, mret_insn, _140_ } != 3'h4;
  assign _100_ = { _160_, _140_ } != 2'h3;
  assign _101_ = { _178_, handle_irq } != 2'h2;
  assign _102_ = | { _178_, _160_ };
  assign _103_ = { _160_, dret_insn, mret_insn, _140_ } != 4'h8;
  assign _104_ = { _160_, mret_insn, _140_ } != 3'h6;
  assign _105_ = | { _160_, _112_ };
  assign _106_ = { _181_, _135_ } != 2'h2;
  assign _107_ = { _180_, id_in_ready_o, handle_irq, enter_debug_mode } != 4'h8;
  assign _108_ = & { _101_, _099_, _100_, _102_, _098_ };
  assign _109_ = & { _103_, _105_, _100_, _104_ };
  assign _110_ = & { _107_, _106_ };
  assign _113_ = | { _182_, _184_, _185_, _177_ };
  assign _111_ = | { _182_, _178_, _177_ };
  assign _114_ = | { _180_, _182_, _184_, _179_, _178_, _177_, _160_ };
  assign _115_ = | { _181_, _183_, _160_ };
  assign _116_ = | { _181_, _182_, _183_, _177_ };
  assign _112_ = | { _182_, _177_ };
  assign _117_ = priv_mode_i == 2'h3;
  assign _118_ = ! priv_mode_i;
  assign _119_ = _137_ && _138_;
  assign _120_ = _126_ && _127_;
  assign _121_ = _120_ && _128_;
  assign _122_ = irq_nm_ext_i && _129_;
  assign _123_ = ebreak_into_debug && _130_;
  assign _124_ = ebrk_insn_prio && ebreak_into_debug;
  assign _125_ = enter_debug_mode_prio_q && _131_;
  assign _126_ = ! stall;
  assign _127_ = ! special_req;
  assign _128_ = ! id_wb_pending;
  assign _129_ = ! nmi_mode_q;
  assign _130_ = ! debug_mode_q;
  assign _131_ = ! _124_;
  assign _132_ = irq_nm_ext_i || irq_pending_i;
  assign _133_ = _132_ || debug_req_i;
  assign _134_ = _133_ || debug_mode_q;
  assign _135_ = _134_ || debug_single_step_i;
  assign _136_ = branch_set_i || jump_set_i;
  assign _137_ = enter_debug_mode || handle_irq;
  assign _138_ = stall || id_wb_pending;
  assign _139_ = exc_req_q || store_err_q;
  assign _140_ = _139_ || load_err_q;
  assign _141_ = ctrl_fsm_cs != 4'h6;
  assign _142_ = | irqs_i[14:0];
  assign _143_ = ~ ready_wb_i;
  assign _144_ = ~ debug_mode_q;
  assign _145_ = ~ debug_single_step_i;
  assign _146_ = ~ nmi_mode_q;
  assign _147_ = ~ stall;
  assign _148_ = ~ halt_if;
  assign _149_ = ~ retain_id;
  assign _150_ = ~ _159_;
  assign _151_ = ecall_insn | ebrk_insn;
  assign _152_ = _151_ | illegal_insn_d;
  assign _153_ = _152_ | instr_fetch_err;
  assign exc_req_lsu = store_err_i | load_err_i;
  assign special_req_flush_only = wfi_insn | csr_pipe_flush;
  assign _154_ = mret_insn | dret_insn;
  assign _155_ = _154_ | exc_req_d;
  assign special_req_pc_change = _155_ | exc_req_lsu;
  assign special_req = special_req_pc_change | special_req_flush_only;
  assign id_wb_pending = instr_valid_i | _143_;
  assign _156_ = debug_req_i | do_single_step_d;
  assign enter_debug_mode = enter_debug_mode_prio_d | _092_;
  assign irq_enabled = csr_mstatus_mie_i | _118_;
  assign _157_ = irq_nm_ext_i | _095_;
  assign _158_ = debug_mode_q | ebreak_into_debug;
  assign stall = stall_id_i | stall_wb_i;
  assign _159_ = stall | retain_id;
  assign instr_valid_clear_o = _150_ | flush_id;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) load_err_q <= 1'h0;
    else load_err_q <= load_err_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) store_err_q <= 1'h0;
    else store_err_q <= store_err_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) exc_req_q <= 1'h0;
    else exc_req_q <= exc_req_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) illegal_insn_q <= 1'h0;
    else illegal_insn_q <= illegal_insn_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) do_single_step_q <= 1'h0;
    else do_single_step_q <= do_single_step_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) enter_debug_mode_prio_q <= 1'h0;
    else enter_debug_mode_prio_q <= enter_debug_mode_prio_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) debug_cause_q <= 3'h0;
    else debug_cause_q <= debug_cause_d;
  assign _077_ = load_err_q ? 1'h1 : 1'h0;
  assign _072_ = store_err_q ? 1'h1 : 1'h0;
  assign _069_ = store_err_q ? 1'h0 : _077_;
  assign _055_ = ebrk_insn ? 1'h1 : 1'h0;
  assign _059_ = ebrk_insn ? 1'h0 : _069_;
  assign _064_ = ebrk_insn ? 1'h0 : _072_;
  assign _042_ = ecall_insn ? 1'h1 : 1'h0;
  assign _046_ = ecall_insn ? 1'h0 : _059_;
  assign _050_ = ecall_insn ? 1'h0 : _064_;
  assign _041_ = ecall_insn ? 1'h0 : _055_;
  assign _027_ = illegal_insn_q ? 1'h1 : 1'h0;
  assign _028_ = illegal_insn_q ? 1'h0 : _046_;
  assign _036_ = illegal_insn_q ? 1'h0 : _050_;
  assign _022_ = illegal_insn_q ? 1'h0 : _041_;
  assign _023_ = illegal_insn_q ? 1'h0 : _042_;
  assign instr_fetch_err_prio = instr_fetch_err ? 1'h1 : 1'h0;
  assign load_err_prio = instr_fetch_err ? 1'h0 : _028_;
  assign store_err_prio = instr_fetch_err ? 1'h0 : _036_;
  assign ebrk_insn_prio = instr_fetch_err ? 1'h0 : _022_;
  assign ecall_insn_prio = instr_fetch_err ? 1'h0 : _023_;
  assign illegal_insn_prio = instr_fetch_err ? 1'h0 : _027_;
  assign mfip_id = irqs_i[0] ? 4'h0 : _009_;
  assign _009_ = irqs_i[1] ? 4'h1 : _007_;
  assign _007_ = irqs_i[2] ? 4'h2 : _005_;
  assign _005_ = irqs_i[3] ? 4'h3 : _003_;
  assign _003_ = irqs_i[4] ? 4'h4 : _001_;
  assign _001_ = irqs_i[5] ? 4'h5 : _089_;
  assign _089_ = irqs_i[6] ? 4'h6 : _086_;
  assign _086_ = irqs_i[7] ? 4'h7 : _082_;
  assign _082_ = irqs_i[8] ? 4'h8 : _078_;
  assign _078_ = irqs_i[9] ? 4'h9 : _070_;
  assign _070_ = irqs_i[10] ? 4'ha : _060_;
  assign _060_ = irqs_i[11] ? 4'hb : _047_;
  assign _047_ = irqs_i[12] ? 4'hc : _029_;
  assign _029_ = irqs_i[13] ? 4'hd : _014_;
  assign _014_ = irqs_i[14] ? 4'he : 4'h0;
  assign halt_if = instr_exec_i ? _013_ : 1'h1;
  assign _012_ = _125_ ? 4'h8 : _002_;
  assign _011_ = wfi_insn ? 4'h2 : 4'h5;
  assign _054_ = dret_insn ? 1'h0 : 1'hx;
  assign _051_ = dret_insn ? 1'h1 : 1'h0;
  assign _062_ = dret_insn ? 3'h4 : 3'h0;
  assign _010_ = dret_insn ? 4'h5 : _011_;
  assign _071_ = mret_insn ? 1'h0 : 1'hx;
  assign _038_ = mret_insn ? 1'h1 : 1'h0;
  assign _083_ = mret_insn ? 1'h1 : _051_;
  assign _049_ = mret_insn ? 3'h3 : _062_;
  assign _040_ = mret_insn ? 1'hx : _054_;
  assign _008_ = mret_insn ? 4'h5 : _010_;
  assign _037_ = mret_insn ? 1'h0 : _051_;
  assign _006_ = _158_ ? 4'h9 : 4'h5;
  assign _057_ = _158_ ? 1'h0 : 1'h1;
  assign _088_ = _158_ ? 7'h00 : 7'h03;
  assign _161_ = load_err_prio ? lsu_addr_last_i : 32'd0;
  assign _162_ = store_err_prio ? lsu_addr_last_i : _161_;
  assign _163_ = ebrk_insn_prio ? 32'd0 : _162_;
  assign _164_ = ecall_insn_prio ? 32'd0 : _163_;
  assign _165_ = illegal_insn_prio ? _193_ : _164_;
  assign _073_ = instr_fetch_err_prio ? _192_ : _165_;
  assign _166_ = load_err_prio ? 7'h05 : 7'h00;
  assign _167_ = store_err_prio ? 7'h07 : _166_;
  assign _168_ = ebrk_insn_prio ? _088_ : _167_;
  assign _169_ = ecall_insn_prio ? _194_ : _168_;
  assign _170_ = illegal_insn_prio ? 7'h02 : _169_;
  assign _085_ = instr_fetch_err_prio ? 7'h01 : _170_;
  assign _044_ = instr_fetch_err_prio ? 1'h1 : _173_;
  assign _174_ = ebrk_insn_prio ? _006_ : 4'h5;
  assign _175_ = ecall_insn_prio ? 4'h5 : _174_;
  assign _176_ = illegal_insn_prio ? 4'h5 : _175_;
  assign _004_ = instr_fetch_err_prio ? 4'h5 : _176_;
  assign _171_ = ebrk_insn_prio ? _057_ : 1'h1;
  assign _172_ = ecall_insn_prio ? 1'h1 : _171_;
  assign _173_ = illegal_insn_prio ? 1'h1 : _172_;
  assign _026_ = _140_ ? _044_ : 1'h1;
  assign _002_ = _140_ ? _004_ : _008_;
  assign _065_ = _140_ ? _073_ : 32'd0;
  assign _052_ = _140_ ? _044_ : 1'h0;
  assign _080_ = _140_ ? _085_ : 7'h00;
  assign _063_ = _140_ ? _044_ : _083_;
  assign _025_ = _140_ ? _191_ : 2'h1;
  assign _031_ = _140_ ? 3'h2 : _049_;
  assign _021_ = _140_ ? 1'hx : _040_;
  assign _061_ = _140_ ? 1'hx : _071_;
  assign _015_ = _140_ ? 1'h0 : _037_;
  assign _016_ = _140_ ? 1'h0 : _038_;
  assign _018_ = _123_ ? 1'h1 : 1'h0;
  assign _075_ = irqs_i[17] ? 7'h23 : 7'h27;
  assign _067_ = irqs_i[15] ? 7'h2b : _075_;
  assign _056_[6] = _142_ ? 1'h0 : _067_[6];
  assign _056_[4:0] = _142_ ? { 1'h1, mfip_id } : _067_[4:0];
  assign _056_[5] = _142_ ? 1'h1 : _067_[5];
  assign _043_[6] = _122_ ? 1'h1 : _056_[6];
  assign _048_ = _122_ ? 1'h1 : 1'hx;
  assign _043_[4:0] = _122_ ? 5'h00 : _056_[4:0];
  assign _043_[5] = _122_ ? _190_[0] : _056_[5];
  assign _030_ = handle_irq ? _048_ : 1'hx;
  assign _024_ = handle_irq ? _043_ : 7'h00;
  assign _017_ = handle_irq ? 1'h1 : 1'h0;
  assign _081_ = handle_irq ? 1'h1 : _058_;
  assign _000_ = handle_irq ? 4'h7 : _074_;
  assign _076_ = enter_debug_mode ? 1'h1 : _081_;
  assign _087_ = enter_debug_mode ? 4'h8 : _000_;
  assign _068_ = _121_ ? _076_ : _058_;
  assign _084_ = _121_ ? _087_ : _074_;
  assign _058_ = _119_ ? 1'h1 : 1'h0;
  assign _033_ = _136_ ? jump_set_i : 1'h0;
  assign _034_ = _136_ ? branch_set_i : 1'h0;
  assign _032_ = _136_ ? 1'h1 : 1'h0;
  assign _079_ = ready_wb_i ? 4'h6 : ctrl_fsm_cs;
  assign _074_ = special_req ? _079_ : ctrl_fsm_cs;
  assign _035_ = special_req ? 1'h1 : 1'h0;
  assign _045_ = enter_debug_mode ? 1'h1 : _017_;
  assign _066_ = enter_debug_mode ? 4'h8 : _053_;
  assign _053_ = handle_irq ? 4'h7 : _039_;
  assign _039_ = id_in_ready_o ? 4'h5 : 4'hx;
  assign _020_ = _135_ ? 4'h4 : 4'hx;
  assign _019_ = _135_ ? 1'h1 : 1'h0;
  function [3:0] _413_;
    input [3:0] a;
    input [31:0] b;
    input [7:0] s;
    casez (s) // synopsys parallel_case
      8'b???????1:
        _413_ = b[3:0];
      8'b??????1?:
        _413_ = b[7:4];
      8'b?????1??:
        _413_ = b[11:8];
      8'b????1???:
        _413_ = b[15:12];
      8'b???1????:
        _413_ = b[19:16];
      8'b??1?????:
        _413_ = b[23:20];
      8'b?1??????:
        _413_ = b[27:24];
      8'b1???????:
        _413_ = b[31:28];
      default:
        _413_ = a;
    endcase
  endfunction
  assign ctrl_fsm_ns = _413_(4'h0, { 12'h143, _020_, _066_, _084_, 4'h5, _012_ }, { _185_, _184_, _183_, _181_, _180_, _179_, _111_, _160_ });
  function [0:0] _414_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _414_ = b[0:0];
      4'b??1?:
        _414_ = b[1:1];
      4'b?1??:
        _414_ = b[2:2];
      4'b1???:
        _414_ = b[3:3];
      default:
        _414_ = a;
    endcase
  endfunction
  assign pc_set_o = _414_(1'h0, { _032_, _017_, 1'h1, _063_ }, { _179_, _178_, _113_, _160_ });
  assign _185_ = ! ctrl_fsm_cs;
  function [2:0] _416_;
    input [2:0] a;
    input [8:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _416_ = b[2:0];
      3'b?1?:
        _416_ = b[5:3];
      3'b1??:
        _416_ = b[8:6];
      default:
        _416_ = a;
    endcase
  endfunction
  assign pc_mux_o = _416_(3'h0, { 6'h0a, _031_ }, { _179_, _111_, _160_ });
  assign instr_req_o = _114_ ? 1'h1 : 1'h0;
  assign _178_ = ctrl_fsm_cs == 4'h7;
  assign _180_ = ctrl_fsm_cs == 4'h4;
  assign _184_ = ctrl_fsm_cs == 4'h1;
  function [0:0] _421_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _421_ = b[0:0];
      2'b1?:
        _421_ = b[1:1];
      default:
        _421_ = a;
    endcase
  endfunction
  assign flush_id = _421_(1'h0, { 1'h1, _026_ }, { _116_, _160_ });
  assign _177_ = ctrl_fsm_cs == 4'h9;
  assign _182_ = ctrl_fsm_cs == 4'h8;
  assign _181_ = ctrl_fsm_cs == 4'h3;
  assign _183_ = ctrl_fsm_cs == 4'h2;
  assign retain_id = _179_ ? _035_ : 1'h0;
  assign _179_ = ctrl_fsm_cs == 4'h5;
  function [0:0] _428_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _428_ = b[0:0];
      3'b?1?:
        _428_ = b[1:1];
      3'b1??:
        _428_ = b[2:2];
      default:
        _428_ = a;
    endcase
  endfunction
  assign _013_ = _428_(1'h0, { _045_, _068_, 1'h1 }, { _180_, _179_, _115_ });
  assign _160_ = ctrl_fsm_cs == 4'h6;
  function [0:0] _430_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _430_ = b[0:0];
      2'b1?:
        _430_ = b[1:1];
      default:
        _430_ = a;
    endcase
  endfunction
  assign debug_mode_d = _430_(1'hx, { 1'h1, _021_ }, { _112_, _160_ });
  function [0:0] _431_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _431_ = b[0:0];
      2'b1?:
        _431_ = b[1:1];
      default:
        _431_ = a;
    endcase
  endfunction
  assign nmi_mode_d = _431_(1'hx, { _030_, _061_ }, { _178_, _160_ });
  assign perf_tbranch_o = _179_ ? _034_ : 1'h0;
  assign perf_jump_o = _179_ ? _033_ : 1'h0;
  assign csr_mtval_o = _160_ ? _065_ : 32'd0;
  function [0:0] _435_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _435_ = b[0:0];
      4'b??1?:
        _435_ = b[1:1];
      4'b?1??:
        _435_ = b[2:2];
      4'b1???:
        _435_ = b[3:3];
      default:
        _435_ = a;
    endcase
  endfunction
  assign csr_save_cause_o = _435_(1'h0, { _017_, 1'h1, _018_, _052_ }, { _178_, _182_, _177_, _160_ });
  assign csr_restore_dret_id_o = _160_ ? _015_ : 1'h0;
  assign csr_restore_mret_id_o = _160_ ? _016_ : 1'h0;
  assign csr_save_id_o = _177_ ? _018_ : 1'h0;
  function [0:0] _439_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _439_ = b[0:0];
      2'b1?:
        _439_ = b[1:1];
      default:
        _439_ = a;
    endcase
  endfunction
  assign csr_save_if_o = _439_(1'h0, { _017_, 1'h1 }, { _178_, _182_ });
  assign debug_mode_entering_o = _112_ ? 1'h1 : 1'h0;
  function [0:0] _441_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _441_ = b[0:0];
      2'b1?:
        _441_ = b[1:1];
      default:
        _441_ = a;
    endcase
  endfunction
  assign debug_csr_save_o = _441_(1'h0, { 1'h1, _018_ }, { _182_, _177_ });
  function [6:0] _442_;
    input [6:0] a;
    input [13:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _442_ = b[6:0];
      2'b1?:
        _442_ = b[13:7];
      default:
        _442_ = a;
    endcase
  endfunction
  assign exc_cause_o = _442_(7'h00, { _024_, _080_ }, { _178_, _160_ });
  function [1:0] _443_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _443_ = b[1:0];
      2'b1?:
        _443_ = b[3:2];
      default:
        _443_ = a;
    endcase
  endfunction
  assign exc_pc_mux_o = _443_(2'h1, { 2'h2, _025_ }, { _112_, _160_ });
  assign controller_run_o = _179_ ? 1'h1 : 1'h0;
  function [0:0] _445_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _445_ = b[0:0];
      2'b1?:
        _445_ = b[1:1];
      default:
        _445_ = a;
    endcase
  endfunction
  assign ctrl_busy_o = _445_(1'h1, { 1'h0, _019_ }, { _183_, _181_ });
  assign do_single_step_d = instr_valid_i ? _091_ : do_single_step_q;
  assign ebreak_into_debug = _117_ ? debug_ebreakm_i : _186_;
  assign _186_ = _118_ ? debug_ebreaku_i : 1'h0;
  assign debug_cause_d = trigger_match_i ? 3'h2 : _187_;
  assign _187_ = _096_ ? 3'h1 : _188_;
  assign _188_ = debug_req_i ? 3'h3 : _189_;
  assign _189_ = do_single_step_d ? 3'h4 : 3'h0;
  assign _190_ = irq_nm_ext_i ? 7'h3f : 7'h00;
  assign _191_ = debug_mode_q ? 2'h3 : 2'h0;
  assign _192_ = instr_fetch_err_plus2_i ? _090_ : pc_id_i;
  assign _193_ = instr_is_compressed_i ? { 16'h0000, instr_compressed_i } : instr_i;
  assign _194_ = _117_ ? 7'h0b : 7'h08;
  assign csr_save_wb_o = 1'h0;
  assign debug_cause_o = debug_cause_q;
  assign debug_mode_o = debug_mode_q;
  assign flush_id_o = flush_id;
  assign \g_no_intg_irq_int.unused_mem_resp_intg_err_i  = mem_resp_intg_err_i;
  assign id_exception_o = exc_req_d;
  assign irq_nm = irq_nm_ext_i;
  assign irq_nm_int = 1'h0;
  assign irq_nm_int_cause = 5'h00;
  assign irq_nm_int_mtval = 32'd0;
  assign load_err_d = load_err_i;
  assign nmi_mode_o = nmi_mode_q;
  assign nt_branch_mispredict_o = 1'h0;
  assign store_err_d = store_err_i;
  assign unused_irq_timer = irqs_i[16];
  assign wb_exception_o = 1'h0;
endmodule

module \$paramod\ibex_fetch_fifo\NUM_REQS=32'00000000000000000000000000000010\ResetAll=1'0 (clk_i, rst_ni, clear_i, busy_o, in_valid_i, in_addr_i, in_rdata_i, in_err_i, out_valid_o, out_ready_i, out_addr_o, out_rdata_o, out_err_o, out_err_plus2_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire addr_incr_two;
  wire aligned_is_compressed;
  output [1:0] busy_o;
  wire [1:0] busy_o;
  input clear_i;
  wire clear_i;
  input clk_i;
  wire clk_i;
  wire [2:0] entry_en;
  wire err;
  wire [2:0] err_d;
  wire err_plus2;
  reg [2:0] err_q;
  wire err_unaligned;
  input [31:0] in_addr_i;
  wire [31:0] in_addr_i;
  input in_err_i;
  wire in_err_i;
  input [31:0] in_rdata_i;
  wire [31:0] in_rdata_i;
  input in_valid_i;
  wire in_valid_i;
  wire [31:1] instr_addr_d;
  wire instr_addr_en;
  wire [31:1] instr_addr_next;
  reg [31:1] instr_addr_q;
  wire [2:0] lowest_free_entry;
  output [31:0] out_addr_o;
  wire [31:0] out_addr_o;
  output out_err_o;
  wire out_err_o;
  output out_err_plus2_o;
  wire out_err_plus2_o;
  output [31:0] out_rdata_o;
  wire [31:0] out_rdata_o;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire pop_fifo;
  wire [31:0] rdata;
  wire [95:0] rdata_d;
  reg [95:0] rdata_q;
  wire [31:0] rdata_unaligned;
  input rst_ni;
  wire rst_ni;
  wire unaligned_is_compressed;
  wire unused_addr_in;
  wire valid;
  wire [2:0] valid_d;
  wire [2:0] valid_popped;
  wire [2:0] valid_pushed;
  reg [2:0] valid_q;
  wire valid_unaligned;
  assign instr_addr_next = instr_addr_q + { 29'h00000000, _018_, addr_incr_two };
  assign _001_ = valid_q[0] & in_valid_i;
  assign unaligned_is_compressed = _015_ & _017_;
  assign aligned_is_compressed = _016_ & _017_;
  assign _002_ = out_ready_i & out_valid_o;
  assign pop_fifo = _002_ & _026_;
  assign lowest_free_entry[1] = _020_ & valid_q[0];
  assign valid_d[0] = valid_popped[0] & _021_;
  assign valid_d[1] = valid_popped[1] & _021_;
  assign _005_ = valid_pushed[1] & pop_fifo;
  assign _006_ = valid_pushed[2] & pop_fifo;
  assign _003_ = in_valid_i & lowest_free_entry[0];
  assign _007_ = _003_ & _022_;
  assign _004_ = in_valid_i & lowest_free_entry[1];
  assign _008_ = _004_ & _022_;
  assign lowest_free_entry[2] = _023_ & valid_q[1];
  assign valid_d[2] = valid_popped[2] & _021_;
  assign entry_en[2] = in_valid_i & lowest_free_entry[2];
  assign _009_ = err_q[1] & _024_;
  assign _010_ = valid_q[0] & err_q[0];
  assign _011_ = in_err_i & _029_;
  assign _012_ = err_q[1] & _025_;
  assign _013_ = in_err_i & valid_q[0];
  assign _014_ = _013_ & _025_;
  always @(posedge clk_i)
    if (entry_en[2]) rdata_q[95:64] <= in_rdata_i;
  always @(posedge clk_i)
    if (entry_en[2]) err_q[2] <= in_err_i;
  always @(posedge clk_i)
    if (entry_en[1]) rdata_q[63:32] <= rdata_d[63:32];
  always @(posedge clk_i)
    if (entry_en[1]) err_q[1] <= err_d[1];
  always @(posedge clk_i)
    if (entry_en[0]) rdata_q[31:0] <= rdata_d[31:0];
  always @(posedge clk_i)
    if (entry_en[0]) err_q[0] <= err_d[0];
  always @(posedge clk_i)
    if (instr_addr_en) instr_addr_q <= instr_addr_d;
  assign _015_ = rdata[17:16] != 2'h3;
  assign _016_ = rdata[1:0] != 2'h3;
  assign _017_ = ~ err;
  assign _018_ = ~ addr_incr_two;
  assign _019_ = ~ aligned_is_compressed;
  assign lowest_free_entry[0] = ~ valid_q[0];
  assign _020_ = ~ valid_q[1];
  assign _021_ = ~ clear_i;
  assign _022_ = ~ pop_fifo;
  assign _023_ = ~ valid_q[2];
  assign _024_ = ~ unaligned_is_compressed;
  assign _025_ = ~ err_q[0];
  assign instr_addr_en = clear_i | _002_;
  assign _026_ = _019_ | instr_addr_q[1];
  assign valid_pushed[0] = _003_ | valid_q[0];
  assign valid_pushed[1] = _004_ | valid_q[1];
  assign entry_en[0] = _005_ | _007_;
  assign entry_en[1] = _006_ | _008_;
  assign valid_pushed[2] = valid_q[2] | entry_en[2];
  assign valid = valid_q[0] | in_valid_i;
  assign _027_ = _009_ | err_q[0];
  assign _028_ = _010_ | _011_;
  assign _029_ = lowest_free_entry[0] | _024_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_q <= 3'h0;
    else valid_q <= valid_d;
  assign _000_ = unaligned_is_compressed ? valid : valid_unaligned;
  assign out_valid_o = instr_addr_q[1] ? _000_ : valid;
  assign out_err_plus2_o = instr_addr_q[1] ? err_plus2 : 1'h0;
  assign out_err_o = instr_addr_q[1] ? err_unaligned : err;
  assign out_rdata_o = instr_addr_q[1] ? rdata_unaligned : rdata;
  assign valid_unaligned = valid_q[1] ? 1'h1 : _001_;
  assign addr_incr_two = instr_addr_q[1] ? unaligned_is_compressed : aligned_is_compressed;
  assign instr_addr_d = clear_i ? in_addr_i[31:1] : instr_addr_next;
  assign valid_popped[0] = pop_fifo ? valid_pushed[1] : valid_pushed[0];
  assign valid_popped[1] = pop_fifo ? valid_pushed[2] : valid_pushed[1];
  assign rdata_d[31:0] = valid_q[1] ? rdata_q[63:32] : in_rdata_i;
  assign rdata_d[63:32] = valid_q[2] ? rdata_q[95:64] : in_rdata_i;
  assign err_d[0] = valid_q[1] ? err_q[1] : in_err_i;
  assign err_d[1] = valid_q[2] ? err_q[2] : in_err_i;
  assign valid_popped[2] = pop_fifo ? 1'h0 : valid_pushed[2];
  assign rdata = valid_q[0] ? rdata_q[31:0] : in_rdata_i;
  assign err = valid_q[0] ? err_q[0] : in_err_i;
  assign rdata_unaligned = valid_q[1] ? { rdata_q[47:32], rdata[31:16] } : { in_rdata_i[15:0], rdata[31:16] };
  assign err_unaligned = valid_q[1] ? _027_ : _028_;
  assign err_plus2 = valid_q[1] ? _012_ : _014_;
  assign busy_o = valid_q[2:1];
  assign err_d[2] = in_err_i;
  assign out_addr_o = { instr_addr_q, 1'h0 };
  assign rdata_d[95:64] = in_rdata_i;
  assign unused_addr_in = in_addr_i[0];
endmodule

module \$paramod\ibex_load_store_unit\MemECC=1'0\MemDataWidth=32'00000000000000000000000000100000 (clk_i, rst_ni, data_req_o, data_gnt_i, data_rvalid_i, data_bus_err_i, data_pmp_err_i, data_addr_o, data_we_o, data_be_o, data_wdata_o, data_rdata_i, lsu_we_i, lsu_type_i, lsu_wdata_i, lsu_sign_ext_i, lsu_rdata_o, lsu_rdata_valid_o, lsu_req_i, adder_result_ex_i, addr_incr_req_o
, addr_last_o, lsu_req_done_o, lsu_resp_valid_o, load_err_o, load_resp_intg_err_o, store_err_o, store_resp_intg_err_o, busy_o, perf_load_o, perf_store_o);
  wire _000_;
  wire [3:0] _001_;
  wire _002_;
  wire _003_;
  wire [2:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire _011_;
  wire _012_;
  wire [3:0] _013_;
  wire _014_;
  wire [2:0] _015_;
  wire _016_;
  wire _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire _020_;
  wire _021_;
  wire [3:0] _022_;
  wire _023_;
  wire [2:0] _024_;
  wire _025_;
  wire _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire _029_;
  wire [3:0] _030_;
  wire _031_;
  wire [2:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire _035_;
  wire [3:0] _036_;
  wire _037_;
  wire [2:0] _038_;
  wire _039_;
  wire [3:0] _040_;
  wire _041_;
  wire [2:0] _042_;
  wire [2:0] _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire [1:0] _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire [1:0] _100_;
  wire _101_;
  wire [2:0] _102_;
  wire [2:0] _103_;
  wire [2:0] _104_;
  input [31:0] adder_result_ex_i;
  wire [31:0] adder_result_ex_i;
  output addr_incr_req_o;
  wire addr_incr_req_o;
  wire [31:0] addr_last_d;
  output [31:0] addr_last_o;
  wire [31:0] addr_last_o;
  reg [31:0] addr_last_q;
  wire addr_update;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire ctrl_update;
  wire [31:0] data_addr;
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  wire [31:0] data_addr_w_aligned;
  wire [3:0] data_be;
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  input data_bus_err_i;
  wire data_bus_err_i;
  input data_gnt_i;
  wire data_gnt_i;
  wire data_intg_err;
  wire [1:0] data_offset;
  wire data_or_pmp_err;
  input data_pmp_err_i;
  wire data_pmp_err_i;
  wire [31:0] data_rdata_ext;
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  output data_req_o;
  wire data_req_o;
  input data_rvalid_i;
  wire data_rvalid_i;
  reg data_sign_ext_q;
  reg [1:0] data_type_q;
  wire [31:0] data_wdata;
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  output data_we_o;
  wire data_we_o;
  reg data_we_q;
  wire handle_misaligned_d;
  reg handle_misaligned_q;
  output load_err_o;
  wire load_err_o;
  output load_resp_intg_err_o;
  wire load_resp_intg_err_o;
  reg [2:0] ls_fsm_cs;
  wire [2:0] ls_fsm_ns;
  wire lsu_err_d;
  reg lsu_err_q;
  output [31:0] lsu_rdata_o;
  wire [31:0] lsu_rdata_o;
  output lsu_rdata_valid_o;
  wire lsu_rdata_valid_o;
  output lsu_req_done_o;
  wire lsu_req_done_o;
  input lsu_req_i;
  wire lsu_req_i;
  output lsu_resp_valid_o;
  wire lsu_resp_valid_o;
  input lsu_sign_ext_i;
  wire lsu_sign_ext_i;
  input [1:0] lsu_type_i;
  wire [1:0] lsu_type_i;
  input [31:0] lsu_wdata_i;
  wire [31:0] lsu_wdata_i;
  input lsu_we_i;
  wire lsu_we_i;
  output perf_load_o;
  wire perf_load_o;
  output perf_store_o;
  wire perf_store_o;
  wire pmp_err_d;
  reg pmp_err_q;
  wire [31:0] rdata_b_ext;
  wire [31:0] rdata_h_ext;
  reg [1:0] rdata_offset_q;
  reg [31:8] rdata_q;
  wire rdata_update;
  wire [31:0] rdata_w_ext;
  input rst_ni;
  wire rst_ni;
  wire split_misaligned_access;
  output store_err_o;
  wire store_err_o;
  output store_resp_intg_err_o;
  wire store_resp_intg_err_o;
  assign _044_ = data_gnt_i & _076_;
  assign lsu_req_done_o = _082_ & _067_;
  assign lsu_resp_valid_o = _084_ & _068_;
  assign _045_ = _068_ & data_rvalid_i;
  assign _046_ = _045_ & _080_;
  assign lsu_rdata_valid_o = _046_ & _075_;
  assign _047_ = data_or_pmp_err & _075_;
  assign load_err_o = _047_ & lsu_resp_valid_o;
  assign _048_ = data_or_pmp_err & data_we_q;
  assign store_err_o = _048_ & lsu_resp_valid_o;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) lsu_err_q <= 1'h0;
    else if (_058_) lsu_err_q <= lsu_err_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_q <= 24'h000000;
    else if (rdata_update) rdata_q <= data_rdata_i[31:8];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_we_q <= 1'h0;
    else if (ctrl_update) data_we_q <= lsu_we_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_sign_ext_q <= 1'h0;
    else if (ctrl_update) data_sign_ext_q <= lsu_sign_ext_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) data_type_q <= 2'h0;
    else if (ctrl_update) data_type_q <= lsu_type_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_offset_q <= 2'h0;
    else if (ctrl_update) rdata_offset_q <= adder_result_ex_i[1:0];
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) addr_last_q <= 32'd0;
    else if (addr_update) addr_last_q <= addr_last_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) pmp_err_q <= 1'h0;
    else if (_059_) pmp_err_q <= pmp_err_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) handle_misaligned_q <= 1'h0;
    else if (_060_) handle_misaligned_q <= handle_misaligned_d;
  assign _049_ = | { _068_, _085_, _087_ };
  assign _050_ = { _072_, _087_ } != 2'h1;
  assign _051_ = { data_rvalid_i, _085_ } != 2'h1;
  assign _052_ = { lsu_req_i, _068_ } != 2'h1;
  assign _053_ = | { _088_, _068_, _086_, _087_ };
  assign _054_ = { _072_, data_gnt_i, _087_ } != 3'h1;
  assign _055_ = { _071_, _086_ } != 2'h1;
  assign _056_ = { lsu_req_i, data_gnt_i, _068_ } != 3'h5;
  assign _057_ = { _071_, _088_ } != 2'h1;
  assign _058_ = & { _052_, _049_, _051_, _050_ };
  assign _059_ = & { _049_, _051_, _050_ };
  assign _060_ = & { _052_, _057_, _055_, _054_, _053_, _056_ };
  assign _061_ = | { _085_, _087_ };
  assign _062_ = | { _086_, _087_, _088_ };
  assign _063_ = | { _086_, _088_ };
  assign _067_ = ! ls_fsm_ns;
  assign _069_ = _064_ && _073_;
  assign _070_ = _065_ && _066_;
  assign split_misaligned_access = _069_ || _070_;
  assign _072_ = data_rvalid_i || pmp_err_q;
  assign _071_ = data_gnt_i || pmp_err_q;
  assign _073_ = | adder_result_ex_i[1:0];
  assign busy_o = | ls_fsm_cs;
  assign _074_ = ~ lsu_we_i;
  assign _076_ = ~ _081_;
  assign _077_ = ~ data_gnt_i;
  assign _078_ = ~ lsu_err_q;
  assign _079_ = ~ data_bus_err_i;
  assign _080_ = ~ data_or_pmp_err;
  assign _075_ = ~ data_we_q;
  assign _081_ = data_bus_err_i | pmp_err_q;
  assign _082_ = lsu_req_i | busy_o;
  assign _083_ = lsu_err_q | data_bus_err_i;
  assign data_or_pmp_err = _083_ | pmp_err_q;
  assign _084_ = data_rvalid_i | pmp_err_q;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) ls_fsm_cs <= 3'h0;
    else ls_fsm_cs <= ls_fsm_ns;
  assign _043_ = data_rvalid_i ? 3'h0 : ls_fsm_cs;
  assign _020_ = data_rvalid_i ? _075_ : 1'h0;
  assign _039_ = data_rvalid_i ? _079_ : 1'h0;
  assign _025_ = data_rvalid_i ? data_bus_err_i : 1'hx;
  assign _026_ = data_rvalid_i ? data_pmp_err_i : 1'hx;
  assign _041_ = _071_ ? 1'h0 : 1'hx;
  assign _042_ = _071_ ? 3'h0 : ls_fsm_cs;
  assign _035_ = _071_ ? _078_ : 1'h0;
  assign _037_ = data_gnt_i ? 1'h0 : 1'hx;
  assign _038_ = data_gnt_i ? 3'h4 : ls_fsm_cs;
  assign _031_ = _072_ ? _077_ : _037_;
  assign _029_ = _072_ ? _044_ : 1'h0;
  assign _032_ = _072_ ? _104_ : _038_;
  assign _011_ = _072_ ? _075_ : 1'h0;
  assign _016_ = _072_ ? _081_ : 1'hx;
  assign _017_ = _072_ ? data_pmp_err_i : 1'hx;
  assign _024_ = _071_ ? 3'h2 : ls_fsm_cs;
  assign _023_ = _071_ ? 1'h1 : 1'hx;
  assign _021_ = _071_ ? 1'h1 : 1'h0;
  assign _015_ = data_gnt_i ? _102_ : _103_;
  assign _014_ = data_gnt_i ? split_misaligned_access : 1'hx;
  assign _012_ = data_gnt_i ? 1'h1 : 1'h0;
  assign _004_ = lsu_req_i ? _015_ : ls_fsm_cs;
  assign _003_ = lsu_req_i ? _014_ : 1'hx;
  assign _000_ = lsu_req_i ? _012_ : 1'h0;
  assign _007_ = lsu_req_i ? lsu_we_i : 1'h0;
  assign _006_ = lsu_req_i ? _074_ : 1'h0;
  assign _005_ = lsu_req_i ? 1'h0 : 1'hx;
  assign _008_ = lsu_req_i ? data_pmp_err_i : 1'h0;
  assign _002_ = lsu_req_i ? 1'h1 : 1'h0;
  function [2:0] _190_;
    input [2:0] a;
    input [14:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _190_ = b[2:0];
      5'b???1?:
        _190_ = b[5:3];
      5'b??1??:
        _190_ = b[8:6];
      5'b?1???:
        _190_ = b[11:9];
      5'b1????:
        _190_ = b[14:12];
      default:
        _190_ = a;
    endcase
  endfunction
  assign ls_fsm_ns = _190_(3'h0, { _004_, _024_, _032_, _042_, _043_ }, { _068_, _088_, _087_, _086_, _085_ });
  function [0:0] _191_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _191_ = b[0:0];
      3'b?1?:
        _191_ = b[1:1];
      3'b1??:
        _191_ = b[2:2];
      default:
        _191_ = a;
    endcase
  endfunction
  assign lsu_err_d = _191_(1'hx, { _005_, _016_, _025_ }, { _068_, _087_, _085_ });
  function [0:0] _192_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _192_ = b[0:0];
      3'b?1?:
        _192_ = b[1:1];
      3'b1??:
        _192_ = b[2:2];
      default:
        _192_ = a;
    endcase
  endfunction
  assign pmp_err_d = _192_(1'hx, { _008_, _017_, _026_ }, { _068_, _087_, _085_ });
  function [0:0] _193_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _193_ = b[0:0];
      4'b??1?:
        _193_ = b[1:1];
      4'b?1??:
        _193_ = b[2:2];
      4'b1???:
        _193_ = b[3:3];
      default:
        _193_ = a;
    endcase
  endfunction
  assign handle_misaligned_d = _193_(1'hx, { _003_, _023_, _031_, _041_ }, { _068_, _088_, _087_, _086_ });
  function [0:0] _194_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _194_ = b[0:0];
      2'b1?:
        _194_ = b[1:1];
      default:
        _194_ = a;
    endcase
  endfunction
  assign ctrl_update = _194_(1'h0, { _000_, _021_ }, { _068_, _063_ });
  function [0:0] _195_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _195_ = b[0:0];
      5'b???1?:
        _195_ = b[1:1];
      5'b??1??:
        _195_ = b[2:2];
      5'b?1???:
        _195_ = b[3:3];
      5'b1????:
        _195_ = b[4:4];
      default:
        _195_ = a;
    endcase
  endfunction
  assign addr_update = _195_(1'h0, { _000_, _021_, _029_, _035_, _039_ }, { _068_, _088_, _087_, _086_, _085_ });
  assign perf_store_o = _068_ ? _007_ : 1'h0;
  assign perf_load_o = _068_ ? _006_ : 1'h0;
  function [0:0] _198_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _198_ = b[0:0];
      2'b1?:
        _198_ = b[1:1];
      default:
        _198_ = a;
    endcase
  endfunction
  assign data_req_o = _198_(1'h0, { _002_, 1'h1 }, { _068_, _062_ });
  assign _088_ = ls_fsm_cs == 3'h1;
  assign _068_ = ! ls_fsm_cs;
  function [0:0] _201_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _201_ = b[0:0];
      2'b1?:
        _201_ = b[1:1];
      default:
        _201_ = a;
    endcase
  endfunction
  assign rdata_update = _201_(1'h0, { _011_, _020_ }, { _087_, _085_ });
  function [0:0] _202_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _202_ = b[0:0];
      2'b1?:
        _202_ = b[1:1];
      default:
        _202_ = a;
    endcase
  endfunction
  assign addr_incr_req_o = _202_(1'h0, { handle_misaligned_q, 1'h1 }, { _086_, _061_ });
  assign _085_ = ls_fsm_cs == 3'h4;
  assign _086_ = ls_fsm_cs == 3'h3;
  assign _087_ = ls_fsm_cs == 3'h2;
  function [31:0] _206_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _206_ = b[31:0];
      3'b?1?:
        _206_ = b[63:32];
      3'b1??:
        _206_ = b[95:64];
      default:
        _206_ = a;
    endcase
  endfunction
  assign lsu_rdata_o = _206_(32'hxxxxxxxx, { rdata_w_ext, rdata_h_ext, rdata_b_ext }, { _092_, _091_, _090_ });
  assign _090_ = | _089_;
  assign _089_[0] = data_type_q == 2'h2;
  assign _089_[1] = data_type_q == 2'h3;
  assign _091_ = data_type_q == 2'h1;
  assign _092_ = ! data_type_q;
  assign _033_ = data_sign_ext_q ? { data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31:24] } : { 24'h000000, data_rdata_i[31:24] };
  assign _027_ = data_sign_ext_q ? { data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23:16] } : { 24'h000000, data_rdata_i[23:16] };
  assign _018_ = data_sign_ext_q ? { data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15:8] } : { 24'h000000, data_rdata_i[15:8] };
  assign _009_ = data_sign_ext_q ? { data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7:0] } : { 24'h000000, data_rdata_i[7:0] };
  function [31:0] _216_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _216_ = b[31:0];
      4'b??1?:
        _216_ = b[63:32];
      4'b?1??:
        _216_ = b[95:64];
      4'b1???:
        _216_ = b[127:96];
      default:
        _216_ = a;
    endcase
  endfunction
  assign rdata_b_ext = _216_(32'hxxxxxxxx, { _009_, _018_, _027_, _033_ }, { _096_, _095_, _094_, _093_ });
  assign _034_ = data_sign_ext_q ? { data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7], data_rdata_i[7:0], rdata_q[31:24] } : { 16'h0000, data_rdata_i[7:0], rdata_q[31:24] };
  assign _028_ = data_sign_ext_q ? { data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31], data_rdata_i[31:16] } : { 16'h0000, data_rdata_i[31:16] };
  assign _019_ = data_sign_ext_q ? { data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23], data_rdata_i[23:8] } : { 16'h0000, data_rdata_i[23:8] };
  assign _010_ = data_sign_ext_q ? { data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15], data_rdata_i[15:0] } : { 16'h0000, data_rdata_i[15:0] };
  function [31:0] _221_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _221_ = b[31:0];
      4'b??1?:
        _221_ = b[63:32];
      4'b?1??:
        _221_ = b[95:64];
      4'b1???:
        _221_ = b[127:96];
      default:
        _221_ = a;
    endcase
  endfunction
  assign rdata_h_ext = _221_(32'hxxxxxxxx, { _010_, _019_, _028_, _034_ }, { _096_, _095_, _094_, _093_ });
  function [31:0] _222_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _222_ = b[31:0];
      4'b??1?:
        _222_ = b[63:32];
      4'b?1??:
        _222_ = b[95:64];
      4'b1???:
        _222_ = b[127:96];
      default:
        _222_ = a;
    endcase
  endfunction
  assign rdata_w_ext = _222_(32'hxxxxxxxx, { data_rdata_i, data_rdata_i[7:0], rdata_q, data_rdata_i[15:0], rdata_q[31:16], data_rdata_i[23:0], rdata_q[31:24] }, { _096_, _095_, _094_, _093_ });
  assign _093_ = rdata_offset_q == 2'h3;
  assign _094_ = rdata_offset_q == 2'h2;
  assign _095_ = rdata_offset_q == 2'h1;
  assign _096_ = ! rdata_offset_q;
  function [31:0] _227_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _227_ = b[31:0];
      4'b??1?:
        _227_ = b[63:32];
      4'b?1??:
        _227_ = b[95:64];
      4'b1???:
        _227_ = b[127:96];
      default:
        _227_ = a;
    endcase
  endfunction
  assign data_wdata_o = _227_(32'hxxxxxxxx, { lsu_wdata_i, lsu_wdata_i[23:0], lsu_wdata_i[31:24], lsu_wdata_i[15:0], lsu_wdata_i[31:16], lsu_wdata_i[7:0], lsu_wdata_i[31:8] }, { _099_, _098_, _097_, _066_ });
  function [3:0] _228_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _228_ = b[3:0];
      4'b??1?:
        _228_ = b[7:4];
      4'b?1??:
        _228_ = b[11:8];
      4'b1???:
        _228_ = b[15:12];
      default:
        _228_ = a;
    endcase
  endfunction
  assign _040_ = _228_(4'hx, 16'h1248, { _099_, _098_, _097_, _066_ });
  function [3:0] _229_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _229_ = b[3:0];
      4'b??1?:
        _229_ = b[7:4];
      4'b?1??:
        _229_ = b[11:8];
      4'b1???:
        _229_ = b[15:12];
      default:
        _229_ = a;
    endcase
  endfunction
  assign _036_ = _229_(4'hx, 16'h36c8, { _099_, _098_, _097_, _066_ });
  assign _030_ = handle_misaligned_q ? 4'h1 : _036_;
  function [3:0] _231_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _231_ = b[3:0];
      4'b??1?:
        _231_ = b[7:4];
      4'b?1??:
        _231_ = b[11:8];
      4'b1???:
        _231_ = b[15:12];
      default:
        _231_ = a;
    endcase
  endfunction
  assign _022_ = _231_(4'hx, 16'h0137, { _099_, _098_, _097_, _066_ });
  function [3:0] _232_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _232_ = b[3:0];
      4'b??1?:
        _232_ = b[7:4];
      4'b?1??:
        _232_ = b[11:8];
      4'b1???:
        _232_ = b[15:12];
      default:
        _232_ = a;
    endcase
  endfunction
  assign _013_ = _232_(4'hx, 16'hfec8, { _099_, _098_, _097_, _066_ });
  assign _066_ = adder_result_ex_i[1:0] == 2'h3;
  assign _097_ = adder_result_ex_i[1:0] == 2'h2;
  assign _098_ = adder_result_ex_i[1:0] == 2'h1;
  assign _099_ = ! adder_result_ex_i[1:0];
  assign _001_ = handle_misaligned_q ? _022_ : _013_;
  function [3:0] _238_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _238_ = b[3:0];
      3'b?1?:
        _238_ = b[7:4];
      3'b1??:
        _238_ = b[11:8];
      default:
        _238_ = a;
    endcase
  endfunction
  assign data_be_o = _238_(4'hx, { _001_, _030_, _040_ }, { _064_, _065_, _101_ });
  assign _101_ = | _100_;
  assign _100_[0] = lsu_type_i == 2'h2;
  assign _100_[1] = lsu_type_i == 2'h3;
  assign _065_ = lsu_type_i == 2'h1;
  assign _064_ = ! lsu_type_i;
  assign addr_last_d = addr_incr_req_o ? { adder_result_ex_i[31:2], 2'h0 } : adder_result_ex_i;
  assign _102_ = split_misaligned_access ? 3'h2 : 3'h0;
  assign _103_ = split_misaligned_access ? 3'h1 : 3'h3;
  assign _104_ = data_gnt_i ? 3'h0 : 3'h3;
  assign addr_last_o = addr_last_q;
  assign data_addr = adder_result_ex_i;
  assign data_addr_o = { adder_result_ex_i[31:2], 2'h0 };
  assign data_addr_w_aligned = { adder_result_ex_i[31:2], 2'h0 };
  assign data_be = data_be_o;
  assign data_intg_err = 1'h0;
  assign data_offset = adder_result_ex_i[1:0];
  assign data_rdata_ext = lsu_rdata_o;
  assign data_wdata = data_wdata_o;
  assign data_we_o = lsu_we_i;
  assign load_resp_intg_err_o = 1'h0;
  assign store_resp_intg_err_o = 1'h0;
endmodule

module \$paramod\ibex_prefetch_buffer\ResetAll=1'0 (clk_i, rst_ni, req_i, branch_i, addr_i, ready_i, valid_o, rdata_o, addr_o, err_o, err_plus2_o, instr_req_o, instr_gnt_i, instr_addr_o, instr_rdata_i, instr_err_i, instr_rvalid_i, busy_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire [1:0] _17_;
  wire _18_;
  wire _19_;
  wire [31:0] _20_;
  wire [31:0] _21_;
  input [31:0] addr_i;
  wire [31:0] addr_i;
  output [31:0] addr_o;
  wire [31:0] addr_o;
  wire [1:0] branch_discard_n;
  reg [1:0] branch_discard_q;
  wire [1:0] branch_discard_s;
  input branch_i;
  wire branch_i;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire discard_req_d;
  reg discard_req_q;
  output err_o;
  wire err_o;
  output err_plus2_o;
  wire err_plus2_o;
  wire [31:0] fetch_addr_d;
  wire fetch_addr_en;
  reg [31:0] fetch_addr_q;
  wire [31:0] fifo_addr;
  wire [1:0] fifo_busy;
  wire fifo_clear;
  wire fifo_ready;
  wire fifo_valid;
  wire [31:0] instr_addr;
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  wire [31:0] instr_addr_w_aligned;
  input instr_err_i;
  wire instr_err_i;
  input instr_gnt_i;
  wire instr_gnt_i;
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  output instr_req_o;
  wire instr_req_o;
  input instr_rvalid_i;
  wire instr_rvalid_i;
  output [31:0] rdata_o;
  wire [31:0] rdata_o;
  wire [1:0] rdata_outstanding_n;
  reg [1:0] rdata_outstanding_q;
  wire [1:0] rdata_outstanding_rev;
  wire [1:0] rdata_outstanding_s;
  input ready_i;
  wire ready_i;
  input req_i;
  wire req_i;
  input rst_ni;
  wire rst_ni;
  wire [31:0] stored_addr_d;
  wire stored_addr_en;
  reg [31:0] stored_addr_q;
  wire valid_new_req;
  output valid_o;
  wire valid_o;
  wire valid_req;
  wire valid_req_d;
  reg valid_req_q;
  assign fetch_addr_d = _20_ + { 29'h00000000, _01_, 2'h0 };
  assign _00_ = req_i & _13_;
  assign valid_new_req = _00_ & _10_;
  assign valid_req_d = instr_req_o & _11_;
  assign discard_req_d = valid_req_q & _14_;
  assign stored_addr_en = _01_ & _11_;
  assign _01_ = valid_new_req & _09_;
  assign _04_ = branch_i & rdata_outstanding_q[0];
  assign _05_ = _02_ & rdata_outstanding_q[0];
  assign _02_ = instr_req_o & instr_gnt_i;
  assign _03_ = _02_ & discard_req_d;
  assign _06_ = _03_ & rdata_outstanding_q[0];
  assign _07_ = branch_i & rdata_outstanding_q[1];
  assign fifo_valid = instr_rvalid_i & _12_;
  always @(posedge clk_i)
    if (fetch_addr_en) fetch_addr_q <= fetch_addr_d;
  always @(posedge clk_i)
    if (_08_) stored_addr_q[1:0] <= _21_[1:0];
  always @(posedge clk_i)
    if (stored_addr_en) stored_addr_q[31:2] <= instr_addr[31:2];
  assign _09_ = ~ valid_req_q;
  assign _08_ = & { _09_, stored_addr_en };
  assign fifo_ready = ! _18_;
  assign _10_ = ~ rdata_outstanding_q[1];
  assign _11_ = ~ instr_gnt_i;
  assign _12_ = ~ branch_discard_q[0];
  assign _13_ = fifo_ready | branch_i;
  assign instr_req_o = valid_req_q | valid_new_req;
  assign _14_ = branch_i | discard_req_q;
  assign fetch_addr_en = branch_i | _01_;
  assign rdata_outstanding_n[0] = _02_ | rdata_outstanding_q[0];
  assign _15_ = _03_ | _04_;
  assign branch_discard_n[0] = _15_ | branch_discard_q[0];
  assign rdata_outstanding_n[1] = _05_ | rdata_outstanding_q[1];
  assign _16_ = _06_ | _07_;
  assign branch_discard_n[1] = _16_ | branch_discard_q[1];
  assign busy_o = _19_ | instr_req_o;
  assign _17_ = fifo_busy | { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) valid_req_q <= 1'h0;
    else valid_req_q <= valid_req_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) discard_req_q <= 1'h0;
    else discard_req_q <= discard_req_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) rdata_outstanding_q <= 2'h0;
    else rdata_outstanding_q <= rdata_outstanding_s;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) branch_discard_q <= 2'h0;
    else branch_discard_q <= branch_discard_s;
  assign _18_ = & _17_;
  assign _19_ = | rdata_outstanding_q;
  assign _20_ = branch_i ? addr_i : { fetch_addr_q[31:2], 2'h0 };
  assign instr_addr = valid_req_q ? stored_addr_q : _21_;
  assign _21_ = branch_i ? addr_i : fetch_addr_q;
  assign rdata_outstanding_s = instr_rvalid_i ? { 1'h0, rdata_outstanding_n[1] } : rdata_outstanding_n;
  assign branch_discard_s = instr_rvalid_i ? { 1'h0, branch_discard_n[1] } : branch_discard_n;
  \$paramod\ibex_fetch_fifo\NUM_REQS=32'00000000000000000000000000000010\ResetAll=1'0  fifo_i (
    .busy_o(fifo_busy),
    .clear_i(branch_i),
    .clk_i(clk_i),
    .in_addr_i(addr_i),
    .in_err_i(instr_err_i),
    .in_rdata_i(instr_rdata_i),
    .in_valid_i(fifo_valid),
    .out_addr_o(addr_o),
    .out_err_o(err_o),
    .out_err_plus2_o(err_plus2_o),
    .out_rdata_o(rdata_o),
    .out_ready_i(ready_i),
    .out_valid_o(valid_o),
    .rst_ni(rst_ni)
  );
  assign fifo_addr = addr_i;
  assign fifo_clear = branch_i;
  assign instr_addr_o = { instr_addr[31:2], 2'h0 };
  assign instr_addr_w_aligned = { instr_addr[31:2], 2'h0 };
  assign rdata_outstanding_rev = { rdata_outstanding_q[0], rdata_outstanding_q[1] };
  assign stored_addr_d = instr_addr;
  assign valid_req = instr_req_o;
endmodule

module \$paramod\prim_generic_buf\Width=s32'00000000000000000000000000000100 (in_i, out_o);
  input [3:0] in_i;
  wire [3:0] in_i;
  wire [3:0] inv;
  output [3:0] out_o;
  wire [3:0] out_o;
  assign inv = ~ in_i;
  assign out_o = ~ inv;
endmodule

module \$paramod\prim_generic_buf\Width=s32'00000000000000000000000000100000 (in_i, out_o);
  input [31:0] in_i;
  wire [31:0] in_i;
  wire [31:0] inv;
  output [31:0] out_o;
  wire [31:0] out_o;
  assign inv = ~ in_i;
  assign out_o = ~ inv;
endmodule

module \$paramod\prim_generic_clock_gating\NoFpgaGate=1'0\FpgaBufGlobal=1'1 (clk_i, en_i, test_en_i, clk_o);
  wire _0_;
  input clk_i;
  wire clk_i;
  output clk_o;
  wire clk_o;
  input en_i;
  wire en_i;
  reg en_latch;
  input test_en_i;
  wire test_en_i;
  assign clk_o = en_latch & clk_i;
  always @*
    if (!clk_i) en_latch = _0_;
  assign _0_ = en_i | test_en_i;
endmodule

module ibex_top(clk_i, rst_ni, test_en_i, hart_id_i, boot_addr_i, instr_req_o, instr_gnt_i, instr_rvalid_i, instr_addr_o, instr_rdata_i, instr_rdata_intg_i, instr_err_i, data_req_o, data_gnt_i, data_rvalid_i, data_we_o, data_be_o, data_addr_o, data_wdata_o, data_wdata_intg_o, data_rdata_i
, data_rdata_intg_i, data_err_i, irq_software_i, irq_timer_i, irq_external_i, irq_fast_i, irq_nm_i, scramble_key_valid_i, scramble_key_i, scramble_nonce_i, scramble_req_o, debug_req_i, double_fault_seen_o, fetch_enable_i, alert_minor_o, alert_major_internal_o, alert_major_bus_o, core_sleep_o, scan_rst_ni, ram_cfg_i, crash_dump_o
);
  wire _0_;
  wire _1_;
  output alert_major_bus_o;
  wire alert_major_bus_o;
  output alert_major_internal_o;
  wire alert_major_internal_o;
  output alert_minor_o;
  wire alert_minor_o;
  input [31:0] boot_addr_i;
  wire [31:0] boot_addr_i;
  wire clk;
  input clk_i;
  wire clk_i;
  wire clock_en;
  wire core_alert_major_bus;
  wire core_alert_major_internal;
  wire core_alert_minor;
  wire [3:0] core_busy_d;
  reg [3:0] core_busy_q;
  output core_sleep_o;
  wire core_sleep_o;
  output [159:0] crash_dump_o;
  wire [159:0] crash_dump_o;
  output [31:0] data_addr_o;
  wire [31:0] data_addr_o;
  output [3:0] data_be_o;
  wire [3:0] data_be_o;
  input data_err_i;
  wire data_err_i;
  input data_gnt_i;
  wire data_gnt_i;
  wire [31:0] data_rdata_core;
  input [31:0] data_rdata_i;
  wire [31:0] data_rdata_i;
  input [6:0] data_rdata_intg_i;
  wire [6:0] data_rdata_intg_i;
  output data_req_o;
  wire data_req_o;
  input data_rvalid_i;
  wire data_rvalid_i;
  wire [31:0] data_wdata_core;
  output [6:0] data_wdata_intg_o;
  wire [6:0] data_wdata_intg_o;
  output [31:0] data_wdata_o;
  wire [31:0] data_wdata_o;
  output data_we_o;
  wire data_we_o;
  input debug_req_i;
  wire debug_req_i;
  output double_fault_seen_o;
  wire double_fault_seen_o;
  wire dummy_instr_id;
  wire dummy_instr_wb;
  wire [3:0] fetch_enable_buf;
  input [3:0] fetch_enable_i;
  wire [3:0] fetch_enable_i;
  wire \gen_no_lockstep.unused_scan ;
  wire [9:0] \gen_norams.unused_ram_cfg ;
  wire \gen_norams.unused_ram_inputs ;
  input [31:0] hart_id_i;
  wire [31:0] hart_id_i;
  wire [7:0] ic_data_addr;
  wire [127:0] ic_data_rdata;
  wire [1:0] ic_data_req;
  wire [63:0] ic_data_wdata;
  wire ic_data_write;
  wire ic_scr_key_req;
  wire [7:0] ic_tag_addr;
  wire [43:0] ic_tag_rdata;
  wire [1:0] ic_tag_req;
  wire [21:0] ic_tag_wdata;
  wire ic_tag_write;
  output [31:0] instr_addr_o;
  wire [31:0] instr_addr_o;
  input instr_err_i;
  wire instr_err_i;
  input instr_gnt_i;
  wire instr_gnt_i;
  wire [31:0] instr_rdata_core;
  input [31:0] instr_rdata_i;
  wire [31:0] instr_rdata_i;
  input [6:0] instr_rdata_intg_i;
  wire [6:0] instr_rdata_intg_i;
  output instr_req_o;
  wire instr_req_o;
  input instr_rvalid_i;
  wire instr_rvalid_i;
  input irq_external_i;
  wire irq_external_i;
  input [14:0] irq_fast_i;
  wire [14:0] irq_fast_i;
  input irq_nm_i;
  wire irq_nm_i;
  wire irq_pending;
  input irq_software_i;
  wire irq_software_i;
  input irq_timer_i;
  wire irq_timer_i;
  wire lockstep_alert_major_bus;
  wire lockstep_alert_major_internal;
  wire lockstep_alert_minor;
  input [9:0] ram_cfg_i;
  wire [9:0] ram_cfg_i;
  wire rf_alert_major_internal;
  wire [4:0] rf_raddr_a;
  wire [4:0] rf_raddr_b;
  wire [31:0] rf_rdata_a_ecc;
  wire [31:0] rf_rdata_a_ecc_buf;
  wire [31:0] rf_rdata_b_ecc;
  wire [31:0] rf_rdata_b_ecc_buf;
  wire [4:0] rf_waddr_wb;
  wire [31:0] rf_wdata_wb_ecc;
  wire rf_we_wb;
  input rst_ni;
  wire rst_ni;
  input scan_rst_ni;
  wire scan_rst_ni;
  input [127:0] scramble_key_i;
  wire [127:0] scramble_key_i;
  wire [127:0] scramble_key_q;
  wire scramble_key_valid_d;
  input scramble_key_valid_i;
  wire scramble_key_valid_i;
  wire scramble_key_valid_q;
  input [63:0] scramble_nonce_i;
  wire [63:0] scramble_nonce_i;
  wire [63:0] scramble_nonce_q;
  wire scramble_req_d;
  output scramble_req_o;
  wire scramble_req_o;
  wire scramble_req_q;
  input test_en_i;
  wire test_en_i;
  wire unused_scramble_inputs;
  assign core_sleep_o = ~ clock_en;
  assign alert_major_internal_o = core_alert_major_internal | rf_alert_major_internal;
  assign _0_ = core_busy_q[0] | debug_req_i;
  assign _1_ = _0_ | irq_pending;
  assign clock_en = _1_ | irq_nm_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) core_busy_q <= 4'ha;
    else core_busy_q <= core_busy_d;
  \$paramod$6e2e0a12ad0ebef4b29bd0e1dd7b1a205c645b47\prim_clock_gating  core_clock_gate_i (
    .clk_i(clk_i),
    .clk_o(clk),
    .en_i(clock_en),
    .test_en_i(test_en_i)
  );
  \$paramod$a9bef41b3b641c45d77bc238893e68a57373d786\ibex_register_file_ff  \gen_regfile_ff.register_file_i  (
    .clk_i(clk),
    .dummy_instr_id_i(dummy_instr_id),
    .dummy_instr_wb_i(dummy_instr_wb),
    .err_o(rf_alert_major_internal),
    .raddr_a_i(rf_raddr_a),
    .raddr_b_i(rf_raddr_b),
    .rdata_a_o(rf_rdata_a_ecc),
    .rdata_b_o(rf_rdata_b_ecc),
    .rst_ni(rst_ni),
    .test_en_i(test_en_i),
    .waddr_a_i(rf_waddr_wb),
    .wdata_a_i(rf_wdata_wb_ecc),
    .we_a_i(rf_we_wb)
  );
  \$paramod$1f2cba5866897a44b387e1c2993af0b4468bf03a\prim_buf  u_fetch_enable_buf (
    .in_i(fetch_enable_i),
    .out_o(fetch_enable_buf)
  );
  \$paramod$aede8c9d141b01b36ebf5d5b516ae2e58869ec17\ibex_core  u_ibex_core (
    .alert_major_bus_o(core_alert_major_bus),
    .alert_major_internal_o(core_alert_major_internal),
    .alert_minor_o(core_alert_minor),
    .boot_addr_i(boot_addr_i),
    .clk_i(clk),
    .core_busy_o(core_busy_d),
    .crash_dump_o(crash_dump_o),
    .data_addr_o(data_addr_o),
    .data_be_o(data_be_o),
    .data_err_i(data_err_i),
    .data_gnt_i(data_gnt_i),
    .data_rdata_i(data_rdata_i),
    .data_req_o(data_req_o),
    .data_rvalid_i(data_rvalid_i),
    .data_wdata_o(data_wdata_core),
    .data_we_o(data_we_o),
    .debug_req_i(debug_req_i),
    .double_fault_seen_o(double_fault_seen_o),
    .dummy_instr_id_o(dummy_instr_id),
    .dummy_instr_wb_o(dummy_instr_wb),
    .fetch_enable_i(fetch_enable_buf),
    .hart_id_i(hart_id_i),
    .ic_data_addr_o(ic_data_addr),
    .ic_data_rdata_i(128'h00000000000000000000000000000000),
    .ic_data_req_o(ic_data_req),
    .ic_data_wdata_o(ic_data_wdata),
    .ic_data_write_o(ic_data_write),
    .ic_scr_key_req_o(ic_scr_key_req),
    .ic_scr_key_valid_i(1'h1),
    .ic_tag_addr_o(ic_tag_addr),
    .ic_tag_rdata_i(44'h00000000000),
    .ic_tag_req_o(ic_tag_req),
    .ic_tag_wdata_o(ic_tag_wdata),
    .ic_tag_write_o(ic_tag_write),
    .instr_addr_o(instr_addr_o),
    .instr_err_i(instr_err_i),
    .instr_gnt_i(instr_gnt_i),
    .instr_rdata_i(instr_rdata_i),
    .instr_req_o(instr_req_o),
    .instr_rvalid_i(instr_rvalid_i),
    .irq_external_i(irq_external_i),
    .irq_fast_i(irq_fast_i),
    .irq_nm_i(irq_nm_i),
    .irq_pending_o(irq_pending),
    .irq_software_i(irq_software_i),
    .irq_timer_i(irq_timer_i),
    .rf_raddr_a_o(rf_raddr_a),
    .rf_raddr_b_o(rf_raddr_b),
    .rf_rdata_a_ecc_i(rf_rdata_a_ecc_buf),
    .rf_rdata_b_ecc_i(rf_rdata_b_ecc_buf),
    .rf_waddr_wb_o(rf_waddr_wb),
    .rf_wdata_wb_ecc_o(rf_wdata_wb_ecc),
    .rf_we_wb_o(rf_we_wb),
    .rst_ni(rst_ni)
  );
  \$paramod$b248027d9aa650110c5d3ad1fe588bd99fafd9b9\prim_buf  u_rf_rdata_a_ecc_buf (
    .in_i(rf_rdata_a_ecc),
    .out_o(rf_rdata_a_ecc_buf)
  );
  \$paramod$b248027d9aa650110c5d3ad1fe588bd99fafd9b9\prim_buf  u_rf_rdata_b_ecc_buf (
    .in_i(rf_rdata_b_ecc),
    .out_o(rf_rdata_b_ecc_buf)
  );
  assign alert_major_bus_o = core_alert_major_bus;
  assign alert_minor_o = core_alert_minor;
  assign data_rdata_core = data_rdata_i;
  assign data_wdata_intg_o = 7'h00;
  assign data_wdata_o = data_wdata_core;
  assign \gen_no_lockstep.unused_scan  = scan_rst_ni;
  assign \gen_norams.unused_ram_cfg  = ram_cfg_i;
  assign \gen_norams.unused_ram_inputs  = 1'h0;
  assign ic_data_rdata = 128'h00000000000000000000000000000000;
  assign ic_tag_rdata = 44'h00000000000;
  assign instr_rdata_core = instr_rdata_i;
  assign lockstep_alert_major_bus = 1'h0;
  assign lockstep_alert_major_internal = 1'h0;
  assign lockstep_alert_minor = 1'h0;
  assign scramble_key_q = 128'h00000000000000000000000000000000;
  assign scramble_key_valid_d = 1'h1;
  assign scramble_key_valid_q = 1'h1;
  assign scramble_nonce_q = 64'h0000000000000000;
  assign scramble_req_d = 1'h0;
  assign scramble_req_o = 1'h0;
  assign scramble_req_q = 1'h0;
  assign unused_scramble_inputs = 1'h0;
endmodule
